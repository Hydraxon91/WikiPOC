// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240514055911_UpdateForumPostModel3")]
    partial class UpdateForumPostModel3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57d45f9f-ff0a-4ac6-9a41-4bea7c8f0a31"),
                            CategoryName = "Characters"
                        },
                        new
                        {
                            Id = new Guid("fb18e73b-32ca-410b-bfc2-ef7c541d6d4d"),
                            CategoryName = "Stories"
                        },
                        new
                        {
                            Id = new Guid("e58ae848-bbc8-4d52-8813-c3a034bc23f7"),
                            CategoryName = "Locations"
                        },
                        new
                        {
                            Id = new Guid("8428d8c0-cd80-42d0-9e90-cc525c54e60b"),
                            CategoryName = "Events"
                        },
                        new
                        {
                            Id = new Guid("0c1d8192-e38f-42e4-9b3f-9359242ea91d"),
                            CategoryName = "Organizations"
                        },
                        new
                        {
                            Id = new Guid("ddc90441-a3d5-43a0-84fc-451ba8b79db1"),
                            CategoryName = "Concepts"
                        },
                        new
                        {
                            Id = new Guid("7d9c1756-b5f8-4695-be84-23326cf6209a"),
                            CategoryName = "Technologies"
                        },
                        new
                        {
                            Id = new Guid("326c792e-8eb6-4bca-b40c-06405787006a"),
                            CategoryName = "Arts and Entertainment"
                        },
                        new
                        {
                            Id = new Guid("50f23462-416a-4206-83c3-ad98b325e6f2"),
                            CategoryName = "Sports and Recreation"
                        },
                        new
                        {
                            Id = new Guid("c7597dfb-328a-41c6-9e3f-011de7f1bcd3"),
                            CategoryName = "Science and Technology"
                        },
                        new
                        {
                            Id = new Guid("ac8a87d0-6eac-44c6-86d2-755795ba9036"),
                            CategoryName = "History and Culture"
                        },
                        new
                        {
                            Id = new Guid("558defcf-825f-4502-865f-ae3ba1db2ab1"),
                            CategoryName = "Food and Drink"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForumTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForumTopics");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a12e83f-4915-4461-aef5-ea4d0a9af45a"),
                            Content = "Eligendi provident consequatur consectetur ex ab assumenda asperiores enim. Dolores aliquid fugiat et. Aut ullam at aut. Enim itaque optio inventore soluta alias est aut. Error ea et omnis laborum unde sit quisquam et. Culpa enim accusamus qui illum temporibus.\n\nEligendi facere dolores dolorem. Deleniti ut voluptates repellendus est omnis. Vel deserunt nobis molestiae vero. Molestias voluptate voluptas quae voluptas. Voluptates ut aperiam exercitationem non dolor harum. Necessitatibus et hic ad temporibus dolor est neque odit voluptatem.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("bbf5e390-d1a9-4379-8696-52bb48e0abfc")
                        },
                        new
                        {
                            Id = new Guid("20aa0750-b505-4099-999c-827738754a84"),
                            Content = "Sunt asperiores corrupti voluptate officiis quis. Magnam tenetur expedita doloribus deserunt. Sit deleniti pariatur rerum eos ut. Soluta accusantium sed. Quod expedita ea impedit repellendus explicabo officiis atque sapiente.\n\nAmet eligendi sint reiciendis aspernatur ipsam. Ipsum vitae iusto vel ducimus dicta reiciendis modi dolor. Repudiandae consequatur sit blanditiis sint labore natus corporis qui. Nobis nobis amet nihil quia vel excepturi harum. Et qui dolorem. Occaecati est ea ipsa nesciunt nostrum quaerat sequi quia.\n\nConsequatur voluptates rem aperiam et. Amet explicabo provident. Non sunt aliquid rerum exercitationem ut. Error corporis incidunt sit a quis omnis. Et veritatis illum quam nam velit ut iste et. Ratione occaecati aut fuga id sed rerum consequuntur est maiores.\n\nVoluptates voluptas ut illum. Dolores distinctio beatae in. Eveniet facere molestiae similique numquam voluptatum magnam.\n\nError id voluptatem officia dolores delectus. Sit eum veniam et eum sit veniam. Rerum molestiae ut. Quas animi totam qui aut. Nesciunt doloremque saepe sint nam commodi qui blanditiis. Dolorem fugiat sit sequi eaque veritatis ex consectetur repudiandae.\n\nPlaceat rerum ullam beatae aut. Omnis commodi eveniet omnis odio culpa qui et aut quod. Aliquam velit exercitationem iusto accusamus excepturi autem. Tempora deserunt odit numquam. Est qui sit accusantium pariatur.\n\nPossimus ad autem sapiente dolor veniam voluptatum eum ut. Quod corrupti asperiores eveniet rem et veniam natus omnis. Earum nihil quas sed dolor dignissimos. Est tempore voluptas. Repellat doloremque cumque aut iusto consequatur aliquid reprehenderit quia.\n\nUt est vero eligendi ducimus accusamus praesentium. Aut voluptate molestiae est odio explicabo nam laudantium non maxime. Sit rerum quas voluptatem voluptas amet tempora. Deleniti at explicabo dicta. Fuga dolorem sunt quae est placeat eligendi eum. Enim non et est saepe debitis voluptatem rerum.\n\nCorporis et minima quo ipsam at molestiae asperiores quia nihil. Quaerat corrupti sunt dignissimos magnam ipsam et repudiandae nobis. Soluta occaecati eius. Modi dolorum consequatur et. Omnis aspernatur non ut vitae eveniet tempora cum dicta ut. Perferendis quibusdam exercitationem quo consequuntur.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("bbf5e390-d1a9-4379-8696-52bb48e0abfc")
                        },
                        new
                        {
                            Id = new Guid("2c34b260-7ed3-4c5b-861f-180d8133b37b"),
                            Content = "Labore reprehenderit aut est. Laborum non ut accusantium et. Perspiciatis est error qui est aspernatur sint facilis illum aspernatur. Qui enim in.\n\nCupiditate enim incidunt aut. Quia aperiam enim quia qui ut. Sunt dolores quod illo. Rerum magnam quas voluptatibus dolorem dolores. Ea ut aliquid cum quis ducimus voluptas. Accusamus fuga facere qui aperiam dolore.\n\nTenetur fugit aliquid error voluptate. Recusandae in cum earum suscipit odio rerum saepe quis porro. Quisquam facilis aut maiores ducimus expedita quas. Nam placeat dolorem earum omnis qui vero. Eos inventore voluptatem est aut ex doloremque vitae eveniet qui. Saepe suscipit et rerum sed.\n\nItaque eius consectetur ducimus ut velit fugit quibusdam. Aut veritatis voluptates dolores nihil esse. Quibusdam sed a voluptates dolores voluptatem. Distinctio dolorum soluta sint id. Odit ad ratione autem ducimus culpa. Sit quidem cumque quia.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("bbf5e390-d1a9-4379-8696-52bb48e0abfc")
                        },
                        new
                        {
                            Id = new Guid("1e8db77f-36e0-4e78-8826-c7928b787169"),
                            Content = "Quam voluptatem ea. Esse ex et soluta quibusdam dolorem. Delectus voluptates dicta. Consequatur eveniet repellendus voluptatem amet maiores quia et aut fugit. Nam nemo voluptatum.\n\nCupiditate dolore id voluptas. Consequatur nesciunt voluptas voluptas nobis sunt enim officia. Sapiente voluptatum odit alias iure est. Reiciendis eum ea ea exercitationem exercitationem quo aut est. Quia nostrum cupiditate ex omnis neque ullam quia.\n\nAnimi est magni velit numquam deserunt consequatur repellendus officia dicta. Odit accusantium itaque aut id. Qui id optio labore vero repellat unde amet similique.\n\nVoluptatum quis iusto quasi beatae quia eum aut ut possimus. Doloremque rem magnam vel aut officiis eos nobis. Corrupti sunt eveniet inventore et suscipit voluptatem eaque. Quam qui officiis reprehenderit autem magnam voluptas aliquam.\n\nTemporibus vero quis minus reprehenderit. Consequatur rem aut ea molestias. Nihil doloremque exercitationem pariatur voluptas eligendi qui nulla. Illo veritatis ut delectus doloribus minima.\n\nDolorum a nulla ratione est sed eligendi ullam. Doloremque recusandae non repellendus maxime deleniti ad. Aut tempora eius omnis qui in aut officia nostrum ad.\n\nAccusamus deserunt ut voluptate aut sit id iusto. Ut qui aliquam odit ea expedita fuga sint. Cum incidunt at explicabo eum ipsa rerum facere perspiciatis.\n\nVoluptas et provident hic praesentium. Autem aliquam enim optio exercitationem non sequi quibusdam. Nihil fugit sint aperiam id rerum deleniti ipsum est asperiores. Esse nemo voluptatem dolores explicabo modi facilis consequatur excepturi sapiente. Cumque expedita totam neque consequatur illo sed.\n\nAdipisci sit optio suscipit molestias. Qui ut saepe qui. Expedita veniam quae cumque reprehenderit. Delectus quasi laudantium aut soluta dolor quibusdam deleniti quo consequatur.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("bbf5e390-d1a9-4379-8696-52bb48e0abfc")
                        },
                        new
                        {
                            Id = new Guid("8e11b0e6-24b9-4edd-b9d4-1b0130bfd0fc"),
                            Content = "Omnis asperiores adipisci. Amet doloribus impedit autem molestiae omnis. Est ut et quas vel deserunt delectus voluptates id aut. Et sit impedit error voluptatem voluptates et alias occaecati. Dolorem iste non quibusdam perspiciatis pariatur.\n\nDolorem ut quaerat nesciunt illum quo. Odio ut sunt. Repellat rem at distinctio. Laboriosam est aliquam ut sint occaecati nam ratione quis. Illum rem temporibus sunt veniam laborum quibusdam officia corrupti.\n\nFacere a cumque. Eligendi velit qui dolores. Saepe sit inventore et ut eos optio et. Molestiae et fugiat porro autem. Dolorem modi voluptas possimus ad. Quam tenetur eum.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("bbf5e390-d1a9-4379-8696-52bb48e0abfc")
                        },
                        new
                        {
                            Id = new Guid("76f7e781-a560-49e7-bfd1-7f6488885352"),
                            Content = "Nobis molestiae voluptas est porro. Eius at officiis non atque est illum dolorem. Quisquam dicta et ut. Modi quia ipsa. Veritatis qui minus et quasi nulla.\n\nSuscipit pariatur aperiam consequatur alias commodi modi praesentium sint sed. Corporis repudiandae suscipit qui aut quibusdam ullam sunt sequi. At et et corrupti ut nulla nisi iusto et. Ab excepturi quam exercitationem. Repellat dolorem velit nostrum placeat beatae voluptas eos.\n\nIllo veritatis eveniet sed ducimus assumenda distinctio laudantium enim. Dolorem atque repudiandae deserunt dolores accusantium ut iure quam numquam. Autem eos ut doloremque inventore qui aut minima aspernatur.\n\nImpedit natus et. Deleniti non deserunt est. Inventore ut quae. Tempora in dolor dolorem corporis.\n\nQui eum quibusdam vero natus consequatur. Mollitia sit nihil consequatur ducimus temporibus rerum excepturi consequatur id. Numquam praesentium est.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("bbf5e390-d1a9-4379-8696-52bb48e0abfc")
                        },
                        new
                        {
                            Id = new Guid("c8064592-4805-43eb-b9ff-992cabcb696f"),
                            Content = "Ea unde commodi voluptatem reprehenderit animi voluptas quibusdam alias. Voluptatem magni sed velit. Voluptatem sint qui nostrum odio ex debitis. Provident laborum mollitia aliquam delectus illum maxime cupiditate laboriosam. Nulla qui id veritatis et et quia rerum vero.\n\nAtque ipsa voluptatem quae maiores quo. Vel omnis perferendis architecto blanditiis omnis consectetur. Tenetur sed enim non. Iste est occaecati natus assumenda facere. Sed ab iure temporibus occaecati est.\n\nOfficiis sed quibusdam deleniti perferendis quam debitis sed error. Amet reiciendis voluptatem facere quos tenetur similique. Quo odit qui facilis ea. Maiores nisi numquam magni deserunt ut dolorum accusantium. Cupiditate rem blanditiis illum. Ea dolor cumque ut voluptas.\n\nOptio sint provident et alias facere aut. Non incidunt labore. Deleniti voluptatem tenetur ut nihil eos.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("b51a8575-1673-4266-a821-e2e843b0f587")
                        },
                        new
                        {
                            Id = new Guid("27b19251-3f5f-4f02-8315-26d3d27db222"),
                            Content = "Voluptatem et id dolorem non voluptatem. In architecto ut error. Possimus rem ab soluta. Dignissimos ea esse id.\n\nHic tenetur veniam consequuntur tempora qui ipsum. Sint consequatur atque velit nemo sunt nisi quia nesciunt. Ea fuga rerum sed voluptatem sint aliquid iure. Delectus eum suscipit omnis reprehenderit labore consequuntur reiciendis facere qui.\n\nVoluptatum quibusdam animi. Et tempora ut minus dolorum. Minus et asperiores ut blanditiis minima.\n\nDolores atque illum. Ut mollitia sit non libero fugit consectetur velit consectetur ut. Ducimus dolor omnis omnis architecto vitae fuga quia cupiditate. Omnis illo ab impedit odio quia quod autem tempore.\n\nVoluptatem rerum dolores aperiam ut reiciendis rem ut. Inventore tempore maxime laboriosam qui quam. Perspiciatis placeat quas nam nesciunt sit aut similique magni. Qui enim et velit facilis aut sit dolorem inventore magni.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("b51a8575-1673-4266-a821-e2e843b0f587")
                        },
                        new
                        {
                            Id = new Guid("a0b87223-8b59-4982-b759-0d3ae0d8f4cb"),
                            Content = "Voluptatem perspiciatis molestiae voluptate et necessitatibus. Maxime qui eius ut et. Corrupti et cum ullam eum veniam necessitatibus cum.\n\nEveniet delectus vel rerum nostrum odit asperiores. Est architecto aut ipsa odit iste amet vel. Autem velit provident non libero et voluptatibus magnam repellendus explicabo. Fuga sequi totam veritatis magnam eveniet nobis eveniet quo aperiam. Consequatur eligendi cumque rerum est facilis et deserunt tempora qui. Et eos deserunt veniam nobis officiis.\n\nConsectetur est et. Reprehenderit eos et modi. Iure atque voluptatem aut iste ea. Voluptas provident cum esse quia est dignissimos numquam reiciendis et. Repudiandae voluptatem cumque culpa a iste temporibus tenetur illum exercitationem.\n\nCommodi praesentium facere voluptatem impedit omnis esse aut dolorem. Soluta id provident omnis autem illum voluptatem quis. Vitae deserunt enim facilis nesciunt iusto nihil quis repellendus.\n\nError quo at saepe eum beatae consectetur. Aliquam et possimus. Impedit enim impedit voluptatibus modi minus voluptatem velit dolorem.\n\nVoluptatem deserunt voluptates aut exercitationem sequi inventore et ab aut. Dolores voluptas nulla est dignissimos recusandae quae optio. Aliquam ipsum corporis aut dolores. Magnam rem at libero esse quibusdam repudiandae enim. Error iste non explicabo aut natus laborum. Praesentium amet earum corporis nam iusto aut.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("b51a8575-1673-4266-a821-e2e843b0f587")
                        },
                        new
                        {
                            Id = new Guid("8db2e0f3-4145-49c6-a982-ea39f93a52df"),
                            Content = "Iusto minima iste temporibus. Ipsa quae et. Eum nihil molestias. Voluptatibus debitis minus eveniet quidem voluptatem vel pariatur praesentium iure. Omnis qui qui ea voluptatem qui quibusdam assumenda maiores. Qui cupiditate corporis voluptas cupiditate quasi vero.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("b51a8575-1673-4266-a821-e2e843b0f587")
                        },
                        new
                        {
                            Id = new Guid("0a8958b7-11a3-4245-8d62-e8bbe12cdc74"),
                            Content = "Quia nisi et. Voluptatem pariatur eum accusamus qui sint et molestias. Itaque veritatis officia quae eum totam. Id provident exercitationem et ipsam aperiam facere molestiae eius. Sequi optio esse est illo culpa nisi.\n\nSapiente commodi laudantium cumque officia aut. Et odit facere magnam sed voluptate mollitia velit non veniam. Fugiat velit maxime pariatur quasi ex in sequi. Voluptas et et quod quis ratione sint nemo tenetur sint. Distinctio sed debitis veniam quia voluptas et minima sit.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("b51a8575-1673-4266-a821-e2e843b0f587")
                        },
                        new
                        {
                            Id = new Guid("3f4dad67-cf23-488c-9038-705777765ef6"),
                            Content = "Quod animi temporibus veniam consequatur omnis explicabo. Amet consectetur sed. Unde dolor neque quisquam deserunt voluptatem maiores. Voluptatibus fuga doloribus earum omnis sapiente. Voluptates sit fuga fugit. Et qui et et sequi.\n\nCorrupti mollitia est eligendi et deserunt est. Est nostrum qui placeat. Omnis velit ad soluta. Dolorem nam molestias autem deserunt id eum perspiciatis iure. Culpa a temporibus ad sed illo ut quia. Commodi voluptas omnis minus neque similique rem culpa architecto.\n\nDistinctio maxime laborum optio saepe tempora rerum sint eum facere. Repudiandae magnam laudantium fugit. Porro soluta et velit cum. Commodi temporibus quia vel animi et reprehenderit rerum unde iusto.\n\nMinima ipsum ducimus molestias quia accusantium temporibus quaerat. Et laudantium enim eos deserunt ea sed. Quia praesentium sint quos unde voluptas eos ducimus ad. Quia maiores magni est quaerat neque assumenda. Molestiae minus omnis rem eos beatae. Consequuntur repellendus sit unde qui earum.\n\nQui eos quis vel nostrum laboriosam. Voluptatem qui perspiciatis dolores. Fugit non tenetur sit.\n\nUnde qui quo rerum ut. Voluptates soluta enim enim eveniet hic nemo optio facilis eos. Quas mollitia reiciendis asperiores harum nisi sed alias non. Voluptatem qui sit illum ut natus accusantium enim dolor. Natus vel perspiciatis doloribus.\n\nQuaerat soluta qui nam nostrum cum aut quo. Soluta provident voluptatem illo nihil eum architecto laborum. Voluptas maiores dolor illo velit sunt et ullam.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("b51a8575-1673-4266-a821-e2e843b0f587")
                        },
                        new
                        {
                            Id = new Guid("e810157f-1f02-4479-9334-0f0059669b9f"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("8d45c457-fd89-4757-ab4b-b99e4a06902c")
                        },
                        new
                        {
                            Id = new Guid("290faa52-0e20-4905-b4c2-8c644463d031"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("8d45c457-fd89-4757-ab4b-b99e4a06902c")
                        },
                        new
                        {
                            Id = new Guid("5860eeae-3390-420f-8e1a-0e21dbf994e6"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("37847a24-8884-48e5-b2fc-84257cc0bad6")
                        },
                        new
                        {
                            Id = new Guid("604abaf7-ea57-468e-a4f3-e6c93b94d35f"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("37847a24-8884-48e5-b2fc-84257cc0bad6")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ForumPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbf5e390-d1a9-4379-8696-52bb48e0abfc"),
                            CategoryId = new Guid("57d45f9f-ff0a-4ac6-9a41-4bea7c8f0a31"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 7, 59, 11, 759, DateTimeKind.Local).AddTicks(6697),
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("b51a8575-1673-4266-a821-e2e843b0f587"),
                            CategoryId = new Guid("fb18e73b-32ca-410b-bfc2-ef7c541d6d4d"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 7, 59, 11, 759, DateTimeKind.Local).AddTicks(6740),
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d45c457-fd89-4757-ab4b-b99e4a06902c"),
                            CategoryId = new Guid("e58ae848-bbc8-4d52-8813-c3a034bc23f7"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 7, 59, 11, 759, DateTimeKind.Local).AddTicks(6908),
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("37847a24-8884-48e5-b2fc-84257cc0bad6"),
                            CategoryId = new Guid("8428d8c0-cd80-42d0-9e90-cc525c54e60b"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 7, 59, 11, 759, DateTimeKind.Local).AddTicks(6913),
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("bbf5e390-d1a9-4379-8696-52bb48e0abfc")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumTopic", "ForumTopic")
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumTopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("ForumPostId");

                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.Category", "Category")
                        .WithMany("WikiPages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Navigation("WikiPages");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Navigation("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
