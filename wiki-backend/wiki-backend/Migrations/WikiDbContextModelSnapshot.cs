// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    partial class WikiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff6c5f6a-aeb5-4a8a-88df-9bebe463e136"),
                            CategoryName = "Characters"
                        },
                        new
                        {
                            Id = new Guid("b8a91816-0463-4eb7-b079-3f30bff7f60f"),
                            CategoryName = "Stories"
                        },
                        new
                        {
                            Id = new Guid("47fa806b-4324-4bea-be54-5771bbe6ab2b"),
                            CategoryName = "Locations"
                        },
                        new
                        {
                            Id = new Guid("6c655e2a-3639-4f05-914e-30e5b253378f"),
                            CategoryName = "Events"
                        },
                        new
                        {
                            Id = new Guid("ec3b51e9-8eee-403a-9b49-41cc801363cd"),
                            CategoryName = "Organizations"
                        },
                        new
                        {
                            Id = new Guid("698c635b-efb7-48f5-9776-4b671b49b41b"),
                            CategoryName = "Concepts"
                        },
                        new
                        {
                            Id = new Guid("9d7c3daf-03d4-415f-913d-0dd60a1a1d02"),
                            CategoryName = "Technologies"
                        },
                        new
                        {
                            Id = new Guid("412a6b07-479e-4973-9bc7-e7a5070b1a9c"),
                            CategoryName = "Arts and Entertainment"
                        },
                        new
                        {
                            Id = new Guid("32210ee1-3db3-47e9-9513-250af46c243d"),
                            CategoryName = "Sports and Recreation"
                        },
                        new
                        {
                            Id = new Guid("08333e40-af8d-412d-b2da-663e9355954f"),
                            CategoryName = "Science and Technology"
                        },
                        new
                        {
                            Id = new Guid("9f8127ef-de08-4fc7-af49-fd3d8f181bb2"),
                            CategoryName = "History and Culture"
                        },
                        new
                        {
                            Id = new Guid("266e46e8-42c6-4751-98bb-f8b216692aaf"),
                            CategoryName = "Food and Drink"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForumPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplyToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("ReplyToCommentId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ForumComments");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForumTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForumTopics");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78b67dfd-8228-43e5-9d82-601e58b3e7f9"),
                            Content = "Temporibus esse soluta. Labore et aperiam assumenda vel et consequatur et. Necessitatibus corrupti eos magnam soluta quasi fuga veritatis accusantium nihil. Voluptate quibusdam officia. Praesentium aut libero voluptas et corrupti sit eos officiis.\n\nSequi rerum harum fuga. Maxime aut perferendis molestiae placeat qui quas consectetur vitae. Doloribus ducimus neque qui animi dolorem. Nam sed molestiae. Incidunt illum voluptatibus consequuntur alias tempore aut et. Ad nam at expedita possimus accusantium.\n\nSapiente sed tenetur perspiciatis quia quia quia quae dolores. Eum libero veritatis est placeat natus. Tenetur sit iure autem laborum ratione.\n\nEx aut tempore praesentium. In ad quia omnis consequuntur repellat distinctio consequatur. Sapiente fugit illo. Aut hic omnis et porro autem.\n\nEx tenetur aliquid nihil quaerat sit. Excepturi et dolorem. Aliquid eaque quis qui. Et ut eum non quo quo cum qui.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("7982bd1c-f21d-4439-9034-0f03fc6ada8c")
                        },
                        new
                        {
                            Id = new Guid("850a94c8-08e7-4d50-9b7e-0c867f6b0625"),
                            Content = "Fugit vel quia quae ut. Sed voluptatem at. Quasi est reiciendis laborum. Et hic dicta commodi. Temporibus fuga placeat voluptatibus ipsa quam et et. Rerum similique aliquid eius aut beatae nesciunt repudiandae cupiditate sunt.\n\nFuga eaque voluptatem dolores. Eum quo et autem. Eos possimus ipsa esse. Quae ab ut perspiciatis nam laboriosam rerum. Quos esse non in veniam omnis odio dignissimos est.\n\nAut esse recusandae fugit aut repellat. Quae rerum dicta facere et accusantium ad mollitia. Doloremque optio consectetur sunt rerum rerum ea et earum.\n\nOmnis est dignissimos et non eligendi quis. Facere quos consequatur consequatur occaecati quidem. Voluptatem aperiam illum quibusdam inventore exercitationem molestiae. Nobis excepturi non reiciendis quos repellat cumque qui est et. Molestias accusamus quas quidem iusto sit quisquam dolorem.\n\nEum rerum adipisci est est. Hic aut aliquam delectus. Ut provident ad quae et non dolorem qui laudantium debitis. Molestiae quidem expedita ut.\n\nAperiam a exercitationem ab natus similique voluptatem. Asperiores dolores molestiae ut molestias. Aspernatur similique molestiae incidunt minus ea. Autem rerum at numquam velit voluptas aut. Maxime ut ut quasi incidunt quod enim. A ex facere repellendus quo cupiditate voluptas.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("7982bd1c-f21d-4439-9034-0f03fc6ada8c")
                        },
                        new
                        {
                            Id = new Guid("e3b5cdfa-cbea-4bb7-aa07-434f4b780945"),
                            Content = "Quae dolore aliquid necessitatibus nulla tempora rerum. Unde voluptates autem consequatur. Non consectetur et. Fuga temporibus et. Est voluptatibus voluptatibus minus rerum delectus.\n\nDoloribus ut debitis aperiam nulla. Rerum dolor corrupti nemo voluptatibus veritatis quia accusamus tempore illo. Occaecati culpa et eligendi eius culpa vel. Provident ea cupiditate voluptatem perspiciatis quia accusantium. Debitis aut veniam. Odio est nobis iusto.\n\nCupiditate sint qui non quia excepturi nemo omnis. Exercitationem asperiores sit. Vel rerum sint ea dicta animi error natus earum. Nesciunt in molestias occaecati reprehenderit fugit et laudantium.\n\nTotam doloribus quia veniam ducimus totam asperiores. Illum porro iusto incidunt quia rerum sed suscipit. Deserunt libero earum dolores dolorem quia voluptas dolore. Deserunt dolor repellendus nam laudantium incidunt beatae ea. Dolorum placeat sint dolorem pariatur eum esse explicabo.\n\nOmnis deleniti voluptatem et nisi odio animi neque eligendi. Tenetur aspernatur nihil et. Aut necessitatibus dolor. Illo tenetur in unde sed est fugiat asperiores est. Et suscipit vel. Modi quia fugiat error nesciunt voluptatibus praesentium laboriosam quaerat amet.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("7982bd1c-f21d-4439-9034-0f03fc6ada8c")
                        },
                        new
                        {
                            Id = new Guid("1903eb36-5111-401b-8bb6-1ac806954152"),
                            Content = "Ut aut et dolor consequuntur in nostrum. Sunt quos reiciendis quod sed provident voluptas. Sit facilis earum impedit. Corporis odit veniam labore tempora voluptates. Consequatur voluptatibus nulla veritatis architecto vitae facilis. Quidem ipsum quia dolor non itaque.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("7982bd1c-f21d-4439-9034-0f03fc6ada8c")
                        },
                        new
                        {
                            Id = new Guid("9c3e48fe-cf6e-48e1-a40f-cacd5f04adb0"),
                            Content = "Alias autem non nesciunt qui iusto officiis dolores voluptatem. Commodi repellat provident earum enim est officiis qui enim velit. Et placeat eligendi dolor a omnis. Quis molestias repellat sint est blanditiis.\n\nMaiores sint dolor ut rem repellat facere porro. Voluptatem vel modi ut velit et debitis voluptatem cupiditate delectus. Aut ut rerum quos hic. Sunt aut minima expedita.\n\nLabore unde modi qui accusamus totam facilis porro officiis. Recusandae ut delectus officia est aspernatur eum iste. Optio non quia enim et rerum praesentium. Laborum nihil nam molestiae culpa labore totam.\n\nCupiditate tempora quo dolor molestias ab. Quis magnam aperiam pariatur saepe et id. Cumque omnis ut. Dolorum repellendus dicta.\n\nSapiente facilis exercitationem reprehenderit. Deserunt accusantium omnis labore aperiam ea deserunt nihil incidunt corporis. Quia neque quod cupiditate. Ea dolorem et optio ea commodi.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("7982bd1c-f21d-4439-9034-0f03fc6ada8c")
                        },
                        new
                        {
                            Id = new Guid("1dacc715-02cf-461f-a597-a87bca5d162a"),
                            Content = "Voluptas eius quasi accusamus vel. Quod omnis esse non earum et voluptatibus voluptas natus. Sint neque omnis iste perferendis accusantium aut harum vero. Ipsam dolore totam rerum quisquam alias aperiam sunt. Nulla tenetur ea.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("7982bd1c-f21d-4439-9034-0f03fc6ada8c")
                        },
                        new
                        {
                            Id = new Guid("1fad3ac9-7cc4-4db3-870a-9783b59acb55"),
                            Content = "Consequatur totam nostrum praesentium et et explicabo quis corporis voluptatem. Saepe id soluta. Magnam perferendis natus quo aut. Quidem eveniet qui qui vero debitis dolores vitae nobis sed.\n\nEt minus mollitia quasi eaque quas dolores voluptatum consequatur quia. Asperiores et adipisci nostrum dolorem culpa laborum id. Ipsum iste voluptas laboriosam. Est deleniti illo ad cupiditate voluptate illum eligendi eum. Porro voluptas veritatis aut pariatur occaecati consequuntur.\n\nSit nulla a voluptatem voluptates. Dignissimos commodi perspiciatis distinctio doloribus cum accusantium dignissimos. Ullam maxime consequatur pariatur officia eum.\n\nNobis quasi voluptatem nulla. Dolor ut voluptates dolorem magnam eligendi alias ducimus optio. Aut mollitia sed. Perferendis modi sed sed ut vel et ut inventore officia.\n\nAssumenda at libero aut ipsum qui quos ipsa. Incidunt eius ad sit. Illum quo molestias aut facilis et harum. Illo fuga dolor harum error occaecati quos cumque explicabo. Quas et aperiam. Est voluptatem voluptates.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("1c9cf25b-7958-4807-92ec-432640994f0c")
                        },
                        new
                        {
                            Id = new Guid("6f52cffb-37f5-453b-a0ab-88a2317d4d3e"),
                            Content = "Suscipit labore fuga optio facere doloribus deserunt. Ipsam sapiente deserunt voluptatem dignissimos vel nihil accusantium voluptatem aperiam. Nulla quo repudiandae omnis laborum. Sed et alias. Ipsum dolor molestias occaecati quia aut vel id rerum aut.\n\nRerum et aut dolorem aliquam voluptatem sapiente. Excepturi quam in. Quae qui aut dolorum vero inventore impedit voluptatem odit accusantium. Quo voluptatem itaque rerum minima repellendus. Aspernatur inventore sint hic officiis asperiores suscipit.\n\nExercitationem est inventore rerum commodi omnis est non quam est. Quis debitis quas est atque corporis dolorem qui ut sed. Qui perferendis laborum occaecati ut culpa. Enim harum maiores illum voluptatem enim ullam. Et omnis ad ut ut. Rem corrupti officiis.\n\nTemporibus enim debitis beatae esse quia odit. Quos et necessitatibus. Est debitis cum aut qui velit sit architecto perspiciatis et.\n\nSint aut occaecati ducimus et. Magnam deleniti ut consequatur qui. Nulla aspernatur sit cupiditate iusto eius hic et vitae recusandae. Accusantium quia ducimus maiores dolor. Velit autem nisi sit omnis et est aut sed aut. Ut nisi voluptatem qui.\n\nQuia nemo sit voluptatem accusamus omnis voluptate facilis in. Ut facere fugit quis ipsa qui dolorem. Asperiores voluptatibus labore vel voluptatem delectus est. Quia voluptas qui eum illum commodi dolore totam veniam omnis.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("1c9cf25b-7958-4807-92ec-432640994f0c")
                        },
                        new
                        {
                            Id = new Guid("7202da56-9c7f-4f3f-be31-57bf1823cdce"),
                            Content = "Voluptatem temporibus enim ut ipsum sed voluptatem rerum nisi voluptas. Modi mollitia quas eligendi distinctio sapiente esse. Earum tempora voluptas ut. Adipisci fugit illo tempora nam voluptatem accusantium vel dicta. Provident labore est repellat. Beatae praesentium consequatur.\n\nAt repellendus doloribus doloremque sit earum excepturi. Omnis saepe cumque dolorem non possimus illum ut numquam. Mollitia ab numquam dolores.\n\nQuasi non aliquid tempore minima est et. Maxime facilis beatae odio. Amet voluptate eveniet et ex.\n\nQuo dolorem illum rerum. Quia debitis voluptatum. In accusantium est possimus. Fugit aut consequatur ut architecto voluptatum eaque officia inventore.\n\nOfficiis iure architecto blanditiis sed laborum accusantium. At eum minus atque sed beatae nesciunt. Repellat laudantium et. Delectus adipisci quasi. Corrupti tenetur nobis voluptas et esse. Deleniti cum rerum ut fugiat.\n\nFugiat ut est repellendus. Vel qui assumenda delectus blanditiis deleniti perferendis ut qui quia. Cum non et eaque qui modi. Exercitationem rerum atque ut voluptatibus. Saepe et repellendus omnis nihil aut aut. Libero aut nobis ad optio est consequuntur possimus.\n\nTempora autem debitis sed nihil eveniet est aut consequuntur sapiente. Nostrum ut minima nemo rem quia quia. Rerum enim earum ad veniam dolores hic accusamus. Qui nesciunt doloremque autem et. Non et velit vel sit. Veritatis qui possimus.\n\nMollitia quod incidunt a sit nemo adipisci. Laboriosam natus tempora ullam asperiores. Rerum provident recusandae rerum ut qui. Vel molestiae sit necessitatibus eum distinctio est voluptatibus cum. Accusantium qui voluptates. Perspiciatis a eveniet atque.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("1c9cf25b-7958-4807-92ec-432640994f0c")
                        },
                        new
                        {
                            Id = new Guid("1c26dbd1-4c0a-485e-b1cd-a58ad61d8546"),
                            Content = "Repudiandae iste rerum quis ut reprehenderit quaerat iusto iste. Fugiat aspernatur vel provident dolorem ipsam est omnis. Quis vel excepturi nesciunt ut laudantium harum cumque ut.\n\nEx saepe distinctio nam soluta mollitia tempore dolores. Eveniet sint est. Ipsum omnis blanditiis soluta aut sit blanditiis. In nisi labore facilis error. Aut sunt sunt est quia iusto eveniet ullam non.\n\nIn optio omnis vel exercitationem doloribus aut eos. Laboriosam eaque harum in tempore. Quaerat dolorum reprehenderit aut modi porro soluta distinctio et.\n\nAtque illo et provident. Est necessitatibus totam et ratione. Provident qui occaecati vel officiis cumque fuga.\n\nEnim autem aut et qui molestias magnam laudantium. Iure commodi modi aut similique quam consequatur quo. Nihil sit ea voluptas repellat necessitatibus voluptatem et.\n\nEos omnis vero est. Numquam occaecati consequatur unde qui corporis. Consequuntur quos optio qui repudiandae tempora excepturi. Corporis repellendus dolores enim.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("1c9cf25b-7958-4807-92ec-432640994f0c")
                        },
                        new
                        {
                            Id = new Guid("1af6c5c3-45df-482d-811f-6bc76163bff9"),
                            Content = "Perferendis doloremque beatae. Commodi laborum similique et voluptatem veritatis quisquam atque id. Sit et ipsam facilis debitis in. Sunt maxime eum est quis ea. At quibusdam perferendis quo et consectetur eum id totam quia.\n\nQuibusdam quam nulla totam autem aut unde. Natus qui sit quibusdam nemo ipsam quis qui omnis. Beatae nulla quibusdam. Necessitatibus omnis ea qui qui quod. Et autem ea.\n\nNeque molestias sit eos reiciendis in blanditiis. Quae ducimus eius officiis omnis. Omnis velit blanditiis autem quo aut. At distinctio provident ut id molestiae placeat eveniet eveniet adipisci.\n\nDoloremque et cum expedita accusamus nobis. Rerum deserunt ab. Quasi eveniet dolorem voluptas et itaque.\n\nEligendi et vel. Doloribus repudiandae incidunt eligendi blanditiis est. Qui quae doloribus ea dolorem possimus exercitationem. Vel et qui occaecati blanditiis. Distinctio ut ad occaecati suscipit.\n\nRem aliquam sit odit dignissimos nihil inventore. Adipisci laudantium ratione soluta debitis et unde amet dolorem hic. Dignissimos qui et. Beatae animi nihil eligendi qui.\n\nEius officia voluptatem sequi earum optio. Ratione quam aut aut ut impedit error nulla voluptas ullam. Eum et est. Officiis assumenda sunt labore minima expedita facilis aperiam expedita nobis. Sint et expedita sit quis ab. Voluptate incidunt sint est pariatur sit enim ut.\n\nMinus dolorem nisi doloribus quis magnam. Quia sunt culpa quia quia est repellat est consectetur. Ut voluptas est autem rem quos aut. Nihil sed unde dignissimos omnis autem vero est. Corrupti illum nisi pariatur hic voluptas id alias qui tenetur.\n\nExplicabo odit eos sed qui quas reiciendis et nemo. Omnis et minus rerum qui. Veritatis velit eaque maxime nulla. Sit eaque ea et. Repellendus modi voluptas atque eos quibusdam et. Id eos nesciunt dolor unde non molestias non.\n\nOmnis et quas atque totam dolor. Earum molestias aut. Asperiores et porro. Sit sint non ut accusamus doloremque natus nulla.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("1c9cf25b-7958-4807-92ec-432640994f0c")
                        },
                        new
                        {
                            Id = new Guid("f69370b4-d603-4ab1-a807-4fb0300496e1"),
                            Content = "Culpa facere minima. Excepturi voluptatibus sapiente neque. Voluptatem tempora recusandae amet nemo. Est molestiae sed nulla repellat. Et culpa natus facere harum explicabo commodi aliquam perferendis facilis. Ut ullam quasi.\n\nDeserunt voluptas optio repudiandae velit quae nostrum quia hic qui. Reprehenderit aut quisquam sit non. Iusto sequi ducimus dolorem enim sapiente dolor velit. Earum saepe voluptatibus.\n\nQuam occaecati enim porro laboriosam voluptas doloremque. Qui tenetur quo temporibus sit et reiciendis culpa id. Expedita sit perspiciatis et sapiente numquam est sit voluptas recusandae. Ipsam commodi est nostrum dolorem. Iusto tenetur ut at amet qui veniam voluptatem inventore.\n\nBeatae ad est sit eligendi. Eligendi nulla rerum error. Mollitia et laborum ab. Quis iste beatae magnam ab est nemo enim. Corporis temporibus distinctio tempore corporis ratione minima. Nam laborum sed et.\n\nDistinctio velit tempore ea voluptates aut dignissimos culpa unde repellat. Aut aperiam provident nihil id sit voluptatibus quae unde. Eos et nam. Qui deleniti necessitatibus iste qui sed. Id maiores nisi quia aspernatur fuga. Qui vel architecto minima ut.\n\nRerum est neque rerum aut. Aut recusandae ad aut minus. Temporibus sint aspernatur.\n\nAut pariatur quo qui. Sit molestiae fugiat quia nesciunt at hic. Ea neque aut accusamus molestiae molestiae laborum sequi. Porro veniam in. Iure sint corrupti quo voluptatem. Est atque sit quas quaerat consequatur omnis molestiae.\n\nOdit quae non voluptates blanditiis. Qui odio iure omnis rerum eos. Qui quas nisi doloribus incidunt molestiae sequi necessitatibus. Ut assumenda qui sint ut sed doloribus odit et illum. Aut nesciunt perspiciatis fugit.\n\nSuscipit placeat voluptatem deserunt odio explicabo ut debitis et cum. Necessitatibus eaque velit qui soluta veritatis enim vel dicta excepturi. Optio et velit vel vero. Non incidunt assumenda odio ipsa. Sed consequuntur est. Vel id aut quis aut est ab.\n\nRecusandae ut doloribus asperiores minus doloribus quod eligendi qui. Nobis fugiat eos laudantium non voluptatem fugiat quo at. Provident fuga dignissimos quaerat voluptate voluptas perspiciatis eius. Deleniti repellat natus aut rerum autem provident est quasi dolorem.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("1c9cf25b-7958-4807-92ec-432640994f0c")
                        },
                        new
                        {
                            Id = new Guid("cdb78f01-92cc-43ac-9a5e-a0f775093e68"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("e782cd19-84ec-4304-b12c-f25d27fb304b")
                        },
                        new
                        {
                            Id = new Guid("d4f1b8c7-a2b7-4d46-9064-cf48bd548019"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("e782cd19-84ec-4304-b12c-f25d27fb304b")
                        },
                        new
                        {
                            Id = new Guid("27212c70-3234-4698-93b0-e00a5b10f7a3"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("5de36ea0-59ff-4986-8fc7-f4d7d08bdffc")
                        },
                        new
                        {
                            Id = new Guid("8b569117-378d-42d4-a052-d274d19174a1"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("5de36ea0-59ff-4986-8fc7-f4d7d08bdffc")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplyToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReplyToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("7982bd1c-f21d-4439-9034-0f03fc6ada8c"),
                            CategoryId = new Guid("ff6c5f6a-aeb5-4a8a-88df-9bebe463e136"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 22, 21, 28, 5, 705, DateTimeKind.Local).AddTicks(879),
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("1c9cf25b-7958-4807-92ec-432640994f0c"),
                            CategoryId = new Guid("b8a91816-0463-4eb7-b079-3f30bff7f60f"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 22, 21, 28, 5, 705, DateTimeKind.Local).AddTicks(941),
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e782cd19-84ec-4304-b12c-f25d27fb304b"),
                            CategoryId = new Guid("47fa806b-4324-4bea-be54-5771bbe6ab2b"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 22, 21, 28, 5, 705, DateTimeKind.Local).AddTicks(1238),
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("5de36ea0-59ff-4986-8fc7-f4d7d08bdffc"),
                            CategoryId = new Guid("6c655e2a-3639-4f05-914e-30e5b253378f"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 22, 21, 28, 5, 705, DateTimeKind.Local).AddTicks(1248),
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("7982bd1c-f21d-4439-9034-0f03fc6ada8c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumComment", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumPost", "ForumPost")
                        .WithMany("Comments")
                        .HasForeignKey("ForumPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ForumModels.ForumComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplyToCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumPost");

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumTopic", "ForumTopic")
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ForumTopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.Category", "Category")
                        .WithMany("WikiPages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Navigation("WikiPages");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Navigation("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
