// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    partial class WikiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fa04bfa-c7bd-42ac-9a35-c319645c3759"),
                            Content = "Voluptas quos iure qui fugit voluptatem explicabo. Est enim suscipit quisquam. Incidunt recusandae sit.\n\nSit eum consequuntur. Impedit est officia incidunt voluptas consequuntur veritatis. Qui quae eius dolore dolorum sed optio. Expedita dicta optio ut. Odio et consectetur vitae aut aliquid sint. Ex quo ut aspernatur nemo autem iste ea sed nulla.\n\nQuibusdam dolorem quos vitae qui qui unde consectetur eius. Animi rerum natus. Ea deserunt voluptate architecto commodi reprehenderit est pariatur. Laborum quisquam atque quod. Possimus sit neque assumenda accusantium ea fuga nam fugit deserunt. Voluptas veritatis exercitationem quaerat numquam possimus qui non deserunt quae.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("174a0b7b-ebf7-4551-afb1-9992c0297e00")
                        },
                        new
                        {
                            Id = new Guid("07118e28-e972-40a7-b7cc-5a51c31cfa04"),
                            Content = "Ut error dolorem. Sunt asperiores eos cupiditate est in ex at aut. Neque rem tempore fugit ea assumenda ut. Minima labore expedita itaque. Omnis sed esse.\n\nConsequatur veniam deleniti. Earum nobis nesciunt nesciunt. Mollitia omnis porro ipsa officia nesciunt facere voluptas nisi. Odit aliquam a numquam et velit sunt.\n\nDolores quibusdam laborum quod adipisci sequi enim enim ducimus dolor. Molestias non ut earum cumque. Quas facilis incidunt ut distinctio sint animi. Tenetur est dicta. Harum iste in ab incidunt dolorem nihil autem. Nisi amet culpa sunt veritatis ut suscipit.\n\nId vero neque error placeat nobis numquam. Iste accusantium suscipit vel. Minima et fuga totam. Maxime amet quaerat enim aut.\n\nOdit aut amet et nesciunt nisi voluptatem libero. Voluptatibus cumque at dolorem sunt dolorem molestiae error rerum. Aut quis exercitationem et. Iure reprehenderit doloribus ducimus. Ipsa eveniet suscipit sed similique quod at et repudiandae necessitatibus.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("174a0b7b-ebf7-4551-afb1-9992c0297e00")
                        },
                        new
                        {
                            Id = new Guid("57d33f63-079a-43d9-a478-99bc6aa9c8b1"),
                            Content = "Asperiores cupiditate aut quas rerum ullam. Dolor facere delectus distinctio et sunt quo quo. Impedit dicta nam qui saepe libero ut. Occaecati voluptatem sunt enim dolores et sint. Minus ut et ipsa qui accusantium aut ea voluptate. Aperiam quis nam veniam nesciunt sint dolor incidunt enim sit.\n\nEnim qui voluptas. Fugiat similique aut sit impedit exercitationem nostrum. Ut debitis porro asperiores culpa.\n\nQuia recusandae accusantium. Omnis et omnis voluptatem voluptas harum qui numquam voluptatibus. Aspernatur unde quia. Dolorem voluptatem labore repellendus excepturi suscipit alias qui laboriosam labore. Praesentium sit corporis omnis.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("174a0b7b-ebf7-4551-afb1-9992c0297e00")
                        },
                        new
                        {
                            Id = new Guid("ec69f3e4-3692-4145-9bc9-860ecb1babe2"),
                            Content = "Ipsum vel quidem et. Qui temporibus aut eum. Perferendis ea eveniet nemo perspiciatis aut nulla quibusdam animi commodi. Voluptas quia esse ut commodi. Rerum iusto explicabo voluptate quaerat nostrum consequuntur. Unde harum ut non.\n\nOmnis est quisquam. Ut non commodi. Dolor rerum eos corporis.\n\nEnim libero ad tenetur qui nesciunt vel natus ut. Commodi sunt illum aspernatur voluptatem. Accusamus corrupti voluptatibus est enim occaecati. Sapiente sapiente dolorem et et in ut quia ipsum officiis. Sit et quasi temporibus dolor voluptatibus pariatur ut sunt odio.\n\nEa perferendis distinctio in magni magnam. Nisi nihil a. Velit assumenda debitis ratione consequatur error quam vel soluta. Earum nobis illum itaque fugit. Tenetur occaecati voluptas cumque. Quaerat consequatur sed architecto in in sint enim similique.\n\nDolorum veniam maxime maxime omnis laudantium laborum necessitatibus temporibus. Delectus nesciunt iusto numquam. Dolores sed voluptatem enim odit voluptas unde quia et sit. Et qui et quia.\n\nBlanditiis voluptatem possimus quas ut dolorem hic hic sit. Non sed fugit commodi eius. Eum sit et consectetur et ipsam. Iure molestias voluptates et rerum sed occaecati dignissimos exercitationem tenetur. Aliquid sed ad asperiores vero.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("174a0b7b-ebf7-4551-afb1-9992c0297e00")
                        },
                        new
                        {
                            Id = new Guid("889eaaa1-4e3c-46c9-8a1d-4123ad61169f"),
                            Content = "Neque in corporis veniam enim impedit aliquam. Expedita quo ipsa error est aut et iure. Nobis libero facere velit.\n\nExpedita est et est iste. Doloremque dignissimos molestiae provident qui omnis facere ut nam ea. Laboriosam id est accusamus esse est. Quia excepturi doloribus magnam. Quia voluptate amet neque impedit.\n\nFacilis voluptas repellat. Nulla assumenda et eaque necessitatibus et. Ratione molestiae voluptatibus voluptatum voluptatem.\n\nNihil et sed. Rerum et voluptatem expedita qui dolores. Rerum quis esse nostrum aut repellat. Consequatur facere at ut quasi repudiandae non veniam sed ullam.\n\nConsequatur unde sunt non occaecati maxime sequi consequuntur et expedita. Qui qui est totam consectetur veniam similique aut et. Earum inventore aut quam tempora iusto dolores tenetur sit. Et fugit voluptatem dolorem quo et enim.\n\nVoluptatem unde deserunt. Est esse omnis et natus perferendis culpa eos eligendi. Dolorem voluptatem doloribus iusto doloribus est reprehenderit est voluptatem.\n\nProvident consequuntur porro et consequuntur blanditiis et autem. Vero perspiciatis facere minus et consectetur sed aspernatur. Alias aut error necessitatibus cum. Tempora ut qui. Molestias officia sunt nobis dignissimos suscipit. Sunt eos modi laboriosam adipisci ut perspiciatis.\n\nEsse quam necessitatibus fuga. Officiis tenetur consequatur ut sed voluptatem nostrum architecto. Deleniti officiis eum ad qui in. Et laborum ut mollitia in animi ducimus reprehenderit error neque. Mollitia adipisci expedita nihil ducimus rerum. Mollitia quas fugiat iste cupiditate iure numquam et et.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("174a0b7b-ebf7-4551-afb1-9992c0297e00")
                        },
                        new
                        {
                            Id = new Guid("fefb18ac-b8d9-4dce-b284-2ab9b2485f1c"),
                            Content = "Et eius dolores aut et voluptas exercitationem. Laborum asperiores ex vel culpa itaque. Est voluptatibus at quo accusamus nostrum voluptatem.\n\nLaudantium nulla repellat dolorem magni sapiente. Consequatur expedita minus odio dolore necessitatibus nemo commodi accusantium rerum. Ut adipisci odit et magnam aut nobis alias. Harum voluptatem aut voluptatibus est voluptatem. Sunt provident nihil sit quia amet labore ab praesentium.\n\nAutem aut occaecati reiciendis sit sit. Eos eum repudiandae eum et voluptas nihil. Non animi sed mollitia quis.\n\nEarum id est impedit eos sit. Ex quia velit magnam rem aperiam autem molestias. Qui et quisquam. At suscipit in voluptatem. Consectetur et beatae.\n\nAut doloremque recusandae qui. Iusto nulla est est ipsam recusandae aut error voluptas. Asperiores officiis cum iusto quisquam sunt sed. Officiis suscipit velit. Molestias aut voluptatem saepe in nobis doloremque et deserunt facilis. Minima ut ipsa nostrum eveniet doloribus repellendus.\n\nConsequatur corporis at tenetur earum rerum dolor in pariatur vel. Enim voluptatibus qui totam excepturi tenetur fugit nemo est. Dolor asperiores dignissimos molestiae assumenda dolorum tempore sed voluptatem minima. Voluptatum et qui ut ut.\n\nQui adipisci distinctio dolores qui velit et blanditiis eum officia. Esse minus expedita eos aperiam earum. Quidem possimus non dolores ut voluptate et optio vel.\n\nIusto odio hic sint rem asperiores nesciunt nemo est molestiae. Voluptatem aut error aut exercitationem. Unde est illum architecto repellat eum omnis quo. Soluta dolorum officia numquam unde. Quis soluta sed consequuntur explicabo quo voluptatem repudiandae. Optio porro harum necessitatibus doloribus possimus omnis.\n\nQuasi est aut. Molestiae doloremque nulla ducimus alias eveniet non quam alias. Eius eos eaque. Consectetur maiores animi aut. Vel ratione ipsum quia voluptas ut minus sit minus quo.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("174a0b7b-ebf7-4551-afb1-9992c0297e00")
                        },
                        new
                        {
                            Id = new Guid("cc5a38ff-dc9c-4161-a8c5-ab3adc4af689"),
                            Content = "Dicta ab blanditiis aliquid sed possimus repudiandae culpa maiores. Qui rerum et laborum et rerum delectus. Dolores eligendi soluta.\n\nUllam laborum et nam. Quis voluptatem neque delectus a minima consectetur. Non exercitationem sit autem et quos eos deleniti. Facere autem et nemo aliquid numquam et alias rerum. Asperiores et voluptatem laudantium iste molestiae sapiente amet nobis omnis.\n\nQuod ut dolor et odio odio. Deserunt qui delectus eveniet eos est dolor sit tempore. Omnis consequuntur est modi ipsam. Rerum quam suscipit debitis omnis. Explicabo quia esse consequatur nemo exercitationem. Molestiae ipsam magni optio libero amet.\n\nConsectetur aut nam est facilis ut voluptas. Explicabo est aut libero ex sed. A et cupiditate tenetur ut nemo culpa aliquid perferendis saepe. Praesentium repellendus eius molestias voluptatem quas. Architecto sint qui aut laudantium iusto minima.\n\nUllam voluptatem ducimus provident commodi fugit dolorem. Eveniet dolorem harum ducimus porro ut. Voluptatem consectetur officiis nobis adipisci iure. Rerum tempore omnis cumque praesentium unde facere. Incidunt mollitia culpa repellat magnam id rerum quod minus quasi.\n\nRerum velit eum. Et consequuntur ad eius doloremque perspiciatis maxime commodi quod enim. Autem repellendus sunt iusto iure qui cupiditate dolores occaecati. Vitae delectus earum reprehenderit voluptatem rerum. Omnis ut quasi sit rerum.\n\nQuisquam temporibus id pariatur sit necessitatibus laborum. Ut ut voluptas aut. Quam ex et ratione perspiciatis beatae ut. Architecto facere officia repudiandae necessitatibus tenetur consequatur repellendus. Saepe consequatur esse qui sunt saepe et optio minima voluptatem.\n\nAliquid est placeat sunt id vel. Maxime voluptate tempora. Qui soluta est iusto aut repellat eos et autem unde. Ut autem eos. Omnis rerum recusandae quis eligendi blanditiis eveniet fuga similique repellendus. Amet dolorem architecto maiores doloremque et.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("7e26e97f-35a0-4f39-a971-4c41beb94653")
                        },
                        new
                        {
                            Id = new Guid("84a9de75-7312-47ca-bd30-39915f27e489"),
                            Content = "Dignissimos ut tenetur temporibus. Rem quo quis. Sequi perferendis ut magni optio nihil. Repellat recusandae eos.\n\nRepudiandae asperiores doloribus velit minus odio. Excepturi adipisci sint itaque dolore. Sit unde aut quo nam nesciunt ut harum quia sapiente. Dolores aspernatur at omnis et et suscipit.\n\nOfficiis nemo autem ullam velit maxime aspernatur. Autem accusantium quasi iusto. Quidem modi labore porro autem praesentium voluptatem sed ea non. Qui rerum magnam iusto dignissimos repellat illum saepe est. Ut magnam amet repellat omnis vero. Blanditiis et est adipisci.\n\nAut provident voluptatibus aliquam iusto iste ut quo quasi. Quod illo iusto maxime sequi. Repudiandae similique maiores.\n\nNemo aliquid est tempore exercitationem. Perferendis quibusdam earum sed. Rem consequatur molestiae libero temporibus ipsam corporis. Corrupti eum quae doloribus recusandae sed ad ut.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("7e26e97f-35a0-4f39-a971-4c41beb94653")
                        },
                        new
                        {
                            Id = new Guid("46ce1c6a-cd02-4b73-8cd3-831b26962435"),
                            Content = "Possimus impedit nemo consequatur minima reiciendis consequatur voluptatem voluptates. Nam totam odio beatae. Quisquam quia doloremque est impedit autem eius dolorem doloribus sint. Et veritatis quod sint quibusdam. Aut facilis accusantium ut enim. Quae sunt in beatae eius.\n\nAt officiis veritatis magnam atque velit ipsum. Harum ea ullam dolorum quaerat quod. Modi voluptatem commodi et odit. Earum sapiente tempore neque animi in aut dolorem soluta sit.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("7e26e97f-35a0-4f39-a971-4c41beb94653")
                        },
                        new
                        {
                            Id = new Guid("7e067ebc-28a1-4c34-80e5-865ec43b91dc"),
                            Content = "Ut unde adipisci at ut reprehenderit. Quia voluptas dolor velit totam ut qui et. Minima temporibus earum ut.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("7e26e97f-35a0-4f39-a971-4c41beb94653")
                        },
                        new
                        {
                            Id = new Guid("3afa415f-ff47-4815-8d32-a93b45f2c57a"),
                            Content = "Eaque itaque unde fugiat odit iure dolore facilis et dolorem. Sint repudiandae officiis eaque quod debitis. Qui quae ea enim totam optio. Ut nostrum numquam est laboriosam inventore. Enim recusandae voluptatem numquam itaque aliquam aliquam.\n\nEa quam excepturi aut non sit voluptatem. Asperiores magnam minus quia sed quidem unde est exercitationem. Doloribus laudantium aut facilis officiis quibusdam nemo et.\n\nAlias fugit ea expedita amet illo sequi. Dolor ad eligendi est eum delectus ipsam eum debitis. Labore tempora harum in est eum a illo deserunt laborum. Impedit nisi ea adipisci non voluptatum consequatur et odit. Velit soluta rerum est assumenda voluptates.\n\nAccusantium culpa sed rerum. Accusantium accusamus esse impedit cumque dicta dolores. Tenetur placeat sit laboriosam debitis qui.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("7e26e97f-35a0-4f39-a971-4c41beb94653")
                        },
                        new
                        {
                            Id = new Guid("49dd845f-79db-4e65-adae-eebe74e80c5f"),
                            Content = "Exercitationem eligendi autem atque non facere nobis. Cupiditate facilis est deleniti numquam nemo. Voluptatibus neque aspernatur. Commodi ex dolores nihil similique beatae aut quis at provident. Dolores sunt dignissimos optio sunt voluptas culpa sint qui quis.\n\nQuia tempore magni hic. Inventore doloribus aspernatur quidem voluptatem. Libero reprehenderit aliquam ut qui in magnam. Fugiat quia dolorem sit illum molestiae sit ipsa commodi aut.\n\nRecusandae est sit. Quos velit culpa ut et voluptas quos omnis perferendis. Quia enim modi sint modi et. Aliquid quia repellat facere eos.\n\nDicta quo eaque aut minus inventore velit non. Dolor rem earum asperiores placeat suscipit nihil enim. Nisi aperiam dolor eius reprehenderit asperiores eos ut omnis. Occaecati recusandae ut dolores ullam aut.\n\nEst veniam numquam aperiam fuga. Ut quisquam maiores nulla et. Similique ex quae illo delectus.\n\nUt cupiditate illo sint nihil in non consequatur iste. Dolor ipsam id aspernatur necessitatibus sunt soluta dolore. Fugit ex facilis. Incidunt voluptatem et omnis maxime est ut tempora. Accusantium et rerum.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("7e26e97f-35a0-4f39-a971-4c41beb94653")
                        },
                        new
                        {
                            Id = new Guid("a4cfe6fd-3f38-4f99-9951-a5f05ec83ba4"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("bca84b59-6c30-4fe0-ac12-a7a1e352ceb8")
                        },
                        new
                        {
                            Id = new Guid("1f584f65-f898-4a82-b548-e23a9731f6f7"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("bca84b59-6c30-4fe0-ac12-a7a1e352ceb8")
                        },
                        new
                        {
                            Id = new Guid("1d14d787-e749-4543-8ba2-a19d3d5dc857"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("0acec16e-29d4-481e-ad4a-9de4dd91b14d")
                        },
                        new
                        {
                            Id = new Guid("f4b287d4-d310-4deb-bb62-168488a5e7fb"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("0acec16e-29d4-481e-ad4a-9de4dd91b14d")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("174a0b7b-ebf7-4551-afb1-9992c0297e00"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 4, 26, 9, 27, 10, 222, DateTimeKind.Local).AddTicks(847),
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("7e26e97f-35a0-4f39-a971-4c41beb94653"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 4, 26, 9, 27, 10, 222, DateTimeKind.Local).AddTicks(889),
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bca84b59-6c30-4fe0-ac12-a7a1e352ceb8"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 4, 26, 9, 27, 10, 222, DateTimeKind.Local).AddTicks(1015),
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("0acec16e-29d4-481e-ad4a-9de4dd91b14d"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 4, 26, 9, 27, 10, 222, DateTimeKind.Local).AddTicks(1019),
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("174a0b7b-ebf7-4551-afb1-9992c0297e00")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
