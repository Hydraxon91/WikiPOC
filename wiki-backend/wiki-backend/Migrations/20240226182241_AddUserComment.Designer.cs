// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240226182241_AddUserComment")]
    partial class AddUserComment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WikiPageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Suscipit quam at ducimus sed molestias harum laudantium exercitationem debitis. Eum error nisi. Facilis delectus in repellendus nihil quia quos. Dolorem rem corrupti sint soluta voluptas reprehenderit alias dolorem.\n\nDolore ut autem laudantium et consequuntur suscipit modi. Reiciendis sit aperiam quam vitae aut. Reiciendis labore voluptatem similique alias. Nemo suscipit nam sed. Necessitatibus autem aut cum. Ut vel pariatur possimus ullam.\n\nTenetur consequatur molestiae est est quia voluptas. Repudiandae nisi quisquam sunt soluta eum doloremque doloribus omnis ut. Accusamus consectetur ipsum reprehenderit. Non temporibus iure assumenda deleniti voluptates voluptatem repellat. Exercitationem cumque voluptatem. Aut suscipit est qui quaerat.\n\nEst illum ipsam repudiandae pariatur. Hic reiciendis odio quisquam. Reiciendis autem molestias quibusdam magnam consequatur.\n\nEos ullam reprehenderit nihil incidunt facere cumque asperiores. Eos totam voluptatem doloribus cum quo et enim quae. Dolores cumque ratione quaerat maiores at nobis consequatur cum.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Nobis minus veniam deleniti sed natus porro ex laboriosam. Et qui consequatur in qui aut ullam ut aliquam. Delectus eaque quidem magni fugit et dolor enim iure. Veritatis dicta quam.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Perferendis eaque porro et qui rerum sunt reprehenderit. Commodi non corporis aut. Dolorem doloribus eum est. Nobis expedita ea vel ut voluptate a doloribus aperiam doloremque.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "Omnis et nemo et tempore error ullam molestias. In eos voluptatum temporibus qui quasi itaque tempore alias. Dolorum qui cum fugiat reiciendis illum laboriosam.\n\nQuia asperiores dolor nulla quaerat debitis esse in est sed. Quibusdam quis quia eveniet dolores ullam dolore molestiae quos aut. Exercitationem nesciunt modi. Perspiciatis eius est.\n\nQuo quia qui deserunt iusto et. Maiores non nulla dicta. Ipsam repudiandae molestias. Corrupti aspernatur quisquam amet illum rerum aut ut. Odit rerum quaerat tenetur molestiae id tempore officiis asperiores exercitationem. Velit debitis mollitia enim voluptas voluptates voluptas aperiam.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Nam repellat quos quia vel officia ipsum aliquid nostrum. Ipsa delectus voluptas corrupti. Mollitia rerum molestiae nihil.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = 1
                        },
                        new
                        {
                            Id = 6,
                            Content = "Ut quasi molestiae. Doloremque voluptatibus blanditiis minima sint enim. Libero sit architecto consequuntur et facilis omnis ut. Commodi deleniti consectetur odit non pariatur maxime aspernatur ea cupiditate. Aut eum totam. Et sint rerum et nihil.\n\nProvident doloremque magni hic sit. Vel quam et tenetur. Temporibus culpa debitis voluptatem ex id maiores aliquam. Minus porro voluptates velit magni tenetur ducimus ut qui. Corrupti aperiam ad.\n\nQuidem nemo fugit deserunt illo cumque odit repudiandae. Enim harum maiores aut incidunt qui eligendi amet voluptatum quia. Voluptas maxime quos exercitationem non vel illum facere facere.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = 1
                        },
                        new
                        {
                            Id = 7,
                            Content = "Reprehenderit necessitatibus similique neque reiciendis ex. Ex doloribus unde esse nemo ea est ut dolores ipsum. Nesciunt non cum dolor dolor natus minima nesciunt. Sequi magnam quia voluptatem ipsa exercitationem. Ducimus rerum tempore aut asperiores voluptate sequi dignissimos sed repellendus.\n\nAmet fugiat atque ipsam consequuntur officia nemo. Dicta repellat sit numquam doloribus quis officiis. Eius culpa culpa. At voluptatem quibusdam sapiente doloremque dolor.\n\nDicta doloremque suscipit. Adipisci optio qui tempore. Aperiam et incidunt sit repellat consectetur sequi repellendus nobis. Velit nesciunt nemo provident odio. Rerum mollitia eum explicabo et sed eos occaecati sequi. Adipisci incidunt et.\n\nEst expedita qui voluptatem eaque consequatur reprehenderit praesentium sit provident. Exercitationem nisi dolores. Animi minus culpa placeat deleniti maiores hic. Quia nobis nostrum. Impedit reiciendis voluptas aperiam inventore eaque in vel quo facilis. Sunt fuga aliquam debitis nobis ut laudantium.\n\nAccusamus impedit rerum a. Maiores veniam dolorem. Nobis sed ducimus non. Ratione mollitia sit rerum. Consequatur illo nisi et consequuntur quam odio nobis facere qui. Veritatis cum animi.\n\nOdit excepturi qui consequatur aperiam aut facere et rerum incidunt. Rerum ut iure aperiam quibusdam est dignissimos quasi praesentium. Consequatur voluptatem et. Quisquam illo quia autem perferendis temporibus ipsam.\n\nIn culpa magnam sint aut eveniet ducimus. Quia quis accusantium ab tempora omnis suscipit quos dolorem. Aut molestiae velit sit quam magnam.\n\nSit in eaque. Repellat ipsa ea natus aliquam repellendus non et sint. Ratione perspiciatis similique.\n\nReprehenderit ipsam tenetur. Unde reiciendis quae alias aut hic impedit et. Minima ipsam vitae eos voluptatum consequatur veritatis quis. Mollitia veritatis voluptas ullam est omnis. Est ut neque voluptas at laboriosam pariatur molestias.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = 2
                        },
                        new
                        {
                            Id = 8,
                            Content = "Minima expedita libero et numquam voluptatem dolorem est. Est omnis aut facere in nemo soluta. Mollitia quia quia quae qui qui cupiditate qui.\n\nMolestias dolores voluptatem quis facere est. Nihil et harum ut eos ut totam soluta laboriosam. Voluptate quidem id alias eum. Id voluptate a voluptatem molestiae eius corporis.\n\nCorrupti ut tempora itaque neque culpa et. Ut magnam illum laudantium praesentium veniam. Consectetur ut mollitia tenetur dolore sapiente ad delectus. Doloremque debitis rerum voluptas sit. Odio nobis eos et neque aut.\n\nOdit quo labore sed minus itaque. Suscipit alias pariatur. Tempore ut natus eligendi recusandae ea quidem eum a similique. Quia rerum laboriosam temporibus corporis esse exercitationem dolores molestiae. Sunt voluptatem nemo aliquam omnis esse blanditiis dignissimos numquam.\n\nAd et neque. Dicta sed quia tempore. Suscipit sequi odit eius est dolorem modi. Eos ut in dolore aliquam. Aliquid a natus quo ut commodi libero.\n\nDelectus illum est ea in nulla sed nulla reprehenderit. Ipsam qui explicabo. Illum nihil sit dolores aut ipsam commodi. Commodi voluptatibus harum tempore natus perferendis quos id quod labore. Excepturi vero autem tempore ipsum beatae repudiandae quis natus. Quo tempora aut asperiores eveniet dignissimos enim consequatur sit.\n\nRerum iste at rerum veritatis eos adipisci et. Ullam eum nam. Et eos eveniet ut rerum commodi. Officia qui culpa repellendus est possimus incidunt. Exercitationem illum nostrum illum sint quisquam similique ut corporis sit.\n\nError modi unde sed explicabo illum autem corrupti vel sapiente. Consequatur ut reiciendis qui inventore porro provident velit iusto ut. Aliquid ullam quod labore quidem doloremque rerum dolorem sapiente. Ut modi ipsam velit nostrum et qui et est. Dolores aut voluptatem animi officia. Earum ut corporis labore omnis ea et et doloremque.\n\nOmnis laborum et hic itaque et. Et voluptatem est ex natus nulla. Quos sunt vel. Ut eum ratione facilis voluptatem consequatur sed omnis aliquid nihil. Ab sed eum qui hic rem omnis quidem. Et veniam libero voluptates id qui.\n\nMinus dolorem dolor aut consequatur omnis sit dicta quo possimus. Quasi fuga quod tenetur quae voluptatem maxime velit aperiam voluptatum. Veritatis quas sit tenetur sint non et cum. Aperiam delectus sed quia quis assumenda dolor quia. Inventore veniam non nam. Et doloremque minima error voluptatum.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "Eveniet est eum fuga asperiores sapiente sapiente laudantium incidunt voluptatibus. Qui qui exercitationem. Voluptatem rem cum dolorem ducimus delectus facere praesentium. Expedita et dignissimos aut voluptas. Maxime nihil fugit dolor dolorem ipsam.\n\nSit qui repudiandae ullam inventore adipisci sapiente nostrum. At ipsa dolorem modi aut dolorum est ratione. Ea quas tempora rerum. Nihil minima iste. Omnis corporis molestiae quam molestias. Ut quasi nulla dolorem cupiditate qui ea eos sapiente voluptatem.\n\nEx tenetur similique repudiandae ut nobis eaque. Culpa maxime maxime minus in optio unde. Aut quae sequi veniam sequi molestias.\n\nAut rerum ullam officia magni temporibus porro aliquam tenetur. Harum porro sit mollitia laborum ea cum aut ratione veritatis. In accusantium molestiae distinctio iure nihil nulla recusandae dolor occaecati. Facilis occaecati dolore incidunt modi. Consectetur quae sunt vitae itaque ut pariatur velit enim rerum. Architecto nobis corporis dignissimos quae quaerat.\n\nUt modi sunt velit vel vero id. Iusto praesentium placeat beatae sed voluptatem et voluptatem. Nisi aut quia et placeat officia dignissimos nostrum. Dolores deleniti provident omnis reiciendis quo voluptate ut rerum.\n\nOccaecati debitis nihil qui enim. Aut distinctio dolore omnis ex ex ducimus. Et harum ad quas debitis magni hic veritatis et. Cupiditate quis corporis dolore. Error est incidunt corrupti et sit tenetur saepe eveniet.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = 2
                        },
                        new
                        {
                            Id = 10,
                            Content = "Maiores enim perspiciatis est numquam asperiores quos mollitia ad sapiente. Harum voluptatem aspernatur consectetur distinctio exercitationem ut. Aut vel laudantium est illo ut dolores sint quas.\n\nOmnis libero sed ut. Officiis minus voluptatem quos dolores. Nihil repudiandae rem esse omnis numquam hic sit. Molestiae alias et dicta quos et commodi. Reiciendis iure et et libero sed quidem unde.\n\nQuia officia rerum consequuntur aut et. Non in maxime exercitationem. Eaque maxime deleniti debitis nostrum tenetur quia. Eaque illum voluptates iste soluta omnis in.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = 2
                        },
                        new
                        {
                            Id = 11,
                            Content = "Autem sint consectetur et. Eum in assumenda recusandae suscipit qui architecto aut. Id ut corrupti sint atque recusandae.\n\nSed nobis reprehenderit est voluptate non et ab. Est qui et odit libero. Sed ad consectetur at qui corrupti. Et incidunt officiis eveniet nemo id minima occaecati exercitationem quas.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = 2
                        },
                        new
                        {
                            Id = 12,
                            Content = "Nam consequatur nemo dolorum ea et. Amet non pariatur nesciunt. Animi deleniti ullam dolor tempora expedita est facere hic neque.\n\nNon qui sequi repudiandae facere rerum. Sunt est consectetur sed exercitationem non praesentium molestiae. Molestiae temporibus aliquid dolorem consequatur.\n\nCupiditate animi illum iusto eveniet doloribus voluptates unde. Perspiciatis quia ut recusandae fuga. Deleniti facere totam odio rerum consequatur. Et adipisci aperiam ea quia vel nemo accusamus. Et qui voluptatem.\n\nSed ut laborum ex qui repellendus. Est fuga temporibus voluptatum eos enim voluptas earum asperiores itaque. Fuga quidem magnam. Maiores blanditiis consequatur eveniet iure ut sequi ipsa velit.\n\nConsequuntur molestiae recusandae consectetur atque dolorum. Voluptatem et minima numquam quas quis sequi itaque et. Enim ex ab. Ut nam harum et odio inventore. Beatae aspernatur quo nam voluptatem ut. Et sequi voluptatibus sed veritatis.\n\nEx sunt occaecati voluptatem voluptate perspiciatis esse. Sint minus tempore consequuntur quasi ut ut. Corrupti quibusdam qui omnis at consectetur harum voluptatem. Dolorem harum facilis omnis enim consequuntur dolores quae consectetur labore. Voluptatum expedita deleniti non explicabo enim qui nihil. Quaerat corrupti consectetur est quisquam.\n\nDoloremque fugiat tempora non pariatur. Ut nemo nemo omnis sint harum aut. Consequatur consequatur et excepturi officia laboriosam similique beatae maiores perspiciatis.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = 2
                        },
                        new
                        {
                            Id = 13,
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = 3
                        },
                        new
                        {
                            Id = 14,
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = 3
                        },
                        new
                        {
                            Id = 15,
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = 4
                        },
                        new
                        {
                            Id = 16,
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = 4
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "/img/logo.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReplyToCommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<int>("WikiPageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReplyToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = 2,
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WikiPageId")
                        .HasColumnType("int");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = 4,
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplyToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
