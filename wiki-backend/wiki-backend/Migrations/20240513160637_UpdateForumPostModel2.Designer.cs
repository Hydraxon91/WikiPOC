// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240513160637_UpdateForumPostModel2")]
    partial class UpdateForumPostModel2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ebc9b078-1a2c-43ce-ac31-0c73a68b15e9"),
                            CategoryName = "Characters"
                        },
                        new
                        {
                            Id = new Guid("d67918b2-9737-4293-8e54-35f3d8d50ce3"),
                            CategoryName = "Stories"
                        },
                        new
                        {
                            Id = new Guid("483bafb0-6a8a-46e1-814c-de81b4ad9e3a"),
                            CategoryName = "Locations"
                        },
                        new
                        {
                            Id = new Guid("7c74d058-b536-4b1d-aae9-0db322f74bd3"),
                            CategoryName = "Events"
                        },
                        new
                        {
                            Id = new Guid("bdb0d5a7-7668-4724-9fe5-6179e411024a"),
                            CategoryName = "Organizations"
                        },
                        new
                        {
                            Id = new Guid("c0ea92af-4611-4f8e-9b7f-2a1de45c984c"),
                            CategoryName = "Concepts"
                        },
                        new
                        {
                            Id = new Guid("7d129891-4f62-4a43-90e2-e8007dea5d63"),
                            CategoryName = "Technologies"
                        },
                        new
                        {
                            Id = new Guid("d3fec8c7-997a-4f4e-80e9-f56c38bbac3b"),
                            CategoryName = "Arts and Entertainment"
                        },
                        new
                        {
                            Id = new Guid("e904a4db-a725-48eb-9167-e44fb6377a78"),
                            CategoryName = "Sports and Recreation"
                        },
                        new
                        {
                            Id = new Guid("47477724-2ec2-4ac2-b9bd-70b4e656df66"),
                            CategoryName = "Science and Technology"
                        },
                        new
                        {
                            Id = new Guid("59b9b220-9b41-40ef-8ae0-a384224d29d3"),
                            CategoryName = "History and Culture"
                        },
                        new
                        {
                            Id = new Guid("4d1ee620-249a-4629-99a2-cb9ef0a80ca2"),
                            CategoryName = "Food and Drink"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForumTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForumTopics");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5015fc6c-0f6f-4df5-b2a9-e89cebfcb629"),
                            Content = "Possimus corporis perspiciatis quisquam rerum est eos eaque. Nostrum perferendis neque distinctio sit et molestias sit. Qui molestias sint earum vel facilis aliquid esse a.\n\nEst perferendis non soluta alias aut necessitatibus sed. Alias amet quos. Veniam sed dolor nemo tenetur. Aliquid ea cum repudiandae laboriosam omnis alias. Illum est eum inventore.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("4030010b-4ab1-4a2f-a550-8fc8ff053ac6")
                        },
                        new
                        {
                            Id = new Guid("3a7e9904-00dc-4780-b474-b30837cda84e"),
                            Content = "Laboriosam laudantium qui eligendi error sit consectetur laborum. Qui reiciendis ipsam quod qui repellat aut itaque animi laudantium. Aut voluptas ducimus dolores. Veritatis aut error tempora qui. Non natus dolorem eum esse architecto sit hic.\n\nQuos laboriosam voluptatem dolorem voluptate optio. Hic eum voluptatem molestias nisi omnis ratione. Quae nihil velit maiores nisi. Autem ut officiis omnis assumenda sit.\n\nRerum et nihil sapiente beatae aut rerum qui. Et labore saepe praesentium facere qui ea iusto quia. Sit corrupti occaecati soluta culpa qui magnam. Vitae omnis nesciunt qui reprehenderit autem.\n\nIure distinctio et quo mollitia. Iure non non voluptatum sed quo est. Omnis dolorem in quas voluptatibus neque culpa qui.\n\nVel quo possimus fugit in aliquid hic dignissimos. Adipisci quasi dolorem quia recusandae quia deserunt et minus alias. Ad voluptas odit ipsam.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("4030010b-4ab1-4a2f-a550-8fc8ff053ac6")
                        },
                        new
                        {
                            Id = new Guid("15cda6a3-d675-4a73-8127-11dfd852049b"),
                            Content = "Ut soluta iusto soluta assumenda. Fugiat ea delectus perspiciatis ut eveniet quibusdam enim. Magnam voluptatem unde ut facere impedit. Voluptas saepe amet similique adipisci ut beatae.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("4030010b-4ab1-4a2f-a550-8fc8ff053ac6")
                        },
                        new
                        {
                            Id = new Guid("57cc0c5c-8ca6-4eab-bc7c-db1e44f5875b"),
                            Content = "Est velit eos sunt nemo repudiandae. Sint eum amet omnis ut illum quo veniam. Officia et eum rem eos.\n\nAccusantium ea corrupti molestiae voluptatum iste qui et ut aut. Veniam dolores minima molestiae ut velit. Cupiditate eligendi saepe eligendi. Quis quos velit aliquid officia aspernatur consequatur molestiae ea corrupti. Eum et saepe mollitia. Est quo illo officia dignissimos.\n\nMagnam velit nulla atque recusandae. Sunt officiis quisquam enim natus. Rerum impedit porro sit amet architecto incidunt minus. Tenetur magni ea et blanditiis recusandae quia perspiciatis sit atque. Accusantium dignissimos odio quo deleniti delectus voluptatem ipsa. Reprehenderit ipsa iure enim similique et.\n\nDucimus non sint numquam atque. Officiis et non consequatur ut expedita quod distinctio. Maxime aut voluptatibus. Cumque ut officiis aliquid magni eos id aut provident. Consectetur et amet repellat culpa porro. Ea beatae autem aliquid repellat eveniet error asperiores dolores.\n\nOmnis culpa debitis voluptatibus praesentium tempora sequi dicta. Dolorem esse ullam magni maxime optio suscipit eius. Est quaerat et. Consequatur fugit optio cumque minus est eos totam vitae beatae.\n\nQui aliquid ut est facere odio magni. Voluptatem alias in magni repellendus corrupti voluptates. Nam ducimus rem ex exercitationem dolore enim corrupti et qui. Eveniet expedita aliquid facilis aut accusantium. Perferendis reiciendis itaque et. Quasi id perferendis eos dolores repellendus sed qui.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("4030010b-4ab1-4a2f-a550-8fc8ff053ac6")
                        },
                        new
                        {
                            Id = new Guid("a95a437a-cf58-4b12-a264-263217a370d2"),
                            Content = "Consequatur quo similique assumenda adipisci pariatur et rerum. Saepe qui natus aut. Exercitationem molestiae quos. Libero assumenda praesentium repudiandae inventore. Saepe iure quam sint maiores reprehenderit. Quo ad at dolor temporibus distinctio.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("4030010b-4ab1-4a2f-a550-8fc8ff053ac6")
                        },
                        new
                        {
                            Id = new Guid("fe760cd7-631c-4794-9463-f750315525ba"),
                            Content = "Numquam molestiae temporibus et aut. Velit et consequuntur voluptas consequuntur ut vel vel. Explicabo quam illo nihil. Animi adipisci quis. Dignissimos totam aut expedita architecto laudantium occaecati libero sed aspernatur. Eum autem iste.\n\nVel maxime consequatur. Quisquam explicabo et officiis facere impedit omnis. Cupiditate omnis aut laborum omnis voluptatem repellendus. Veritatis fuga sint possimus id hic labore excepturi harum consequuntur. Adipisci excepturi blanditiis possimus pariatur ducimus et nulla.\n\nUt quia voluptatibus. Necessitatibus provident omnis hic omnis eum aut veritatis. Voluptatum eum ab officiis aut. Sequi voluptates repellendus deserunt possimus voluptates architecto dolore in sed. Consequatur quos sapiente labore.\n\nArchitecto et quo quam beatae id. Rem minus ut harum et ea vero molestiae. Corporis laborum dolorum officiis facilis harum qui. Rem vel adipisci laborum doloremque harum deleniti magnam. Ea quo assumenda ea molestiae eveniet rerum reprehenderit laboriosam.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("4030010b-4ab1-4a2f-a550-8fc8ff053ac6")
                        },
                        new
                        {
                            Id = new Guid("848d1696-cdac-4d61-829c-10bb347c5646"),
                            Content = "Impedit autem repellendus molestias consectetur quia ut. Dolorum dolorem natus cupiditate sed sint voluptas sint fugit ab. Voluptas quam odit aut magni deserunt. Accusamus deserunt labore quis qui ratione natus sed. Nostrum qui libero error quis ipsum.\n\nHarum vel et consequuntur rerum corrupti cupiditate. Expedita inventore modi enim rerum quas aut tempore in. Est quas nisi iure distinctio eveniet voluptatem odit aliquid possimus. Provident accusantium ut id fugiat. Distinctio autem possimus qui voluptates nostrum minus nisi quia fugit. Non aut laborum porro labore.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("d0afb429-ec0d-422c-8765-66baeca9fe30")
                        },
                        new
                        {
                            Id = new Guid("fba5cecb-201e-4c2d-a36a-1953a47ad96f"),
                            Content = "In et quasi dicta voluptate expedita nihil eum. Quas dolores quam eaque voluptatem harum. Et animi cupiditate rerum rerum odio. Suscipit dolor sit et quam. Suscipit omnis nemo maxime hic distinctio rem. Consectetur voluptates recusandae magnam eaque reprehenderit cum totam nobis.\n\nConsequatur et voluptate et dolorem sequi voluptatem ducimus eum. Eaque ut velit expedita saepe dolorem nulla minus inventore aut. Repellat reiciendis ut. Atque et deserunt quas repudiandae. Earum sapiente voluptatem expedita consequatur molestiae. Aut nostrum magnam maiores voluptates nam molestiae.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("d0afb429-ec0d-422c-8765-66baeca9fe30")
                        },
                        new
                        {
                            Id = new Guid("e05b41c5-50d4-44c8-a7cd-0da5699c142b"),
                            Content = "Aut id qui ipsum laborum nesciunt necessitatibus delectus. Quaerat tenetur perspiciatis. Dolores modi qui eos perspiciatis debitis atque modi. Rerum quia dolores harum voluptas et est nobis delectus. Ut porro rerum. Ipsa neque aut rerum magni consectetur.\n\nA doloremque vel aut aspernatur itaque similique voluptatem omnis occaecati. Totam nihil sint. Perferendis voluptatem ea harum et exercitationem veritatis voluptate corporis. Sit odit ut aut velit neque at voluptas ducimus ea. Nisi eaque tempore nostrum ratione minus. Quia error ut officiis et praesentium nobis.\n\nExplicabo id est iusto placeat fuga ea culpa aut quis. Reiciendis unde eos aperiam in nulla magni sapiente sit. Dolorem qui repudiandae rerum nihil.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("d0afb429-ec0d-422c-8765-66baeca9fe30")
                        },
                        new
                        {
                            Id = new Guid("200596f9-3ff7-4739-88c5-e596425ca55a"),
                            Content = "Sapiente corporis illum aut. Blanditiis sed sed error cupiditate quia et ut. Consequatur autem voluptas nihil vel quaerat qui ut enim dolorem.\n\nQui quis natus quibusdam explicabo vel vero consectetur nihil quisquam. Unde delectus minus possimus. Recusandae consequatur sequi.\n\nQui enim illo id. Mollitia quisquam aspernatur quis. Sit ea iusto ab adipisci. Illo quia facere ratione ipsam est autem repudiandae.\n\nBlanditiis occaecati qui qui sed. Repellendus repellendus eos. Voluptas quas temporibus similique doloribus in qui saepe in dolorum.\n\nA et laborum fugit. Et dolorum omnis voluptas corrupti. Ea explicabo fugit. Error architecto quaerat consequuntur aut fugit animi sit tempore sit.\n\nAb aut est ad quia magni id voluptatibus architecto iure. Facere ab possimus neque qui quaerat molestiae omnis inventore. Temporibus quaerat eum molestias quaerat molestiae.\n\nAb excepturi repellendus ut veritatis tempora velit. Sunt sit est ad voluptas. Quia non ab quia temporibus tempore maiores ut voluptas ipsa. Cumque laborum ut. Rerum aut natus a.\n\nQuam tempore quasi sapiente. Accusantium nostrum quam quo dolore necessitatibus. Tenetur ut non ut qui qui.\n\nQuis doloribus labore fugiat. Et voluptatem nulla aut quod distinctio. Sit non accusantium impedit et nisi nesciunt. Omnis ratione rerum optio quasi ea facere ea voluptatum vitae. Est aut recusandae quam consequatur qui accusantium.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("d0afb429-ec0d-422c-8765-66baeca9fe30")
                        },
                        new
                        {
                            Id = new Guid("6e7f3340-b4e0-478a-b992-903b906662c3"),
                            Content = "Doloribus omnis ea id dicta. Neque quis doloremque vel beatae fuga. Soluta fugit quaerat officia eaque hic nihil cupiditate.\n\nMagni rerum deleniti dignissimos enim. Perspiciatis temporibus error in molestiae enim doloribus alias fuga animi. Assumenda iure et animi fugiat atque.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("d0afb429-ec0d-422c-8765-66baeca9fe30")
                        },
                        new
                        {
                            Id = new Guid("8acf9f90-a137-43ee-9db6-3d111857163e"),
                            Content = "Accusantium non vitae tempore amet aperiam. Modi dolore quis quis odit eius aperiam. Maxime ut consectetur consectetur aliquid animi non eius ab. Voluptas quidem earum beatae placeat totam eum. Deserunt consequatur repudiandae non neque tempore dolor quasi.\n\nMinima eligendi minus voluptatibus sed molestiae. Explicabo tenetur dicta voluptatum nisi optio repudiandae a sint laboriosam. Non voluptates ab molestiae facilis. Ut qui sed rem dolore iste.\n\nVel culpa sed voluptas sapiente incidunt consectetur deleniti est. Cumque numquam incidunt qui qui omnis autem ab excepturi est. Fuga officiis in ratione. Esse consequatur omnis eum voluptas tempora et. Molestiae porro illo vero pariatur.\n\nMolestiae perferendis repellat repellendus accusantium illum. Dolores rerum sunt. Sapiente tempore ut vero praesentium magnam. Quos in quia id dignissimos voluptatem aut unde. A totam provident.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("d0afb429-ec0d-422c-8765-66baeca9fe30")
                        },
                        new
                        {
                            Id = new Guid("f43af813-b1fe-40aa-b8e8-d4721c32eaca"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("1b9ec1da-131d-4319-88da-4d518c5731c4")
                        },
                        new
                        {
                            Id = new Guid("dd7bc6dd-2cf2-4b9e-980b-8b3e8f041dec"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("1b9ec1da-131d-4319-88da-4d518c5731c4")
                        },
                        new
                        {
                            Id = new Guid("631d45d7-9883-411f-921a-cfc303eaa4f7"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("3f0df0db-53ef-4987-8f52-7da3cc7efc99")
                        },
                        new
                        {
                            Id = new Guid("8268259d-f713-41fd-89dc-e529d248c5d1"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("3f0df0db-53ef-4987-8f52-7da3cc7efc99")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ForumPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("4030010b-4ab1-4a2f-a550-8fc8ff053ac6"),
                            CategoryId = new Guid("ebc9b078-1a2c-43ce-ac31-0c73a68b15e9"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 13, 18, 6, 37, 236, DateTimeKind.Local).AddTicks(6583),
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("d0afb429-ec0d-422c-8765-66baeca9fe30"),
                            CategoryId = new Guid("d67918b2-9737-4293-8e54-35f3d8d50ce3"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 13, 18, 6, 37, 236, DateTimeKind.Local).AddTicks(6625),
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b9ec1da-131d-4319-88da-4d518c5731c4"),
                            CategoryId = new Guid("483bafb0-6a8a-46e1-814c-de81b4ad9e3a"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 13, 18, 6, 37, 236, DateTimeKind.Local).AddTicks(6761),
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("3f0df0db-53ef-4987-8f52-7da3cc7efc99"),
                            CategoryId = new Guid("7c74d058-b536-4b1d-aae9-0db322f74bd3"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 13, 18, 6, 37, 236, DateTimeKind.Local).AddTicks(6765),
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("4030010b-4ab1-4a2f-a550-8fc8ff053ac6")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumTopic", "ForumTopic")
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumTopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("ForumPostId");

                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.Category", "Category")
                        .WithMany("WikiPages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Navigation("WikiPages");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Navigation("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
