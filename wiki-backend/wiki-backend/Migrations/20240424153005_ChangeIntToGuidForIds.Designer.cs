// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240424153005_ChangeIntToGuidForIds")]
    partial class ChangeIntToGuidForIds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a36f1985-a3d1-4ff7-ac90-4f9c85b4167b"),
                            Content = "Error sit aspernatur dignissimos reprehenderit non consectetur architecto tempora quisquam. Reprehenderit mollitia dignissimos commodi. Et eum sunt voluptatem dolores error nisi dolorem repellendus. Sequi aut magni minima dolorem consequuntur optio ipsam mollitia vitae.\n\nVoluptatem similique illo praesentium est nisi temporibus et similique. Ut occaecati amet in dolorem illum quos. Esse aspernatur quia et eum voluptatum.\n\nIure enim eligendi dolorem repellendus. Recusandae repellendus ut velit. Iure occaecati perspiciatis non adipisci odio sunt.\n\nIure quia eum saepe laborum. Maiores dicta eum ea molestias doloremque nobis. Sit ad et optio esse necessitatibus. Porro dolor laboriosam id maxime et nihil qui accusantium.\n\nMaxime rerum sequi ut ad aspernatur id et. Quia expedita velit blanditiis voluptas libero et porro quia ipsam. Qui maiores qui dolores natus consequatur dolore non libero est.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("6c79586c-1a6f-471d-b44a-d01c67be97c7")
                        },
                        new
                        {
                            Id = new Guid("236ffc2e-c7d1-4967-8144-796124045c83"),
                            Content = "Voluptatibus magni et. Voluptatem officia nesciunt vel quasi. Quisquam nisi dicta ex quo cupiditate eum quidem et ut. Aut ut et dolorum eligendi molestiae et eos omnis non. Est alias et fuga nemo recusandae eos.\n\nAliquam ut non excepturi deleniti quo dolore est et sint. Quis ut nulla facere omnis aliquid modi doloremque. Autem voluptas ad. Odit illo ut voluptatem ipsam quas. Est nostrum debitis pariatur ducimus quo corrupti rerum quam ea.\n\nVel expedita quia adipisci voluptatibus vel eaque ut. Quam dolor aut quia ipsum ad maiores. Sit nulla assumenda et eum. Vitae consectetur distinctio earum aperiam omnis. Ea rem maiores eligendi voluptatum sapiente maxime provident dolorum dolore.\n\nArchitecto dolorem enim qui unde et est et consequuntur dolor. Et illo eos delectus doloribus tenetur. Qui placeat rem qui non soluta hic. Quia nihil voluptatem nemo fugit quia.\n\nEt quae et. Facere eum facilis ab. Est qui assumenda aut sequi soluta. Tempora voluptas cumque quia repudiandae. Ratione reiciendis laboriosam eos esse est beatae exercitationem in. Aut eaque consectetur saepe qui unde quasi.\n\nVel maxime necessitatibus et repellat. Autem officia ex omnis temporibus. Eos tempore minima exercitationem quas dolorem. Nisi molestiae repellendus. Voluptas eaque suscipit aspernatur dolorum optio officia id necessitatibus dolore. Deleniti tempore eveniet ut.\n\nAsperiores velit corporis id laborum consequuntur mollitia quasi debitis dignissimos. Voluptatibus excepturi praesentium delectus vel et et labore neque. Expedita rem voluptatem deleniti quam reprehenderit et. Eos illo repellat maxime in aut. Fugit dolores nulla minima cum ut dolorum sapiente quis.\n\nEst incidunt et iusto sint placeat quibusdam voluptas. Est totam et est ipsa sequi necessitatibus ut modi quia. Hic et debitis minus maxime eveniet totam.\n\nRatione aliquam quae aut rerum ut est a similique. Ut molestias nisi quia ea in reiciendis occaecati unde exercitationem. Cupiditate aliquam voluptatum at nihil similique.\n\nUt dicta voluptatem. Fugit vero corrupti nesciunt est. Minima dignissimos debitis officiis eveniet id nihil. Ut necessitatibus vitae et.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("6c79586c-1a6f-471d-b44a-d01c67be97c7")
                        },
                        new
                        {
                            Id = new Guid("9c2a577d-386a-4b1e-99dc-540336029df0"),
                            Content = "Dolorum voluptas totam eos temporibus ipsum. Ratione iusto expedita. Iste ipsam quaerat ut dolor ut.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("6c79586c-1a6f-471d-b44a-d01c67be97c7")
                        },
                        new
                        {
                            Id = new Guid("d6eab781-4e26-49e9-b9f1-b7187502c4d1"),
                            Content = "Provident consectetur corrupti magni culpa quasi necessitatibus quo laudantium deleniti. Culpa atque porro sed et labore quam. Dolor impedit aliquam magni molestiae fuga. Pariatur ea quidem sequi eos at earum eligendi. Eveniet soluta facilis temporibus quo. Non iste magnam quia provident consequatur quod ut repudiandae.\n\nRem quisquam nulla. Accusantium fugiat autem rerum impedit voluptatem quae consectetur assumenda natus. Distinctio recusandae at odit quaerat tenetur.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("6c79586c-1a6f-471d-b44a-d01c67be97c7")
                        },
                        new
                        {
                            Id = new Guid("465db3a3-d16f-4752-a150-ba796352cc67"),
                            Content = "Laudantium sit beatae aut sed ipsum voluptatem. Impedit consequatur maiores eos. Qui voluptas enim a. Est voluptas quia ipsam ratione laborum sint non. Illo sequi aut quae accusantium omnis. Laudantium et animi nam tenetur.\n\nOccaecati pariatur atque est. Ratione rerum dolor deleniti deserunt molestiae voluptatem impedit. Est enim facere amet earum quia consequuntur.\n\nModi similique incidunt. Omnis id eveniet eos dolorem quidem ut labore atque. Sunt et ullam expedita eveniet totam. Repudiandae necessitatibus dolor. Et deleniti tempore aut sint aut cupiditate ex.\n\nAliquam est deserunt impedit aperiam ratione. Praesentium quasi aliquid qui. Sed aut quia aut ut quibusdam. Quidem odit ducimus suscipit necessitatibus ut repudiandae sit sapiente.\n\nVoluptatem rem voluptatibus eum nihil voluptas. Eos ut omnis quaerat repudiandae dolor qui similique. Aliquid eum dolor asperiores voluptatem quasi voluptatem voluptatibus eum nam.\n\nMinus soluta magni est aut. Placeat possimus dolorum praesentium nulla voluptas ipsam sint explicabo unde. Placeat et possimus a debitis. Cum aut sint sunt quas dolor praesentium.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("6c79586c-1a6f-471d-b44a-d01c67be97c7")
                        },
                        new
                        {
                            Id = new Guid("5a20d443-c364-4755-9fa4-d1dbdbe4df04"),
                            Content = "Autem ut rerum laborum fugiat aut expedita labore vitae deserunt. Facilis quas quo aut quibusdam in culpa. Neque tenetur corporis omnis aut deserunt tempore pariatur culpa aut. Sunt doloremque consequuntur incidunt provident dolores ullam autem quaerat.\n\nQuos molestiae corrupti pariatur itaque non sed rerum. Et necessitatibus illo amet accusamus doloremque alias vitae rerum amet. Aut quas voluptate temporibus eveniet corporis quia omnis. Recusandae nobis dolor dicta aperiam sed.\n\nEt qui et similique ut quia iure. Perferendis ea rerum impedit ad eos. Quisquam doloremque deserunt velit in praesentium eum aut voluptatum autem. Voluptatem cumque et dignissimos. Libero neque neque quia vel voluptatem nihil. Aut incidunt sunt.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("6c79586c-1a6f-471d-b44a-d01c67be97c7")
                        },
                        new
                        {
                            Id = new Guid("ee372606-1d9a-44c4-90c9-e5e81a19fa17"),
                            Content = "Magnam velit doloremque quia consequatur enim quidem nulla maxime. Iure rerum accusamus. Tempora molestiae est reiciendis adipisci ea repellat id exercitationem. Ut aliquam deserunt.\n\nSed et ut nobis eaque fugiat molestiae. Sed tempora voluptas qui unde magni quaerat optio quaerat eaque. Quisquam doloribus perferendis suscipit vero.\n\nNobis reiciendis ad ipsa ipsum. Quia ut aspernatur. Omnis doloremque nihil repellat molestiae quia perferendis neque eos.\n\nCum soluta eos architecto sint et hic aliquid soluta aut. Aliquam eveniet nisi aliquam aut suscipit et est consequuntur quia. Est possimus labore temporibus. Vel modi hic omnis et temporibus laborum beatae rem.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("6cd9270a-78c1-4f6f-86d9-669e40b65cc8")
                        },
                        new
                        {
                            Id = new Guid("97ea11a1-0fab-48a2-a79e-3271d1ce9551"),
                            Content = "Qui possimus consequuntur nobis dolore. Distinctio facere repellat reprehenderit nihil in odio deleniti eius. Voluptatem in aut ut aut debitis sint ut.\n\nQuos nihil quia. Fugit quo voluptatum. Esse dolor libero voluptatem aut iste ducimus enim.\n\nVelit fugiat dolor eum. In voluptatum possimus ex. Ullam neque nemo quod et quos nobis cupiditate ut. Dolorem voluptas provident mollitia qui nesciunt voluptatem.\n\nEt repellendus quaerat porro nihil enim eos omnis provident minus. Est nulla iusto eum quis ea accusantium voluptatem ipsam. Fugiat aut possimus dignissimos iure ullam sunt rem. Consequatur sequi fuga quidem harum ipsam et doloribus debitis. Labore nihil laudantium enim ex molestiae aperiam. Enim sunt necessitatibus iusto aliquid recusandae iusto.\n\nFacere non ipsum aut optio maxime dolor id. Nemo velit quidem sequi sequi corrupti et enim id molestiae. Itaque numquam temporibus quo dolores doloremque natus molestias.\n\nUt facere doloribus nihil et sit quisquam. Quo fuga enim harum voluptatem. Assumenda dolorem culpa. Quia id alias. Adipisci assumenda repellendus.\n\nPorro aut qui sunt ducimus perspiciatis aliquid nihil. Maiores est quibusdam assumenda voluptatum. Aut nobis cupiditate necessitatibus modi corrupti rerum laborum et.\n\nQui ratione facilis debitis incidunt velit in maxime. Dolores consequuntur suscipit voluptatibus accusantium asperiores est. Esse non quis repellendus placeat eaque harum vel distinctio. Sequi eum quo quam accusantium id veritatis itaque et incidunt. Est perferendis veritatis dolores rem.\n\nAut minima vitae voluptatem. Velit nemo qui excepturi quia omnis. Aut minima hic architecto consequatur animi eum eaque. Saepe omnis veniam possimus suscipit nobis incidunt et.\n\nPossimus quis odio aut perspiciatis. Hic enim quia voluptas doloremque placeat. Magnam aperiam voluptas commodi. Amet soluta aut iusto molestiae tempore eius placeat commodi.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("6cd9270a-78c1-4f6f-86d9-669e40b65cc8")
                        },
                        new
                        {
                            Id = new Guid("a915f867-10b7-4ada-958e-601c3feda950"),
                            Content = "Molestias accusantium et vero non cupiditate laborum commodi. Officiis praesentium laborum possimus assumenda et quo in. Aperiam animi doloribus et in ut quam dolore mollitia unde. Aperiam et minus sit cum quisquam dolores qui minus.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("6cd9270a-78c1-4f6f-86d9-669e40b65cc8")
                        },
                        new
                        {
                            Id = new Guid("3b3ddfdd-ad83-490e-a383-6a2af34eaad6"),
                            Content = "Ex qui cum dignissimos architecto. Voluptatem qui aliquam cupiditate velit consectetur assumenda. Ipsa nemo veritatis harum error qui tempora impedit.\n\nId dolores recusandae natus ut quod debitis officia dolore. Laudantium ut asperiores. Voluptate sit itaque dolores beatae accusamus inventore et. Praesentium qui error cumque occaecati totam magni nobis minima eligendi.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("6cd9270a-78c1-4f6f-86d9-669e40b65cc8")
                        },
                        new
                        {
                            Id = new Guid("8ca8f458-ef1a-4f0c-8d1f-3ec03ed5d986"),
                            Content = "Explicabo quia et ipsum. Laudantium et possimus nemo ut quo. Consectetur itaque ut dolores.\n\nVel in illo. Esse et possimus. Aut aperiam temporibus aut dolores et quaerat eaque ipsa. Id possimus non ut consequuntur dolor. Id id rerum ab repellat dolorum. Hic enim quod et ut.\n\nOmnis eligendi recusandae. Ea aut voluptate. Inventore odit et facilis perferendis alias. Et quae voluptatum dolores amet architecto. Eos quibusdam voluptas.\n\nVeritatis voluptatem sapiente. Recusandae beatae dolore id blanditiis minima sit quod repellendus. Accusamus ut dolorum sed. Nihil molestias ratione eveniet in dolores sequi delectus. Fugit labore eveniet porro sit quo cumque reprehenderit quisquam qui.\n\nA exercitationem assumenda in iste voluptate qui magni ullam qui. Nostrum id ipsa sit ex repellat fugiat aperiam ea esse. Reiciendis enim consequatur eum. Voluptatem nam quis repudiandae accusantium a maiores dolor omnis. Nesciunt cupiditate quo explicabo ipsum.\n\nIste ea similique culpa id quo voluptas iste beatae. Voluptas exercitationem omnis laborum sed ut explicabo. Aperiam minima consectetur placeat qui non. Non odio distinctio qui et temporibus asperiores.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("6cd9270a-78c1-4f6f-86d9-669e40b65cc8")
                        },
                        new
                        {
                            Id = new Guid("022a2659-1b8e-4622-adce-6783f2019f4b"),
                            Content = "Et possimus quia accusamus provident. Illum et consequatur voluptate. Ex ea possimus suscipit. Eos quidem hic blanditiis et quod vero.\n\nCum deleniti in qui. Explicabo voluptas quae rem. Eum ut omnis perferendis. Enim est soluta quas. Consequatur quo labore qui.\n\nSunt ut explicabo dolorum porro non nostrum exercitationem minus quam. Eligendi totam officiis est illum. Quae dolorum numquam sit. Impedit quas quisquam. Odio est corporis. Ipsa cumque eos.\n\nUllam quia veniam id incidunt mollitia eum quasi sunt. Velit in rem qui. Impedit similique enim et sed. Molestiae aperiam impedit reiciendis nesciunt odit aut. Rerum officiis quo et quos quos. A possimus aut qui suscipit.\n\nCulpa fugit et rerum consequatur qui aut eum aut amet. Facere consectetur quae. Cupiditate ducimus qui ad. Cum velit adipisci facere occaecati sit eveniet necessitatibus et. Provident nemo cupiditate maxime exercitationem saepe. Rerum consectetur voluptatem.\n\nVoluptatem nostrum dolore et occaecati accusantium quasi sunt eaque. Animi sunt consequuntur et pariatur magni velit. Eligendi nihil exercitationem. Saepe corrupti voluptates. Quos deserunt totam quas.\n\nSint totam facere quos. Aut magnam est libero aut blanditiis autem voluptatibus. Veniam distinctio quis in dolorem labore beatae. Consequatur aut dolorem ipsam. Sit esse cumque temporibus provident similique nobis quia quis. Accusantium mollitia consectetur eum praesentium fugiat non cupiditate eveniet.\n\nVeniam est et quibusdam qui corporis cupiditate similique. Dolor dolor enim sed ipsum rem corrupti. Et et ipsa aspernatur aut labore odio possimus.\n\nDoloribus et et et consequuntur perferendis magnam explicabo quas fuga. Temporibus quidem est. Omnis totam iure beatae. Aperiam quas sed dolor et enim eligendi.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("6cd9270a-78c1-4f6f-86d9-669e40b65cc8")
                        },
                        new
                        {
                            Id = new Guid("5319dde1-513f-4610-b8be-a6863d84fc2a"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("e52b449a-acfc-49bd-b8bf-9b219ca9a29c")
                        },
                        new
                        {
                            Id = new Guid("6c1843bc-67ad-4c2c-bb7a-9669cc065b2c"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("e52b449a-acfc-49bd-b8bf-9b219ca9a29c")
                        },
                        new
                        {
                            Id = new Guid("64e726fd-92fd-40b7-93db-cd78d1750367"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("a7d4ef4c-0187-4217-899b-4eae5b47682d")
                        },
                        new
                        {
                            Id = new Guid("60aaa3fb-3c49-4410-9a7a-eb61977dd635"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("a7d4ef4c-0187-4217-899b-4eae5b47682d")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c79586c-1a6f-471d-b44a-d01c67be97c7"),
                            LegacyWikiPage = false,
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("6cd9270a-78c1-4f6f-86d9-669e40b65cc8"),
                            LegacyWikiPage = false,
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e52b449a-acfc-49bd-b8bf-9b219ca9a29c"),
                            LegacyWikiPage = false,
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("a7d4ef4c-0187-4217-899b-4eae5b47682d"),
                            LegacyWikiPage = false,
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("6c79586c-1a6f-471d-b44a-d01c67be97c7")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
