// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240514065001_UpdateForumPostModel4")]
    partial class UpdateForumPostModel4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63efb064-1b9e-4158-bd89-63dc2b443192"),
                            CategoryName = "Characters"
                        },
                        new
                        {
                            Id = new Guid("4fd67d4c-0a6e-4b21-838a-568a545d9057"),
                            CategoryName = "Stories"
                        },
                        new
                        {
                            Id = new Guid("522ff39f-edf2-4661-bb15-2b1b45e693b2"),
                            CategoryName = "Locations"
                        },
                        new
                        {
                            Id = new Guid("35ed3c23-f25a-42b5-9222-de70eeeb98fd"),
                            CategoryName = "Events"
                        },
                        new
                        {
                            Id = new Guid("35b9abd1-a90b-4937-954d-0f85878280eb"),
                            CategoryName = "Organizations"
                        },
                        new
                        {
                            Id = new Guid("4ad443ff-eaeb-4a6d-88c6-40e1f068a1ec"),
                            CategoryName = "Concepts"
                        },
                        new
                        {
                            Id = new Guid("485dbdb3-e99d-4b98-b6a9-9304f9e6dedf"),
                            CategoryName = "Technologies"
                        },
                        new
                        {
                            Id = new Guid("bcc1e2d6-72d7-4134-b3d2-35883fb1d231"),
                            CategoryName = "Arts and Entertainment"
                        },
                        new
                        {
                            Id = new Guid("010769ea-556e-404b-80c3-224d8a6b07c6"),
                            CategoryName = "Sports and Recreation"
                        },
                        new
                        {
                            Id = new Guid("4806b03d-98ee-4165-8735-4869da345e4b"),
                            CategoryName = "Science and Technology"
                        },
                        new
                        {
                            Id = new Guid("b59976ed-8541-467d-8597-197313c1e157"),
                            CategoryName = "History and Culture"
                        },
                        new
                        {
                            Id = new Guid("f355aa0a-fdde-4fdd-9ae8-a0bfec415ae7"),
                            CategoryName = "Food and Drink"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForumTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForumTopics");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ab6fc0a-1285-43dd-b207-84b0c96eaf56"),
                            Content = "Quae ut quod. Quam asperiores et et maiores temporibus enim dicta expedita. Quis consequatur ad. Unde rerum dolorem error animi et ea dolorum. Earum accusamus et ex et. Ea corrupti est nisi ullam ea illum temporibus.\n\nVelit nesciunt eos molestiae voluptatem sint ab soluta voluptate. Cumque rerum explicabo vel. In molestias ut beatae recusandae nisi ex saepe. Ipsam animi non architecto facere. Inventore aperiam nihil.\n\nId laboriosam ut occaecati doloremque omnis quibusdam facilis. Sit veniam earum at occaecati cum. Culpa molestiae voluptas. Delectus mollitia pariatur corporis ut rerum earum aliquam. Explicabo facere sit et quos. Rerum architecto modi quas molestiae harum quia aut itaque.\n\nEt accusantium illum mollitia est et perferendis doloribus vel. Sit ut fugiat vel animi ipsam voluptas aut. Quibusdam labore temporibus.\n\nSunt et quia ipsum est inventore non molestiae reiciendis nisi. Inventore porro beatae repellat illo qui temporibus eligendi. Voluptas aliquam ea dolore odio id consequatur vel tenetur.\n\nLaudantium sit fugit similique fugit nihil eius ea itaque. Exercitationem sunt rerum repellat officia est vero asperiores. Ratione nihil error incidunt et minima ratione ut adipisci est.\n\nEius et ut ut. Ullam et et itaque consectetur. Id at sed. Vero labore at soluta.\n\nAliquam natus commodi minus et repudiandae. Minima amet officiis et expedita quia quis quia eos. Ut et aliquam sit et quidem perferendis quam dolore quo.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("0e39cf89-3702-4ed9-a8f1-20a468a6a091")
                        },
                        new
                        {
                            Id = new Guid("23b34c79-d9d2-45fa-b7e3-8c9d0faf08a2"),
                            Content = "Explicabo in est earum in et sunt maxime. Excepturi excepturi occaecati et non est aut. Asperiores unde est ut quasi ad in iusto quidem quaerat. Voluptatem numquam quo quas. Facere corporis facilis ullam et. Quia et eum in quis incidunt expedita dolorum.\n\nEnim sit aut quasi earum molestiae. Officia error aut. Ut aperiam earum consequatur eum officiis iure suscipit est qui. Neque delectus est facilis fugit sunt at nemo quam. Aut ut consequatur iure voluptates commodi non.\n\nVoluptas itaque velit consequatur repudiandae repellendus. Sed repellat beatae. Necessitatibus assumenda pariatur ab sit fugiat minus.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("0e39cf89-3702-4ed9-a8f1-20a468a6a091")
                        },
                        new
                        {
                            Id = new Guid("865063f5-849b-4c5a-8f3c-d01c5d268ce3"),
                            Content = "Aut reiciendis est earum maiores totam. Odio sint doloribus autem et autem dolorem aut quos. Eaque tempore voluptatem fugiat maiores in explicabo dolorum.\n\nPlaceat autem omnis libero eligendi cum sequi eligendi doloribus ullam. Repudiandae ab veniam. Dolore illum tempore rerum cum aliquam voluptates animi omnis. Cupiditate veritatis quia adipisci quisquam nemo incidunt tempora ab.\n\nConsequatur eligendi blanditiis. Consectetur id quaerat qui omnis quo rerum quos molestiae id. Doloribus nostrum id voluptas voluptates non modi fuga.\n\nPorro consequatur illum tempora deleniti dolores voluptate officiis. Veniam quaerat expedita aut natus eum suscipit. Quisquam quis id soluta. Omnis velit esse quo quia quae earum eius suscipit nam.\n\nIure illo beatae nihil possimus illo. Reiciendis voluptas animi aut. Consequatur doloribus amet pariatur voluptatem necessitatibus ut nisi. Eaque dolores aliquid excepturi.\n\nNobis non accusantium voluptas voluptatem rerum ea provident quia minima. Nesciunt iure voluptas sed qui. Deserunt omnis id vel fugit veniam accusamus ex atque voluptatem.\n\nEst tenetur asperiores quibusdam molestias. Inventore occaecati excepturi possimus. Illo magnam quia.\n\nSuscipit voluptatibus cum. Autem veritatis dolor reprehenderit amet eligendi quia ea eum provident. Et consequuntur dolorem.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("0e39cf89-3702-4ed9-a8f1-20a468a6a091")
                        },
                        new
                        {
                            Id = new Guid("297cb09d-fd05-48ff-bf1a-fc5041ce191d"),
                            Content = "Iusto iste officiis mollitia voluptatibus voluptates dignissimos. Aut aut facere vitae dolorem libero illum beatae. Repellendus impedit aspernatur non nostrum in tenetur aut quasi. Vitae maiores aliquam.\n\nSed magni cumque tempora ut eligendi ad odio alias nihil. Natus id autem consectetur aspernatur. Qui nihil quis quis.\n\nUnde incidunt sint inventore ad exercitationem repellat ut. Nisi voluptatem dolores consequatur dolor libero. Quia aut earum nam et cumque ipsa et. Nobis qui enim natus aut dolores. Voluptatem est enim iusto sit rerum est molestias itaque quis.\n\nQuia facilis dolore adipisci qui dolor cumque tempora. Quia quia sunt soluta sint reiciendis. Reprehenderit et quisquam animi enim tenetur quis.\n\nQui eos et ut ut fugiat et. Voluptas rem aliquam quidem doloribus assumenda. Quibusdam consequatur inventore odio tempora esse. Voluptas est quaerat sunt maxime est totam et. Odit minima quia nihil culpa porro nulla laudantium sed.\n\nSit nihil harum quia debitis occaecati numquam similique quisquam. Et provident nulla occaecati voluptatem rerum asperiores esse. Laborum vero sed aut non facere laboriosam consequatur optio. Quos quia accusamus harum consequatur et dolores. Cupiditate fuga harum reiciendis aut odio et ex nulla tempore. Non sunt dolore ipsa.\n\nQui fugiat at illo. Ut possimus qui at fugit. Atque non architecto cumque. Sint veniam porro. Ea in unde natus nulla. Omnis veniam qui sunt porro ut ipsam quo magnam nemo.\n\nFacilis nesciunt aut omnis rerum facere quia. Et asperiores dolorum sed sit et omnis qui vero. Accusamus eveniet velit consequatur enim et consequatur voluptatem sunt.\n\nAccusamus rerum id. Sapiente atque velit mollitia tempora ut voluptas. Deserunt rerum et amet ipsum sint et.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("0e39cf89-3702-4ed9-a8f1-20a468a6a091")
                        },
                        new
                        {
                            Id = new Guid("8d960016-a7e8-4d33-a76f-2a9a9d0efcf9"),
                            Content = "Explicabo temporibus facere qui numquam consectetur error. In consectetur aut. Rem et reprehenderit corporis voluptas repudiandae assumenda optio reiciendis. Eius ea atque ut corrupti. Consectetur aliquid veritatis vero beatae quia voluptatem aliquid iure.\n\nAut autem aliquid ad velit corporis possimus repudiandae. Labore repudiandae rerum ab perferendis consequatur possimus est. Et libero non quo nesciunt dolorem rerum accusantium. Necessitatibus autem alias doloribus dignissimos magnam ut. Explicabo aut quia ratione omnis. Inventore ullam ut dicta distinctio temporibus itaque.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("0e39cf89-3702-4ed9-a8f1-20a468a6a091")
                        },
                        new
                        {
                            Id = new Guid("73bd4cb3-140c-4ea5-8ecc-f0d1c9fa4b90"),
                            Content = "Eum quis atque nemo quod. Vel sit et repellendus. Earum velit rem a molestias ut voluptatem officiis dolore. Est praesentium ab ut delectus amet architecto hic voluptas est. Aliquam occaecati saepe veritatis autem laboriosam perferendis nostrum ut quam.\n\nVoluptas qui est pariatur soluta amet incidunt aut ad. Consequatur eius quia autem et. Neque aut commodi libero odio perspiciatis omnis est sed. Animi quia pariatur enim animi sint.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("0e39cf89-3702-4ed9-a8f1-20a468a6a091")
                        },
                        new
                        {
                            Id = new Guid("e8bcbc63-d15a-4017-842a-8c105cbaa344"),
                            Content = "Tempore quia autem voluptatibus exercitationem architecto nulla. Enim reiciendis dolorum. Cumque sunt dolores molestiae molestiae. Maxime nesciunt et animi nihil totam omnis est delectus.\n\nSaepe aut quia fugiat. Molestiae illum autem quas eos exercitationem rem dolores. Ut maxime enim maiores exercitationem distinctio eaque porro occaecati sit. In et doloremque quia. Non nostrum culpa illo aperiam facere unde ipsum. Nobis non explicabo quia et aut ducimus perferendis.\n\nHarum consectetur necessitatibus. Error rerum hic voluptates harum harum inventore. Aperiam sapiente excepturi doloremque placeat voluptatibus quos.\n\nQui laboriosam consequatur explicabo ut id voluptas. Consequatur voluptatibus odio in quia. Non dolor quaerat facere tempora atque officiis.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("1ef3842c-a0f6-4ae3-a0eb-0f5b26a0ccf8")
                        },
                        new
                        {
                            Id = new Guid("c30d6625-7089-4ccd-9003-5f42189b3910"),
                            Content = "Ipsum iure optio accusamus quam. Quo cumque delectus facilis voluptatem aut perspiciatis. Eligendi assumenda ut et. Dolores qui molestiae.\n\nCum aut rerum et. Perspiciatis veritatis et. Cum qui odit delectus est ad quibusdam cumque quia aliquid. Recusandae hic dolorem ut minima praesentium a nostrum assumenda dolor. Blanditiis quidem exercitationem non similique repudiandae quia. Voluptas voluptas quis voluptatem.\n\nHarum aut id facere excepturi quia et et. Rerum id eligendi totam nemo temporibus eum quia. Et rem odit. Delectus sint reiciendis. Nihil reprehenderit sed ad sed eius consequatur amet mollitia rerum. Sunt maiores ipsam maxime ad occaecati quas.\n\nNon accusamus soluta ut quia harum a ut voluptates. Aut aut non reiciendis. Tempore voluptatum qui natus eos minus nobis laborum.\n\nDolorem porro illum quibusdam. Temporibus accusantium non laudantium. Est vel numquam distinctio tenetur accusamus consequatur. Autem voluptatem aperiam.\n\nAut corrupti magni iure eos nisi voluptatem nisi sint. Culpa laudantium molestiae nostrum error deserunt nam dolor qui inventore. Placeat porro et aut. Consectetur ipsa aperiam. Rerum dolores neque omnis iusto consequuntur quos.\n\nA consectetur delectus aut qui. Sed ut sed in quidem. Ea explicabo earum. Laboriosam sit veniam voluptates exercitationem ipsum dicta quia quia fugiat. Aperiam provident veritatis doloribus.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("1ef3842c-a0f6-4ae3-a0eb-0f5b26a0ccf8")
                        },
                        new
                        {
                            Id = new Guid("e09e6c36-f0ed-4c9b-8e33-9a21c0e405a5"),
                            Content = "Unde veritatis saepe voluptate non libero accusantium. Possimus libero repellat sed autem et. Autem inventore quisquam.\n\nEa esse et placeat. Nam velit et praesentium. Nam voluptas veniam quisquam.\n\nCumque ea repellat qui voluptas illum. Labore ut aut atque vitae. Quaerat nobis accusamus atque.\n\nLabore non ipsa aut nihil dolorem molestiae aliquid. Aut mollitia repellendus unde voluptas voluptas voluptas modi. Aliquid est id ut porro qui error occaecati. Necessitatibus nobis rerum similique libero laborum aspernatur ipsam ex. Quia est voluptatem quo error molestiae. Tempora libero voluptatibus.\n\nItaque sit distinctio aut quia voluptatum magnam laboriosam illo. Culpa distinctio consequatur. Iusto alias consequatur. Fugiat nisi velit nihil. Est non dolor maiores qui adipisci et.\n\nCulpa explicabo consequatur voluptatem quo harum necessitatibus odio. Est voluptatem omnis nulla libero quis voluptate. Et voluptate culpa assumenda asperiores molestias a non. Rerum numquam velit adipisci enim animi molestias.\n\nAsperiores impedit in tenetur sequi earum. Eos doloremque et est molestias veniam delectus id dolores soluta. Incidunt magnam error reprehenderit aliquam esse totam a eius odit. Et non aperiam et aut consectetur. Recusandae et rem earum est modi. Nesciunt at facilis beatae aliquid.\n\nQuaerat occaecati sequi rerum consequatur. Eaque quod non sed nemo odio eos eos autem. Voluptates repellat error culpa consequatur. Rerum et aut sequi laudantium sed minima quia temporibus quis.\n\nNisi id alias qui. Et odit cum porro eligendi pariatur deserunt ratione minima. Nisi fugit reprehenderit. Ab deleniti ea. Odit a corrupti sed voluptas aut.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("1ef3842c-a0f6-4ae3-a0eb-0f5b26a0ccf8")
                        },
                        new
                        {
                            Id = new Guid("802e90c8-2cef-4aff-8f0a-58b65587b501"),
                            Content = "Hic quam numquam odio labore aut quo. A iste et est officiis aut alias natus voluptas et. Ea recusandae laboriosam voluptatem iusto non ad saepe. Eius quos sunt blanditiis minima vitae fugiat sit. Facere est numquam. Facilis sed quod inventore dolor corrupti dolore est accusantium eius.\n\nNihil voluptatem autem et. Perferendis fugiat vero deserunt nostrum quo. Sunt delectus nostrum. Non deleniti culpa sequi incidunt voluptate enim. Aut enim possimus qui nulla. Necessitatibus saepe nihil est eveniet commodi nemo laboriosam voluptates voluptatum.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("1ef3842c-a0f6-4ae3-a0eb-0f5b26a0ccf8")
                        },
                        new
                        {
                            Id = new Guid("f14363a4-fb3f-40a6-9013-24b01665b994"),
                            Content = "Quo dolorum architecto nihil dolorem est ducimus maiores voluptatem. Quos laboriosam molestiae consequatur magnam. Vitae atque molestiae sed aspernatur similique porro enim.\n\nVoluptatem voluptates nostrum aspernatur id ut perspiciatis. Dolorem quia numquam sapiente. Non reiciendis ea vel eum dolorum possimus autem. Nesciunt voluptatem iste sed sit sunt est ex.\n\nVel delectus id voluptatem fuga. Quia vitae cumque maxime praesentium sunt sint consequuntur sit officiis. Laudantium ullam perferendis repellendus sint similique odio.\n\nAutem est repellat quibusdam dolore sed. Ducimus unde quis assumenda nihil. Vero et rem voluptatem neque molestiae sed.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("1ef3842c-a0f6-4ae3-a0eb-0f5b26a0ccf8")
                        },
                        new
                        {
                            Id = new Guid("a055dceb-15cc-416b-8ea5-772755b6543a"),
                            Content = "Voluptas dignissimos quam deserunt maiores dignissimos explicabo cupiditate rem voluptatibus. Porro ipsam ea culpa. Placeat id eum omnis velit fuga voluptatem et maxime. Impedit quaerat quod quos et qui sed.\n\nMinima quia corrupti odio officiis. Nisi saepe qui. Laudantium reprehenderit rerum qui porro consectetur. Ipsa distinctio perferendis optio repellendus libero. Voluptatem nemo accusantium voluptatum ut.\n\nEt dolorum voluptates et cumque. Est ut ipsam itaque sit et officia occaecati. Fugiat consequatur alias placeat laboriosam ut quia corrupti sunt id. Ipsam et consectetur maxime veritatis voluptatem repellendus ut.\n\nEst at sit iste maxime deserunt facere voluptatem. Iste quia minima temporibus perspiciatis voluptatibus voluptatum doloremque. Architecto omnis nostrum voluptatibus. Voluptas eius voluptates est quia quis nemo.\n\nDucimus nemo voluptatem. Provident blanditiis maxime. Ut repellat ratione voluptatem occaecati. Delectus qui dolor aut tempora ex veniam et dolores sunt.\n\nQuo fugit molestiae repudiandae consequatur veritatis qui harum. Commodi voluptatibus saepe ipsa nemo placeat soluta itaque laboriosam. Ratione ad expedita omnis. Atque aspernatur et voluptatem sequi asperiores veniam.\n\nPariatur quam culpa eos et. Enim rem earum inventore et quaerat consequatur et. Odio omnis esse rem. Cumque voluptas qui est quo. Id harum exercitationem rem accusamus dolorem quam deleniti in. Commodi aliquam soluta ducimus repellendus at iure iure odio.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("1ef3842c-a0f6-4ae3-a0eb-0f5b26a0ccf8")
                        },
                        new
                        {
                            Id = new Guid("646d80ef-119f-46ec-91f5-da85835053c0"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("3010d17b-550e-45fd-b081-1d10f60af13b")
                        },
                        new
                        {
                            Id = new Guid("0f6695c3-ca31-4259-b71e-735ff20dd52d"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("3010d17b-550e-45fd-b081-1d10f60af13b")
                        },
                        new
                        {
                            Id = new Guid("6b66515a-c3d3-4f1d-b663-13cf3831e1d3"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("e95f7d37-f9b0-4d6a-a0f5-bd3ee7d58585")
                        },
                        new
                        {
                            Id = new Guid("9c4523dc-78bb-47b9-8ab8-9ddcb7f34ff6"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("e95f7d37-f9b0-4d6a-a0f5-bd3ee7d58585")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ForumPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e39cf89-3702-4ed9-a8f1-20a468a6a091"),
                            CategoryId = new Guid("63efb064-1b9e-4158-bd89-63dc2b443192"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 8, 50, 1, 429, DateTimeKind.Local).AddTicks(6216),
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("1ef3842c-a0f6-4ae3-a0eb-0f5b26a0ccf8"),
                            CategoryId = new Guid("4fd67d4c-0a6e-4b21-838a-568a545d9057"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 8, 50, 1, 429, DateTimeKind.Local).AddTicks(6264),
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3010d17b-550e-45fd-b081-1d10f60af13b"),
                            CategoryId = new Guid("522ff39f-edf2-4661-bb15-2b1b45e693b2"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 8, 50, 1, 429, DateTimeKind.Local).AddTicks(6494),
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("e95f7d37-f9b0-4d6a-a0f5-bd3ee7d58585"),
                            CategoryId = new Guid("35ed3c23-f25a-42b5-9222-de70eeeb98fd"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 8, 50, 1, 429, DateTimeKind.Local).AddTicks(6500),
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("0e39cf89-3702-4ed9-a8f1-20a468a6a091")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumTopic", "ForumTopic")
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumTopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("ForumPostId");

                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.Category", "Category")
                        .WithMany("WikiPages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Navigation("WikiPages");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Navigation("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
