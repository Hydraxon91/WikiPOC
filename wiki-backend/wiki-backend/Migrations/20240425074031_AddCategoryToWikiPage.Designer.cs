// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240425074031_AddCategoryToWikiPage")]
    partial class AddCategoryToWikiPage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e5b9624-3cf9-4055-8f5a-5d519e02dc17"),
                            Content = "Laborum quia quas. Neque modi voluptas quos qui enim mollitia blanditiis iste. Eos quod culpa saepe. Perferendis alias eius sed aspernatur. Ut porro est dolor beatae deserunt laborum maxime minima.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("34adb907-1095-4ff3-b15b-35a3d8b36852")
                        },
                        new
                        {
                            Id = new Guid("4dc130e1-50b0-455e-b314-c9edaed9cec2"),
                            Content = "Veniam natus in qui odit reiciendis sunt. Soluta aliquam sed maxime. Placeat reiciendis cumque quia qui eos modi ut.\n\nQuis repudiandae est quae quidem qui nemo pariatur omnis. Tenetur et incidunt aspernatur itaque ut quidem velit. Consequatur at magnam et eius facilis perferendis ab sunt officia. Doloremque quia iste sapiente magni sunt harum libero aperiam veniam. Culpa facere harum facere et quaerat quibusdam. Eveniet sed sunt quia.\n\nSit in eveniet dolore quam quia. Qui nemo doloremque a itaque vero molestias molestiae asperiores consequatur. Vel minus libero qui inventore voluptates voluptatum impedit molestiae minima. Eos laborum architecto tenetur corrupti non sunt rerum et.\n\nUllam molestiae alias aliquam aut illum maxime et quas. Distinctio occaecati esse omnis ea ipsum dolorem et eveniet. At aperiam velit ut non necessitatibus est omnis fugit. Doloribus autem voluptatum culpa aut dignissimos. Temporibus consequatur quo tenetur numquam quam perspiciatis quia iusto. Repudiandae neque consequatur ad dolores nobis.\n\nRerum architecto sit ea omnis id suscipit sed doloribus. Ducimus earum ad facere eos voluptatem iste eligendi expedita. Ipsum rem ipsam quam excepturi possimus. Sapiente voluptas vitae optio sit qui harum perferendis dolore.\n\nEt hic illo maiores quos illum distinctio excepturi est. Cumque explicabo praesentium et accusantium. Quae quis ut. Magnam nulla atque modi.\n\nIste aut maxime sint. Similique et nihil aliquid excepturi. Quos quia unde. In aut qui optio.\n\nConsequuntur omnis est iusto magnam est quae tempora qui modi. Nisi id maxime eaque aut. Cupiditate magnam nam quo.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("34adb907-1095-4ff3-b15b-35a3d8b36852")
                        },
                        new
                        {
                            Id = new Guid("8ed161aa-c781-49e6-a208-b34854b41d67"),
                            Content = "Saepe veritatis illum assumenda eos dolore doloribus ullam ea. Inventore possimus quibusdam dolores qui autem pariatur. Voluptas labore laudantium sed eos et rerum architecto. Sed aut ut nam porro libero consequatur repellat beatae. Eos in placeat culpa et harum sint. Vel aut quae dolorem omnis voluptatem sed velit minima.\n\nMolestiae at reiciendis doloribus ratione labore laudantium. Consectetur quas omnis blanditiis ipsum. Exercitationem fugit qui amet tempore nobis sunt. Eveniet sapiente qui rem et doloribus. Tenetur non reiciendis. Atque qui quos dolorum.\n\nNihil et rem ea ex accusamus est temporibus consequatur. Odit in ullam. Perspiciatis repellendus totam et aut facilis quo. Asperiores ex nihil praesentium rem quia.\n\nRerum voluptatibus sequi. Suscipit in amet et sit consequatur. Aut labore aliquam quas enim. Molestiae ipsam voluptate mollitia inventore fuga.\n\nAut non omnis et. Nihil distinctio quibusdam molestiae ut enim dolor. Repellat et non libero ex a ut adipisci nulla et. Tempora ipsam officiis animi ullam minus voluptate. Quia et laboriosam ut quo corrupti voluptas assumenda voluptatem. Provident dolor repellat voluptas accusamus iste eos recusandae.\n\nCupiditate provident ipsam voluptates. Itaque autem ducimus sit vitae ab commodi dolorem provident aut. In vel et voluptatem accusantium aut.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("34adb907-1095-4ff3-b15b-35a3d8b36852")
                        },
                        new
                        {
                            Id = new Guid("610fb6b7-f06d-4f15-bd22-a8a77c5675e9"),
                            Content = "Expedita maxime dolor animi voluptatum voluptatum facere quisquam vero est. Aut praesentium quo voluptatibus animi pariatur iure voluptatem perferendis quisquam. Iusto perspiciatis qui ullam necessitatibus.\n\nEst voluptates est aliquam. Rerum neque molestiae. Voluptas amet mollitia quae dolorem qui temporibus quasi nihil. Qui aliquid sit sed tempore rerum. Laudantium autem rerum dignissimos voluptatem ab et. Fugiat soluta ut consequatur consequatur eos est.\n\nError perspiciatis et ad mollitia libero rerum. Et ut aut id. Quaerat repudiandae dolores mollitia nihil aspernatur eos modi iusto praesentium. Expedita veniam dolor nostrum dicta eius. Exercitationem libero qui temporibus deleniti occaecati deserunt hic aut.\n\nCupiditate sapiente alias inventore. Sed quod expedita voluptas. Veniam aliquid est blanditiis minima repellat numquam.\n\nOmnis reiciendis doloribus quo eos. Rerum et ut laborum quasi qui sunt. Dolorem expedita ullam sit corrupti et non nobis labore. Quia voluptatem provident explicabo iure. Ut sunt dolorem et modi cum.\n\nNeque aut omnis dolorem sunt accusamus illo dignissimos. Dignissimos reprehenderit officia delectus similique nam consectetur officiis quisquam explicabo. Aut quis sint autem ratione. Quaerat quo harum non at minus eligendi. Veritatis est ut repudiandae. Sed officiis quis nihil autem rerum et quis.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("34adb907-1095-4ff3-b15b-35a3d8b36852")
                        },
                        new
                        {
                            Id = new Guid("fa4578a8-d6f2-4043-b10c-62faae9459cc"),
                            Content = "Et quam eaque nihil illo beatae vitae aut esse eius. Mollitia temporibus animi qui rerum quia est ab. Cum facere debitis placeat magnam nobis et at.\n\nMinus quis voluptatem rerum corrupti. Beatae sint tempore ratione error consectetur optio. A incidunt aliquid.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("34adb907-1095-4ff3-b15b-35a3d8b36852")
                        },
                        new
                        {
                            Id = new Guid("b624386b-c477-42ae-9e6f-aac1805d4e26"),
                            Content = "Sint quae aut dolores reprehenderit omnis asperiores iusto voluptas. Esse non aut expedita molestias. Aperiam numquam labore quis quam sunt.\n\nCupiditate eveniet blanditiis rerum inventore exercitationem. Voluptatem vero sit sequi quia voluptate. Et est dolores facere nobis ipsum ut ex. Ut cupiditate omnis voluptas ut. Eligendi sed voluptatem est consequatur.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("34adb907-1095-4ff3-b15b-35a3d8b36852")
                        },
                        new
                        {
                            Id = new Guid("d228e3c2-63fb-4e91-ba58-465aeb809767"),
                            Content = "Dolores eos sit qui odit maiores cum. Suscipit et molestiae ut. Eius id molestiae deleniti. Inventore doloremque sunt sit repellat.\n\nSunt et ullam ea et. Veritatis enim voluptatem magni id fuga eius. Minima sit qui quia ut accusamus error et cumque. In aspernatur nihil magni. Velit sunt recusandae voluptas.\n\nIpsum quo quo a repudiandae ipsum. Nam qui voluptatem quia consequatur consequatur. Fugit quod quis et id ea itaque unde ut. Et quia quod beatae. Qui sapiente deserunt et unde.\n\nPossimus mollitia eum est fugiat facilis deleniti suscipit doloribus est. Id voluptas sint in sed et tenetur ut temporibus. Iste corporis est. Placeat et doloremque. Laborum accusamus est amet et qui voluptatem aperiam.\n\nDelectus vel cum mollitia voluptatem autem. Vel ut fuga atque delectus aut error. Id amet nemo molestias ea laudantium expedita.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("0a6ea902-f0d0-472b-ad29-cae3464655c3")
                        },
                        new
                        {
                            Id = new Guid("cf9c7a49-3fee-446e-9d34-05c2c65e93d2"),
                            Content = "Sed et quia. Mollitia est minus magnam possimus doloribus reiciendis quos sit. Reprehenderit laudantium possimus deserunt atque.\n\nVoluptatem dicta suscipit doloremque asperiores et omnis. Distinctio voluptas quod et dicta sint quidem est quis cumque. Laudantium ea asperiores accusantium neque molestiae repellat. Natus enim delectus nihil laudantium eum eveniet. Molestiae qui repellendus qui repellendus rerum qui.\n\nEt distinctio nesciunt maiores eligendi veniam dolorum et sunt. Debitis iste omnis. Architecto harum odio consequatur perspiciatis libero perferendis beatae aut quia.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("0a6ea902-f0d0-472b-ad29-cae3464655c3")
                        },
                        new
                        {
                            Id = new Guid("0e0c6726-246f-4ff4-9a71-c8949b703d1d"),
                            Content = "Consequatur doloribus non eum esse earum ipsam repudiandae accusamus. Perspiciatis hic itaque consectetur sunt. Enim rerum quos rerum quia consequuntur et.\n\nMagnam veniam mollitia et molestiae ad delectus iure laborum omnis. Quisquam error nisi. Eligendi iure ullam sed quasi. Et ut animi ipsum quos error molestiae officiis vero. Et unde culpa in sit sunt nam et quia omnis.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("0a6ea902-f0d0-472b-ad29-cae3464655c3")
                        },
                        new
                        {
                            Id = new Guid("89e10715-3a5f-4a5d-9d43-134b36cb6c2a"),
                            Content = "Ut in enim provident iste. Consequatur non modi harum natus aut. Similique voluptas et officiis porro qui repellendus eum itaque provident. Ipsum harum totam maiores minus voluptatem illum repellendus rerum. Temporibus nostrum et. Quo quasi saepe neque id saepe doloribus.\n\nLibero non ratione qui harum et consequatur. Voluptas quas cum. Velit voluptas aut est labore illo. Vitae impedit dolore quasi molestias assumenda sint velit quia.\n\nNihil quasi aut assumenda omnis harum modi autem omnis labore. Autem repellendus saepe ipsum. Molestias sint quibusdam pariatur ullam quia aliquam odio iste non. Placeat voluptas reprehenderit. Facere harum amet est et explicabo ducimus dolore omnis itaque.\n\nSoluta voluptate nostrum ut dolor voluptatem exercitationem qui. Temporibus qui commodi. Ipsam et ea reprehenderit unde voluptas ut molestias sit. Porro nisi maiores.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("0a6ea902-f0d0-472b-ad29-cae3464655c3")
                        },
                        new
                        {
                            Id = new Guid("d86c5c5e-5826-459b-9f90-6c33328d2b30"),
                            Content = "Minima consequatur et magnam ipsa est qui vero rerum laboriosam. Veritatis est ducimus delectus nostrum inventore culpa vero ut. Doloribus accusantium laborum ratione assumenda fugit perferendis aut.\n\nTotam ut neque minus sequi consequuntur asperiores debitis. Asperiores ab quis aut numquam quo omnis id aut qui. Ut sunt nihil numquam. Quis provident in et exercitationem facere eligendi et. Minima aut soluta illo ullam ut est est aliquid.\n\nSit inventore non consequatur autem. Sed dolorem repellendus voluptas reprehenderit mollitia consequatur laudantium eos ea. Et nihil voluptates occaecati omnis iste repudiandae doloribus soluta accusamus. Dolorem quo hic. Recusandae magnam tempore hic assumenda laborum id aut ea.\n\nRepudiandae vel in quaerat placeat vel. Pariatur eos mollitia ad ut. Nesciunt quod aliquid incidunt qui. Sint beatae illum sit.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("0a6ea902-f0d0-472b-ad29-cae3464655c3")
                        },
                        new
                        {
                            Id = new Guid("69e33080-6f04-4265-8d30-e2e808731ca7"),
                            Content = "Minima voluptas atque ipsam necessitatibus veritatis pariatur labore facere placeat. Adipisci dolorem amet corrupti magni voluptatem qui deserunt aspernatur recusandae. Similique voluptas quia porro fugiat quos placeat. Amet quod fugiat ut aspernatur. Autem repellendus omnis est dolor dignissimos quia. Earum voluptatem quia ut reprehenderit iure sunt.\n\nA ut tempore provident. Qui soluta et sit culpa delectus sit rem voluptas non. Ullam beatae dolorem laborum quis dolorem animi velit nam nesciunt. Enim reprehenderit eos et.\n\nDoloremque alias et aut culpa magni. Sit debitis officia qui officia temporibus fuga. Recusandae corporis non sit nesciunt at molestiae voluptatibus ut nam.\n\nAspernatur consequatur optio. In aspernatur quibusdam sed illum exercitationem ullam rerum repudiandae qui. Dolore magni a quidem. Et eum amet quo quae consequatur. Inventore est nam. Ut vitae possimus sunt ipsam minus eligendi harum fuga eum.\n\nQuisquam suscipit voluptate officia excepturi tenetur asperiores quaerat corrupti qui. Quis sit ratione illo sunt consequatur dolores dignissimos rem. Exercitationem aut aliquam et nesciunt est praesentium sit. Incidunt ab qui saepe ratione molestiae aspernatur.\n\nNumquam illum consequatur facilis doloribus quidem. Possimus provident et quis quidem eos porro magnam et. Et dignissimos quia. Pariatur alias ipsum voluptates.\n\nEst non aut quo molestiae. Accusamus voluptas et doloribus et voluptates distinctio voluptatem. Nihil nesciunt reiciendis minima numquam qui dolore blanditiis incidunt. Voluptatem quis commodi iste dolor aut asperiores dolores deleniti.\n\nExplicabo recusandae sed officia. Ut magni excepturi facilis sequi quas consequuntur non recusandae. Fugit magnam non consequatur aut et et illo voluptatem.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("0a6ea902-f0d0-472b-ad29-cae3464655c3")
                        },
                        new
                        {
                            Id = new Guid("75af8125-ffad-4913-8f02-c0bb6fad1523"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("aff8ad7e-4404-4ad5-b9f1-9e804a23c7e2")
                        },
                        new
                        {
                            Id = new Guid("421f2788-5c4d-4f13-bc1b-375604aa6f51"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("aff8ad7e-4404-4ad5-b9f1-9e804a23c7e2")
                        },
                        new
                        {
                            Id = new Guid("d277735e-cb54-4881-afef-7366d861f827"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("4ebd3037-61f0-40cf-8c25-effab003de0f")
                        },
                        new
                        {
                            Id = new Guid("ec8e2978-7158-4909-b616-70c9e3244e18"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("4ebd3037-61f0-40cf-8c25-effab003de0f")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("34adb907-1095-4ff3-b15b-35a3d8b36852"),
                            LegacyWikiPage = false,
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("0a6ea902-f0d0-472b-ad29-cae3464655c3"),
                            LegacyWikiPage = false,
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aff8ad7e-4404-4ad5-b9f1-9e804a23c7e2"),
                            LegacyWikiPage = false,
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("4ebd3037-61f0-40cf-8c25-effab003de0f"),
                            LegacyWikiPage = false,
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("34adb907-1095-4ff3-b15b-35a3d8b36852")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
