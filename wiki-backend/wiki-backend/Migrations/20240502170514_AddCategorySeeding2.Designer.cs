// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240502170514_AddCategorySeeding2")]
    partial class AddCategorySeeding2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74f028aa-fbc0-4367-916c-0a3594f0fef2"),
                            CategoryName = "Characters"
                        },
                        new
                        {
                            Id = new Guid("00915953-6c7b-4a3c-b134-de4e4b606ea4"),
                            CategoryName = "Stories"
                        },
                        new
                        {
                            Id = new Guid("a350914b-0878-4a3f-a881-a19987d02b8e"),
                            CategoryName = "Locations"
                        },
                        new
                        {
                            Id = new Guid("112f76e0-9c50-4b53-b653-5896641151c7"),
                            CategoryName = "Events"
                        },
                        new
                        {
                            Id = new Guid("a4be4270-7bfb-4c10-94a0-8d445d38665d"),
                            CategoryName = "Organizations"
                        },
                        new
                        {
                            Id = new Guid("3908eded-bc9d-4e9e-a5c5-8712042d36dc"),
                            CategoryName = "Concepts"
                        },
                        new
                        {
                            Id = new Guid("19ec408c-cb09-4ab4-84f4-4abff52c68e1"),
                            CategoryName = "Technologies"
                        },
                        new
                        {
                            Id = new Guid("1b3669bf-2028-4b03-b47a-0bf7de5ae76e"),
                            CategoryName = "Arts and Entertainment"
                        },
                        new
                        {
                            Id = new Guid("b8243405-5fcd-4c20-8da2-1dadbfded3bd"),
                            CategoryName = "Sports and Recreation"
                        },
                        new
                        {
                            Id = new Guid("272b5711-b21b-48f9-a5e2-9f37f076e598"),
                            CategoryName = "Science and Technology"
                        },
                        new
                        {
                            Id = new Guid("d7a411b0-6b2f-4070-8f15-ae932718d358"),
                            CategoryName = "History and Culture"
                        },
                        new
                        {
                            Id = new Guid("19c4077a-e6bb-4489-a3a0-44ff0e5f4083"),
                            CategoryName = "Food and Drink"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08baf736-6b15-45e3-90d1-a7309ef05eba"),
                            Content = "Voluptatibus sed asperiores enim ipsa voluptatem ipsam in recusandae perspiciatis. Id qui molestias ipsum voluptatem dolorem odio quia animi dolor. Assumenda officiis et eligendi cupiditate molestiae. Quo consequatur ut. Sit sed reprehenderit sed eaque est aliquid.\n\nConsequatur officiis debitis. Sit est corrupti voluptas sequi. Voluptas a modi. Dolores nulla enim deleniti provident a commodi eos. Non facilis ratione facere molestiae eum. Numquam molestias quisquam rerum magni voluptatem sed.\n\nQuam inventore consectetur porro excepturi voluptate corrupti dicta molestias animi. Nisi aliquid consequatur est. Doloribus odio nostrum amet dolores delectus rerum ea. Architecto saepe non minima velit suscipit itaque.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("1178b9f4-0fa9-4a5e-a462-36adcedb4032")
                        },
                        new
                        {
                            Id = new Guid("3f1e48ba-a931-4a4b-917e-a6b28a295f83"),
                            Content = "Illum aliquam necessitatibus dolor. Ex natus fugiat deserunt quaerat. Molestiae aut enim nostrum explicabo.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("1178b9f4-0fa9-4a5e-a462-36adcedb4032")
                        },
                        new
                        {
                            Id = new Guid("edb16cbc-160a-4ee8-b296-362c8bd9570f"),
                            Content = "Libero et qui consequatur ab consequatur iusto. Et voluptatem perspiciatis. Voluptates non dolorem.\n\nDelectus alias omnis consequatur sunt quia ut eius voluptatibus. Qui recusandae ex aut aliquam rerum nulla. Dolor quis quasi asperiores modi magnam minima suscipit.\n\nPerspiciatis ratione voluptas amet modi quia autem voluptatem dolor amet. Nostrum harum similique dicta. Totam ea itaque asperiores ut aperiam ut.\n\nQuod qui similique beatae aut et. Atque explicabo vero. Officiis reprehenderit qui sit atque. Deserunt qui nihil possimus minus consequatur corrupti.\n\nEst quia voluptatum laborum nihil officiis odit qui omnis quo. Hic est aut dolores qui doloribus voluptas est facere atque. Consequatur et distinctio. Voluptatem soluta dicta quaerat omnis aut asperiores.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("1178b9f4-0fa9-4a5e-a462-36adcedb4032")
                        },
                        new
                        {
                            Id = new Guid("e0608fb0-9b25-4016-a758-15ca5630c420"),
                            Content = "Voluptas sint qui est reiciendis maxime. Tempore soluta quibusdam odit earum molestiae cumque modi. Omnis provident quia et vitae sit. Assumenda eligendi placeat officia et dolores. Laboriosam qui voluptatem debitis sunt quasi sunt quis.\n\nVoluptate perferendis culpa excepturi voluptatem alias est suscipit ducimus. Voluptas possimus aliquid quia et dicta impedit eos error molestias. Voluptatem dolor quia voluptatem nisi consectetur nostrum mollitia nihil asperiores. A exercitationem vero eligendi labore enim. Molestiae cumque eligendi unde ipsam. Quo placeat atque eveniet quisquam.\n\nEos numquam excepturi sed consequatur nihil est consequuntur et. Et voluptatem laborum ducimus molestiae. Itaque temporibus nihil dolorum placeat.\n\nEnim sit unde dolores molestiae eum. Fugiat consequatur et ipsa repellat mollitia eum quas. Rerum illo et repellendus dolores qui doloribus odit. Ea molestiae rerum modi nostrum sit temporibus id.\n\nSunt placeat cupiditate sit ea ullam sed dolorum labore. Consequatur aperiam culpa quo ipsum dignissimos illo omnis. Non sit ipsa accusamus sed.\n\nEa numquam et non voluptatum dolor ipsam neque ea assumenda. Numquam quasi eaque. Amet et exercitationem.\n\nSed id architecto assumenda ipsam nesciunt quaerat. Quia omnis laborum voluptatem. Dicta labore suscipit soluta qui quis illum nesciunt cum in. Pariatur occaecati eaque illo quo aut. Doloribus ut quos consequatur. Delectus et consequatur.\n\nAsperiores possimus debitis non libero aut. Ipsam voluptatem consequatur aut ipsa tempore. Fugit est cum est autem et est. Rerum ex vitae qui iure illo sunt maiores. Eum et incidunt sint.\n\nEnim vel officiis qui et libero consectetur. Aut voluptatibus porro ratione modi iusto laborum. Est nisi rem. Voluptatem ex provident sit eum temporibus ipsa. Modi architecto et minus rerum omnis accusantium doloremque voluptatem debitis. Quia vel velit rem ut et enim beatae cum ea.\n\nDolorum eum quae ut libero quaerat ipsum reiciendis qui assumenda. Sed autem nihil cumque corporis perferendis ut rerum. Ex voluptatem qui ea inventore quia. Cupiditate veritatis iure sit. Autem fuga et. Non et earum aut quis nihil voluptatem.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("1178b9f4-0fa9-4a5e-a462-36adcedb4032")
                        },
                        new
                        {
                            Id = new Guid("ddbdaf30-1c10-4f0c-9d66-01298a86b02b"),
                            Content = "Enim placeat sunt sed labore sapiente. Pariatur qui sed quia voluptates quasi. Cum ab provident incidunt.\n\nLaudantium similique asperiores fugit possimus velit deserunt neque debitis. Earum aut ipsum. Blanditiis maiores et sit tempore similique libero sed repellendus laudantium. Vero harum amet non occaecati dicta.\n\nNon optio vitae non aliquid. Eos quia dolorem dolorem illo culpa dicta. Molestiae vero velit et facilis dolor facilis quo ut et. Asperiores laborum non in laboriosam doloribus officia odit quo. Eum omnis ipsa sint numquam et vero assumenda enim. Aliquid illo occaecati.\n\nVoluptas dignissimos accusamus non deleniti sed officiis quis dolorum. Voluptatem perferendis amet laudantium dolorem voluptatum aut sit rerum quas. Nihil suscipit aut. Incidunt qui molestiae occaecati.\n\nNon perspiciatis vel ut occaecati dolores quaerat. Nobis deleniti ipsam id consequatur sed nam. Explicabo id error ipsam. Neque sit optio beatae nulla qui molestias eligendi ut.\n\nDolores reiciendis tempora ad perspiciatis nemo ex. Fuga voluptas repellat. Debitis eum alias recusandae amet eos error nisi.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("1178b9f4-0fa9-4a5e-a462-36adcedb4032")
                        },
                        new
                        {
                            Id = new Guid("60ac5e69-34ed-436f-bbf5-e34d5f3a74bd"),
                            Content = "Iste voluptas aperiam. Distinctio molestiae architecto dolorem vero explicabo. Suscipit sunt mollitia id in ratione.\n\nVoluptates voluptas vel atque ratione minima et maiores. Quo libero ea officiis vero nostrum sed est. Et possimus et commodi corporis quas quia. Distinctio dolor corporis et repellendus vel quia atque aut. Vitae et nam qui. Eaque tempora asperiores magnam vel enim officiis.\n\nFacere ut sunt. Ad voluptas est suscipit eos et tempore perferendis aut. Non commodi placeat expedita quam autem hic amet sed. Sit nobis iusto et aut consequuntur doloribus provident excepturi. Et et eum a corporis debitis ipsa assumenda excepturi non. Quae ab nihil autem perspiciatis nesciunt ad omnis provident.\n\nSaepe aut assumenda. Vel hic quam ut in quod. Dolor labore et quo provident ipsum iusto delectus natus.\n\nVoluptas deserunt tenetur dolor incidunt et quasi temporibus velit. Ratione voluptate vero vitae harum velit sed. Odit blanditiis et modi maxime est est ut. Possimus voluptatem et. Beatae ipsum assumenda accusamus non aut quisquam mollitia esse accusantium. Corrupti est nihil eveniet.\n\nHarum et eos est. Maiores ex asperiores id consequatur. Velit tenetur in et assumenda dolores eum cupiditate qui debitis. Expedita quisquam adipisci iste nam.\n\nOdit velit impedit accusamus. Nisi autem sint temporibus sit quo praesentium. Minima est sunt et consequuntur.\n\nNeque sed molestiae amet quia temporibus ea voluptatibus. Aut nesciunt quos eveniet numquam officia voluptatibus est laudantium. Quaerat rerum magni voluptas et aliquid asperiores. Fugiat aut sed dolorem nihil temporibus et est voluptas.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("1178b9f4-0fa9-4a5e-a462-36adcedb4032")
                        },
                        new
                        {
                            Id = new Guid("c4bde50c-680e-40c5-8b7f-aa3279cb1500"),
                            Content = "Qui suscipit sit. Molestias voluptas beatae. Sint et ad aut. Quisquam rerum exercitationem explicabo possimus unde qui minus architecto cumque. In quisquam sit quas consequatur laborum.\n\nDolores praesentium soluta et atque tenetur. Consectetur fuga perspiciatis ipsum hic illo. Sint exercitationem velit cupiditate ullam alias. Aut doloribus minima error debitis quod dicta molestiae.\n\nQui et eos. Itaque quidem sit provident eos aliquid. Aut repellat similique unde atque quam aliquid vel et nulla. Consequuntur enim et soluta.\n\nDoloribus hic qui quis delectus dolor assumenda. Officiis ut error ab quia omnis accusantium. Architecto fuga esse ipsam repellat reprehenderit.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("3bef0ff7-8486-46a5-aac8-5c801b656506")
                        },
                        new
                        {
                            Id = new Guid("08466df0-dc50-484a-8547-87bb499924db"),
                            Content = "Pariatur esse repellat. Sed nulla alias ex saepe officia. Vitae quae eligendi ullam quisquam excepturi accusantium debitis. Ut voluptates delectus consequatur. Qui nostrum a animi adipisci. Harum est omnis nobis ad est quia eum sit laboriosam.\n\nEsse omnis sint libero deserunt sapiente. Expedita omnis et. Placeat sunt pariatur dicta et quibusdam dolore sapiente maxime. Explicabo iusto nihil similique tempore. Harum molestiae blanditiis.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("3bef0ff7-8486-46a5-aac8-5c801b656506")
                        },
                        new
                        {
                            Id = new Guid("bb470934-f6de-4140-bc35-2df9cb285f79"),
                            Content = "Et sit corporis fugit soluta odit eaque. Iure ut aliquid impedit sit iusto inventore assumenda earum aspernatur. Accusantium porro illo ducimus. Quo ut quod perspiciatis illum eius eaque in.\n\nConsequatur inventore sunt voluptatem debitis saepe officia aut est. Omnis cupiditate molestiae qui reprehenderit aliquam. Deserunt corrupti distinctio rerum dolor consequatur.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("3bef0ff7-8486-46a5-aac8-5c801b656506")
                        },
                        new
                        {
                            Id = new Guid("a29307b9-6d25-409b-ad16-0c9f2c73d5b1"),
                            Content = "Aut recusandae sunt incidunt. Nobis a libero similique inventore. Dolor velit ratione libero molestiae et et. Eos et eos voluptatibus praesentium dolorem. Ducimus minima qui sapiente rerum est ut.\n\nTotam ut fugit quam iste minima ipsa. Ratione est neque voluptates magni mollitia nihil minus. Et velit quod repellendus illo ad qui.\n\nHarum odit libero. Aut quia quaerat id expedita quod dolorem quibusdam labore. Sint doloribus ipsam id ea id ducimus natus quod exercitationem. Minus dolores deserunt enim aut velit quis.\n\nNostrum vel dicta et dolor culpa repellat exercitationem. Quia ea ea delectus temporibus iste ipsum culpa voluptatem. Et enim aut consequuntur id molestiae non. Tempore magnam necessitatibus a earum maiores eum laborum. Aperiam quasi voluptatem architecto velit non quo quo vitae explicabo.\n\nDolor vel omnis. Delectus fuga blanditiis assumenda sit dolorum qui iusto. Veniam atque sint aut maxime maiores non temporibus sapiente sapiente.\n\nNecessitatibus asperiores est. Est rem beatae excepturi facilis laborum. Facilis aspernatur quia porro qui. Et quia omnis fuga totam rerum sit aut soluta.\n\nIpsam et eligendi repudiandae pariatur magni voluptates. Sint nulla error. Corporis voluptatem aut rerum.\n\nAb nisi quia dolorem laboriosam. Tempora consequuntur at voluptatem ullam dignissimos. Voluptatem quam et omnis vero suscipit accusamus. Voluptatem eligendi itaque et voluptatem iure dolorum.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("3bef0ff7-8486-46a5-aac8-5c801b656506")
                        },
                        new
                        {
                            Id = new Guid("c614d0ce-77ff-4cad-b4e5-318c6badb9c4"),
                            Content = "Cum et libero cupiditate fuga nisi eveniet qui minus. Voluptates in velit odit voluptas sapiente at. Eos enim est deserunt.\n\nQuis quae natus enim qui vero recusandae iste. Occaecati dignissimos rerum ex expedita beatae earum occaecati. Ut saepe expedita hic ratione omnis assumenda iure laboriosam. Nihil quidem fugiat. Magnam quia voluptatum voluptate repudiandae perspiciatis ut.\n\nAliquam tenetur laborum nostrum at suscipit repellat est ipsa. Voluptatem nostrum voluptas repellendus quas nobis minima aliquam. Et et ullam optio qui. Quae beatae vitae odio et ab voluptas porro alias in.\n\nDucimus et ducimus iste expedita sint odio exercitationem blanditiis corporis. Quia adipisci sunt asperiores officiis est qui autem ipsum. Incidunt nulla molestiae.\n\nEt cum vel id. Dicta eum illo. Beatae eos praesentium et incidunt provident perspiciatis. A ut quod mollitia sit. Sint vel quibusdam.\n\nAut quos deleniti. Sequi rerum aut. Sint ducimus est vel est expedita. Voluptatem et aut voluptates aut tenetur quae.\n\nIste dolores eos est doloremque reiciendis quia. Laboriosam architecto in unde quia molestiae molestiae itaque rerum. Quod consequatur et.\n\nSed illo perspiciatis nam. Nemo rerum aliquam ea. Iusto in consequatur quia laboriosam aut voluptate.\n\nSint sed ullam laudantium sed minima maiores aut laboriosam. Nisi aut porro. Et blanditiis sed sed ut. Ad et aspernatur et consequatur vero cupiditate et et.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("3bef0ff7-8486-46a5-aac8-5c801b656506")
                        },
                        new
                        {
                            Id = new Guid("cd8d24dc-854a-463e-9584-5acfb6676961"),
                            Content = "Suscipit perferendis repudiandae libero et. Fugit facere repudiandae cupiditate omnis suscipit fugit. Ut cumque aliquam. Laborum voluptatem in iure. Excepturi officiis et et commodi minus cumque voluptatem.\n\nDeleniti quisquam voluptas sit. Fugiat dolore culpa id. Exercitationem hic omnis rerum temporibus saepe enim. Eos voluptas cum rem voluptas est. Rerum at nisi voluptatem reprehenderit iste voluptates voluptate. Iste qui reprehenderit ut nam qui.\n\nOccaecati aut id odit voluptate et asperiores excepturi. Et quo illo quos ea omnis velit. Ut dolorem facere hic qui. Rem ipsa rerum et. Quo praesentium neque ipsa voluptatem quasi ducimus perspiciatis ullam veniam.\n\nEius voluptas pariatur ipsa sit amet numquam amet in. Et porro quia maiores sunt. Impedit aliquid repudiandae omnis rerum aut maxime et error. Illo qui molestiae fuga aut quis sunt. Voluptatem labore dicta.\n\nEum officiis quibusdam qui. Impedit adipisci repellendus. Qui aliquam praesentium deserunt sed quia quia. Et adipisci rerum ad quia quia.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("3bef0ff7-8486-46a5-aac8-5c801b656506")
                        },
                        new
                        {
                            Id = new Guid("df93b5b4-59fe-44a4-b612-e1345f1051b5"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("02296446-cfc4-438b-9f19-91d7fbbd46f0")
                        },
                        new
                        {
                            Id = new Guid("22d34b68-edd9-466a-b5a6-317e16084781"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("02296446-cfc4-438b-9f19-91d7fbbd46f0")
                        },
                        new
                        {
                            Id = new Guid("70cfa0bd-2697-4529-ab78-3b32b30d5705"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("650a9022-7ad9-478a-b178-768ef017b36f")
                        },
                        new
                        {
                            Id = new Guid("f902cebf-fea2-44b4-a91c-3349e4ff9e2c"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("650a9022-7ad9-478a-b178-768ef017b36f")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("1178b9f4-0fa9-4a5e-a462-36adcedb4032"),
                            CategoryId = new Guid("74f028aa-fbc0-4367-916c-0a3594f0fef2"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 2, 19, 5, 14, 237, DateTimeKind.Local).AddTicks(1461),
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("3bef0ff7-8486-46a5-aac8-5c801b656506"),
                            CategoryId = new Guid("00915953-6c7b-4a3c-b134-de4e4b606ea4"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 2, 19, 5, 14, 237, DateTimeKind.Local).AddTicks(1504),
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02296446-cfc4-438b-9f19-91d7fbbd46f0"),
                            CategoryId = new Guid("a350914b-0878-4a3f-a881-a19987d02b8e"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 2, 19, 5, 14, 237, DateTimeKind.Local).AddTicks(1639),
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("650a9022-7ad9-478a-b178-768ef017b36f"),
                            CategoryId = new Guid("112f76e0-9c50-4b53-b653-5896641151c7"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 2, 19, 5, 14, 237, DateTimeKind.Local).AddTicks(1643),
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("1178b9f4-0fa9-4a5e-a462-36adcedb4032")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.Category", "Category")
                        .WithMany("WikiPages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Navigation("WikiPages");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
