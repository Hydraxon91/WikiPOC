// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240514102518_AddForumcommentModel")]
    partial class AddForumcommentModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21e251a9-4a74-4bf5-9f3c-5814284bacb0"),
                            CategoryName = "Characters"
                        },
                        new
                        {
                            Id = new Guid("847a5a61-63c4-40eb-825e-a598d14e85d1"),
                            CategoryName = "Stories"
                        },
                        new
                        {
                            Id = new Guid("c87ac71d-1af4-4635-9c34-def734e10438"),
                            CategoryName = "Locations"
                        },
                        new
                        {
                            Id = new Guid("7dc38e0a-0767-49f8-bea2-95051f0fbaed"),
                            CategoryName = "Events"
                        },
                        new
                        {
                            Id = new Guid("548f3468-e506-44d6-9b2f-d31154f76d01"),
                            CategoryName = "Organizations"
                        },
                        new
                        {
                            Id = new Guid("84ff1ff6-75c8-4ef4-80dd-bf1d353ee56e"),
                            CategoryName = "Concepts"
                        },
                        new
                        {
                            Id = new Guid("aaecda94-0ca1-48bc-8eef-c7f12b5d6f19"),
                            CategoryName = "Technologies"
                        },
                        new
                        {
                            Id = new Guid("a0184cf6-bb20-40be-ac48-359c42ee4d7f"),
                            CategoryName = "Arts and Entertainment"
                        },
                        new
                        {
                            Id = new Guid("5d4277e6-d9a3-4798-8ff0-6605fdcb5f84"),
                            CategoryName = "Sports and Recreation"
                        },
                        new
                        {
                            Id = new Guid("110f12c6-ff22-4bfa-957d-263647d694ff"),
                            CategoryName = "Science and Technology"
                        },
                        new
                        {
                            Id = new Guid("45c103d5-e4e2-42a6-b2e2-5c7ab00b8b0d"),
                            CategoryName = "History and Culture"
                        },
                        new
                        {
                            Id = new Guid("1e214b9a-d844-4b19-8746-a3e0d8ab092f"),
                            CategoryName = "Food and Drink"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForumPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplyToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("ReplyToCommentId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ForumComments");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForumTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForumTopics");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dad5179d-ee12-46f7-8e81-cd8a5bb41b14"),
                            Content = "Impedit vero nesciunt dicta. Dicta sint voluptates nisi voluptatum dolorem accusamus eum libero velit. Autem officiis consequatur numquam sapiente. Perferendis ipsum voluptas aliquam facere illo similique consequatur ut repellat.\n\nIn rerum deleniti et. Occaecati ab omnis omnis impedit distinctio ut ipsam et dolor. Et nihil harum saepe dolor facilis. Minus reprehenderit eos velit.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("c19f04b9-55af-40ab-9388-57af87b2e7a7")
                        },
                        new
                        {
                            Id = new Guid("908209b8-7c27-4781-80d2-34066f150aed"),
                            Content = "Minus a qui in reiciendis eum sed vel occaecati nihil. Ducimus molestias velit molestias nostrum sint et soluta. Nihil et sed nihil impedit incidunt. Quasi ab et maiores non inventore quos. Laboriosam eum natus eaque fuga reiciendis. Eveniet quod quidem.\n\nNihil velit esse ipsam rerum voluptatem ullam sequi aut consequatur. Natus cum eaque voluptates qui molestiae aut dolor corporis. Sed veniam quisquam ut at est iure amet.\n\nConsequatur impedit totam. Harum neque quisquam saepe consectetur ipsa. Qui praesentium voluptatem quae voluptas optio expedita. Nihil consequatur debitis hic ut ducimus unde illum.\n\nDicta itaque et eaque. Saepe at assumenda commodi praesentium consequuntur voluptates distinctio perferendis possimus. Delectus iusto ea a facere et.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("c19f04b9-55af-40ab-9388-57af87b2e7a7")
                        },
                        new
                        {
                            Id = new Guid("975a93b7-f3f1-4485-b46f-6e09fec883fb"),
                            Content = "Dignissimos nemo porro dignissimos est accusamus aperiam accusantium et eligendi. Ut incidunt nihil dicta aut. Quia facilis tenetur aliquid rerum eligendi sapiente debitis qui cumque.\n\nMolestias esse perspiciatis reiciendis sed sunt velit distinctio consequuntur. Iure sapiente fugit veniam sequi praesentium soluta. Quo hic minus quia id itaque sint molestiae. Neque enim natus ducimus ut voluptatem nam repellat nihil illo.\n\nEx sit veritatis rerum repellendus libero repudiandae iusto atque illo. Non sint necessitatibus optio. Optio totam molestias ullam placeat id blanditiis ut in beatae. Alias quibusdam mollitia sed est quibusdam aliquid dignissimos nihil. Dolor inventore alias eligendi quia accusamus blanditiis ut totam. Et eligendi ut in fugit rerum adipisci rerum in sapiente.\n\nId et facilis dolorum nulla sed magnam. Sed dolorem recusandae similique aut odio necessitatibus dolorem. Aperiam quia nihil eligendi eveniet exercitationem quas. Cupiditate nihil omnis voluptatum in labore.\n\nSint fugit ut et nihil quas voluptas minima. Qui doloribus at ut eum quaerat omnis reprehenderit ipsam. Exercitationem veniam et vitae sit quas ea nobis placeat. Et ea sed perferendis est omnis.\n\nNam est quam et. Dolorem odio rem sint qui. Sit ab velit. Voluptatem eaque qui et id voluptatem iure quia. Eum excepturi amet ipsa voluptas veritatis esse beatae. Voluptatem aut dolorem magnam aut laboriosam est similique commodi molestiae.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("c19f04b9-55af-40ab-9388-57af87b2e7a7")
                        },
                        new
                        {
                            Id = new Guid("2f7f430c-e1ed-4b12-b3eb-e6ba96327206"),
                            Content = "Nulla vero consectetur est a eos voluptates. Pariatur nobis eum. In enim non. Non consequatur qui reprehenderit quis aut dignissimos. Fugiat reprehenderit sed perspiciatis consectetur id ut. Rem molestias omnis sed.\n\nVoluptas placeat sit officiis officiis. Quo qui officia. Commodi quia rem sed repellendus ex voluptas. Rerum nam nemo aliquid.\n\nDebitis itaque molestias aut odit voluptatem fugit et consequatur. Repellat et debitis perspiciatis aliquam autem et non. Voluptatem sapiente architecto ut. Sit adipisci animi et molestias consequatur. Eum quia assumenda. Tempora tenetur consequatur consectetur vitae tempore.\n\nEst numquam natus nulla sequi voluptate in doloremque. Ut qui rem delectus itaque fuga itaque eum ea. Est aut error est suscipit. Est necessitatibus id et modi incidunt suscipit nulla asperiores voluptatum. Voluptatem dolorum itaque nesciunt.\n\nDolor facere fugiat omnis excepturi ut alias perspiciatis quos. Veniam perferendis ullam dolores aliquid sunt laboriosam. Quidem nobis quo eius expedita. Veniam enim ratione quas repudiandae. Et odit et.\n\nAutem et voluptates sapiente officiis sit autem qui omnis. Magnam tempore excepturi minus. Natus mollitia rerum voluptate placeat hic culpa consequatur.\n\nRerum nam molestiae qui iusto earum quae possimus consequatur. Ab sed porro mollitia. Quis deserunt nam nihil. Quae sit consectetur quos et ut.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("c19f04b9-55af-40ab-9388-57af87b2e7a7")
                        },
                        new
                        {
                            Id = new Guid("471d27b8-b7b4-40dd-a594-644d0bb07dc2"),
                            Content = "Qui esse cupiditate consequatur molestias. Voluptatum ea quam. Et saepe dolor autem a modi rerum laborum.\n\nSimilique ratione beatae velit suscipit eius voluptatibus in minus. Esse dicta doloremque hic corporis nam temporibus repellendus recusandae in. Distinctio et minus dolore.\n\nQuia voluptatem vel odit non eligendi. Ab molestiae deserunt explicabo autem fuga amet accusamus. Aperiam sit praesentium aut tempora voluptas temporibus aut optio. Illum laboriosam laboriosam vero perspiciatis officia et consequuntur odio ea. Suscipit vitae velit repudiandae asperiores. Totam voluptatum officia aspernatur.\n\nMagni est ut velit minima. Sed deserunt quae et ex quidem tempora. Expedita est et eos consectetur eum doloremque quia. Numquam itaque repudiandae. Quas aliquam non odit hic placeat autem. Quos harum iste.\n\nAb rerum facere excepturi consequuntur. Ut voluptatum sunt ut. Ut vitae id est facilis. Similique dicta est nesciunt veniam accusantium ipsum consequuntur quas est.\n\nEt consequatur recusandae. Et ut cupiditate accusantium reiciendis sunt beatae vel officia. Quibusdam et nam fugiat et quo recusandae id ut.\n\nExercitationem non nesciunt. Unde possimus odio quia iste et. Nostrum asperiores ex corporis quo a unde ea.\n\nSuscipit amet reprehenderit tenetur ut incidunt. Esse temporibus repellendus qui ipsum. Et id cum aperiam explicabo aliquid laudantium quia adipisci. Voluptas iusto reiciendis necessitatibus sit.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("c19f04b9-55af-40ab-9388-57af87b2e7a7")
                        },
                        new
                        {
                            Id = new Guid("b2a39f1a-b60b-4f0e-af27-82886d305e57"),
                            Content = "Maiores quis impedit. Omnis hic quia voluptatem commodi repellendus minus. Est doloremque quos. Et culpa rem. Dolor aliquam occaecati est. Ipsum nam sapiente iusto.\n\nEt quos culpa et. Quam eveniet officiis adipisci illo rerum et temporibus. Consectetur alias corporis voluptas alias nulla. Velit dolor hic necessitatibus quos harum officiis et. Reiciendis voluptatem voluptatem sunt. Consequuntur dolor qui quia consequatur officia placeat maxime.\n\nNihil deserunt molestiae distinctio velit dolores iste et commodi. Dolorum fugit dolores dignissimos maiores. Beatae et velit. Possimus in provident vel.\n\nCupiditate reprehenderit vero ipsa. Facere placeat et recusandae. Incidunt qui saepe. Sequi aut dicta sit perferendis.\n\nHic et et mollitia recusandae ut fugiat earum exercitationem est. Dolorum qui molestiae quidem molestiae rem molestias explicabo. Velit corrupti delectus. Et ipsa sapiente.\n\nConsectetur totam sit. Ab perferendis quas est optio suscipit vel voluptas id. Suscipit fuga voluptatem iure aperiam tenetur perferendis.\n\nA non molestiae possimus impedit id aliquid quibusdam velit. Impedit qui voluptatibus quas vero molestiae. Voluptas ea quaerat minus nulla. Rem quos inventore nemo. Autem eligendi aut harum molestias quis veniam numquam. Id ipsa maxime deserunt et aut dolor culpa.\n\nEt quia id eos. Tenetur laudantium autem quo. Quo quisquam et. Rerum quidem provident consectetur quae. Voluptatem itaque ea ea eaque ullam officiis.\n\nQuaerat quas qui sunt architecto sint. Tenetur dolorem praesentium fugit dolores. Quia voluptatem nostrum. Corrupti ab vitae harum id repudiandae voluptatibus. Odio laborum in fugit aspernatur exercitationem blanditiis quia quasi.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("c19f04b9-55af-40ab-9388-57af87b2e7a7")
                        },
                        new
                        {
                            Id = new Guid("c1e98e1a-b8ec-4d9d-a5e4-0f5402863f2d"),
                            Content = "Ad incidunt odit eveniet et voluptatum a labore. Eveniet assumenda in consequatur voluptas porro odio sint explicabo placeat. Perspiciatis reiciendis similique blanditiis voluptas consequatur quaerat.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("d8fe95ef-1b31-404e-990a-556f690ed2a4")
                        },
                        new
                        {
                            Id = new Guid("a27c0532-92c5-4b39-a897-bd2ce00f2c6f"),
                            Content = "Voluptatem a itaque laboriosam mollitia aliquam eos perspiciatis. Debitis incidunt sit quidem quasi qui voluptate iusto eum. Ipsa deserunt vel labore eius. Natus eum sint et veritatis explicabo unde. Aut et officiis placeat. Rerum eum est doloribus.\n\nEt blanditiis velit et voluptatem autem. Voluptatem modi quibusdam doloribus voluptatem odit ut cupiditate unde. Architecto delectus eligendi dolores occaecati aspernatur. Molestiae voluptatem non molestias enim doloribus explicabo corporis id.\n\nSunt et natus. Et vero consectetur quis veritatis. Consequatur incidunt et consequatur nemo dolorem.\n\nVelit perspiciatis nesciunt voluptate velit ratione itaque perspiciatis. Aspernatur neque aut nobis iste voluptatem ex. Voluptatem unde libero rem aut. Enim saepe excepturi veritatis voluptatibus. Ullam occaecati perspiciatis illum dolor ut eius qui.\n\nVoluptas ullam deleniti nobis quis et similique voluptatem. Voluptate et dolor non. Nihil optio est dicta ducimus qui consequuntur sit velit.\n\nConsectetur aut dolorem rerum. Eaque et eveniet doloremque deleniti maxime aliquid et a non. Soluta deserunt inventore sunt commodi consectetur.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("d8fe95ef-1b31-404e-990a-556f690ed2a4")
                        },
                        new
                        {
                            Id = new Guid("9821227c-5345-41a5-b6ad-7e636a9b2b1c"),
                            Content = "Quia odit illo qui qui quia adipisci laboriosam. Assumenda commodi magni quis provident rerum hic accusamus voluptas. Natus enim quo expedita eveniet. Explicabo odit sequi qui voluptatem.\n\nSed quas perspiciatis et velit. Ipsum placeat nostrum cupiditate sint. Rerum exercitationem nam. Provident quos vel voluptatem sit aliquam. Deserunt vel porro odio rem impedit quia accusantium ipsam sapiente. Inventore perferendis laboriosam ullam ut dolor quis cum maiores placeat.\n\nConsequatur distinctio numquam recusandae. Sequi omnis ipsa. Debitis nam eveniet corrupti quod. Est et dolorem et inventore architecto iste rerum perferendis quo. Odit sed quidem voluptate tempora sunt.\n\nSit sit magnam repellat. Ab sed autem. Voluptas laborum totam sed officiis quasi consectetur consequatur.\n\nSit et soluta doloremque maiores minus eum. Occaecati blanditiis delectus excepturi qui sed. Facilis nam nesciunt aut commodi quod ab officiis fugit. Ut enim delectus. Corrupti ipsum qui et dolorum saepe laboriosam dolor reprehenderit.\n\nAt odit natus aut. Magni voluptatem et voluptate omnis odit. Aut et dolores repellat.\n\nQuae cupiditate beatae eos est voluptatem. Et voluptates eaque. Reiciendis rerum quam voluptates laudantium dignissimos. Autem inventore eos sunt occaecati reprehenderit nisi nemo et voluptatem. Odio sed incidunt laudantium expedita quis eligendi enim enim et. Dignissimos culpa hic cumque in.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("d8fe95ef-1b31-404e-990a-556f690ed2a4")
                        },
                        new
                        {
                            Id = new Guid("846abb6a-adb7-45ee-b850-9e27afb0849c"),
                            Content = "Autem id impedit molestiae vero nesciunt. Qui assumenda dignissimos. Quam et suscipit qui. Sit ut aut suscipit labore error rerum voluptatem voluptate facere.\n\nNobis eligendi consequatur omnis ut dolorem exercitationem eum. Et atque qui rem explicabo libero eaque occaecati. Minima labore repellendus nihil repudiandae aliquam dolorum unde ut distinctio. Necessitatibus in sed veniam ut.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("d8fe95ef-1b31-404e-990a-556f690ed2a4")
                        },
                        new
                        {
                            Id = new Guid("00ec6c8d-8632-449a-b9d9-2dab8d597e57"),
                            Content = "Iusto quod similique ad debitis ducimus qui reprehenderit quam. Nobis voluptas sint. Placeat porro ad ipsam in molestiae. Laborum consectetur quia mollitia sed sequi tempora repellat ea.\n\nEt deleniti vel voluptates earum maxime aut temporibus sint velit. Omnis et minus aut maiores rerum alias. Modi in est omnis ad ut ut quae rerum. Consequatur ullam vero incidunt ducimus quod aliquid eum maiores est.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("d8fe95ef-1b31-404e-990a-556f690ed2a4")
                        },
                        new
                        {
                            Id = new Guid("1bfaf53d-0130-4713-a132-1045e6b72f3d"),
                            Content = "Eveniet maiores sunt autem. Est atque quam. Quas quia facere quisquam ratione ut aliquid est corporis. Voluptatem fugit aspernatur quia perspiciatis repudiandae cupiditate quia sint accusantium.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("d8fe95ef-1b31-404e-990a-556f690ed2a4")
                        },
                        new
                        {
                            Id = new Guid("e849bed8-972e-4c8e-bc8f-61f46ff292d6"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("d661ab2f-5d63-40bc-8522-1c4b92ef4cd9")
                        },
                        new
                        {
                            Id = new Guid("b59a74e2-6f6c-4715-b26d-229c3f5cae1c"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("d661ab2f-5d63-40bc-8522-1c4b92ef4cd9")
                        },
                        new
                        {
                            Id = new Guid("0805951f-90b1-457b-85ef-7c8f39996d88"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("c144326f-b151-4ebd-a6ff-87b0def3f30b")
                        },
                        new
                        {
                            Id = new Guid("852ac18a-7c71-4317-b502-344d01edceab"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("c144326f-b151-4ebd-a6ff-87b0def3f30b")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("c19f04b9-55af-40ab-9388-57af87b2e7a7"),
                            CategoryId = new Guid("21e251a9-4a74-4bf5-9f3c-5814284bacb0"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 12, 25, 15, 911, DateTimeKind.Local).AddTicks(6339),
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("d8fe95ef-1b31-404e-990a-556f690ed2a4"),
                            CategoryId = new Guid("847a5a61-63c4-40eb-825e-a598d14e85d1"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 12, 25, 15, 911, DateTimeKind.Local).AddTicks(6383),
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d661ab2f-5d63-40bc-8522-1c4b92ef4cd9"),
                            CategoryId = new Guid("c87ac71d-1af4-4635-9c34-def734e10438"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 12, 25, 15, 911, DateTimeKind.Local).AddTicks(6524),
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("c144326f-b151-4ebd-a6ff-87b0def3f30b"),
                            CategoryId = new Guid("7dc38e0a-0767-49f8-bea2-95051f0fbaed"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 12, 25, 15, 911, DateTimeKind.Local).AddTicks(6528),
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("c19f04b9-55af-40ab-9388-57af87b2e7a7")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumComment", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumPost", "ForumPost")
                        .WithMany("Comments")
                        .HasForeignKey("ForumPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ForumModels.ForumComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplyToCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumPost");

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumTopic", "ForumTopic")
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ForumTopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.Category", "Category")
                        .WithMany("WikiPages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Navigation("WikiPages");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Navigation("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
