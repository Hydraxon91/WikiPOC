// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240514115253_AddForumcommentModel2")]
    partial class AddForumcommentModel2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("432d1f6b-c4ea-41d3-818b-ac1c8b778279"),
                            CategoryName = "Characters"
                        },
                        new
                        {
                            Id = new Guid("b219656b-46d4-4c4b-a151-4f4e2cea2947"),
                            CategoryName = "Stories"
                        },
                        new
                        {
                            Id = new Guid("4f47ed28-8451-43ff-aa15-a029b11d0046"),
                            CategoryName = "Locations"
                        },
                        new
                        {
                            Id = new Guid("75b44cd4-1af2-46c8-a6ab-9eb5cb11b430"),
                            CategoryName = "Events"
                        },
                        new
                        {
                            Id = new Guid("5f3de8fc-c5bb-4566-9485-7c1f14f0115b"),
                            CategoryName = "Organizations"
                        },
                        new
                        {
                            Id = new Guid("5a1c0781-6844-44de-a6a3-14f25f271744"),
                            CategoryName = "Concepts"
                        },
                        new
                        {
                            Id = new Guid("100c5552-cb69-4f07-8873-ea6db4b2b818"),
                            CategoryName = "Technologies"
                        },
                        new
                        {
                            Id = new Guid("9e2baedd-2d5c-40c3-ad3d-24af13fe02b9"),
                            CategoryName = "Arts and Entertainment"
                        },
                        new
                        {
                            Id = new Guid("0bfa32f7-1e80-4071-a187-a2ff9f347f2f"),
                            CategoryName = "Sports and Recreation"
                        },
                        new
                        {
                            Id = new Guid("6d68349e-4be3-4248-9065-806001724cc8"),
                            CategoryName = "Science and Technology"
                        },
                        new
                        {
                            Id = new Guid("794afeab-35f8-4c70-a539-eb332aa5c99f"),
                            CategoryName = "History and Culture"
                        },
                        new
                        {
                            Id = new Guid("22fce5ec-0b94-4f8a-856e-876492f2f801"),
                            CategoryName = "Food and Drink"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForumPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplyToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("ReplyToCommentId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ForumComments");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForumTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForumTopics");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ccbddc69-ee6e-4267-89c3-313057dc11f6"),
                            Content = "Modi pariatur quae nihil necessitatibus hic aut dolor quae odio. Tempore nobis aperiam quis nobis. Autem est modi nemo est. Sed ex eaque tenetur earum et vero sequi voluptas delectus.\n\nAut magni vitae doloremque tenetur. Et odio dolores explicabo vitae rerum cum. Maxime autem voluptatem sint autem ut. Sit eum voluptatibus eligendi sint at minus.\n\nEa cumque animi et molestiae harum nihil expedita quia. Aut voluptatum rerum odio ex sed et quo. Doloribus perferendis delectus ratione deserunt. Atque dolorem nobis. Et molestiae enim ea sapiente deleniti.\n\nPariatur unde enim aperiam. Dolores culpa et eum dolores numquam nulla et dicta. Iusto voluptatibus est. Nam in occaecati nemo ut ut deserunt sequi. Deserunt amet non neque nihil impedit.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("d29cb33b-857d-454d-88c3-6d1cbbe1245f")
                        },
                        new
                        {
                            Id = new Guid("78cfd652-f4e5-455d-820c-54ad29f213f2"),
                            Content = "Tempore modi doloremque molestias qui est voluptas. Atque nihil et autem quisquam. Et dicta quo error minus. Omnis quo reiciendis vitae veritatis velit quisquam culpa possimus voluptates. Dolor blanditiis quaerat est.\n\nQuaerat maxime delectus veritatis tempore accusamus. Suscipit libero qui quis est nam porro est. Id nesciunt quidem dolores dolor repellat modi rem deserunt. Cumque accusamus ratione. Est voluptate laborum natus est sed.\n\nLaborum est sit iure excepturi nemo. Non consequatur ab dicta quia harum distinctio totam corporis non. Possimus voluptatem dignissimos quas voluptatem consectetur voluptas placeat.\n\nEum sit officia. Et unde eveniet magnam cupiditate. Quos ab labore id dolore id commodi non. Et nemo molestias natus eligendi.\n\nCumque quis in dolorem ab rerum quia saepe molestias quia. Autem sed voluptatibus. Vel praesentium molestiae voluptatem eum quaerat eius. Voluptas cupiditate quas aspernatur voluptates nisi atque qui excepturi. Est est est magnam. Ad voluptatum consequatur magni est laudantium itaque.\n\nProvident voluptas sint ab tenetur sapiente dolorum sunt in. Iure modi explicabo necessitatibus illo provident dolorum deleniti libero non. Dolores dolorum modi ipsum veniam id.\n\nDeserunt fugit magni debitis et sed. Laudantium aut tempore adipisci reprehenderit provident. Dolorem id animi odit. Repellendus est facilis recusandae officiis commodi est.\n\nQuibusdam qui sint ullam repellendus dolorem atque quisquam laudantium. Corrupti odio voluptas qui alias dolores consequatur excepturi consequuntur iure. Quidem repudiandae iusto perspiciatis. Adipisci sit minima soluta ea accusantium. Commodi rerum similique. Assumenda fugiat et molestiae mollitia est nisi hic illum adipisci.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("d29cb33b-857d-454d-88c3-6d1cbbe1245f")
                        },
                        new
                        {
                            Id = new Guid("e04c587a-535f-46df-9722-cd1a30337839"),
                            Content = "Id totam nemo corporis sit fugiat et aperiam est. Iure ipsum ex quo rerum quia. Laborum consequatur natus. Est ex ducimus perferendis impedit. Voluptates minus temporibus. Consequatur quia earum.\n\nOfficia consequatur temporibus quod inventore quas at ipsam. Rerum voluptatem eum odio eveniet necessitatibus doloribus. Veritatis omnis quia dignissimos. Et et sapiente. Sint nulla suscipit reprehenderit labore fugiat non adipisci et sint.\n\nQuas incidunt labore recusandae ut aspernatur quos corrupti saepe. Id eveniet quasi. Similique recusandae praesentium facilis velit veritatis quas amet.\n\nEt veniam sunt sit consequuntur odio. Enim perferendis repellendus laboriosam fugiat ut fugiat. Rem totam culpa.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("d29cb33b-857d-454d-88c3-6d1cbbe1245f")
                        },
                        new
                        {
                            Id = new Guid("afca9c5f-0194-4ae1-97f2-aec878e71ee8"),
                            Content = "Consequatur et laboriosam asperiores aut cum sunt. Nihil laboriosam aut autem. Et dolore voluptatem inventore fugit aliquam ex et. Minima in voluptas vel placeat vitae voluptatem similique aliquid vitae. Ab voluptas doloremque autem ullam tenetur. Mollitia nihil repudiandae.\n\nRerum expedita architecto ex distinctio vel quia quos molestiae qui. Magnam quae id voluptatem quae adipisci. Molestiae vero consequuntur consequatur porro dolorum amet molestiae. Consequuntur inventore recusandae quis modi eveniet delectus. Inventore reiciendis sapiente id et amet rerum veritatis dolor. Delectus et est est non et.\n\nIncidunt alias enim consequuntur sequi. Similique est aut ut. Tempora quibusdam ut officia facere exercitationem vero qui minus. Et minima aperiam architecto. Beatae explicabo ex. Modi ullam accusantium aliquid.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("d29cb33b-857d-454d-88c3-6d1cbbe1245f")
                        },
                        new
                        {
                            Id = new Guid("8b62fbd0-9a76-4547-b1a6-cc3fff9fa313"),
                            Content = "A est molestiae nihil quidem. Vitae quia fugit consectetur aut. Voluptas nihil eum facere nesciunt ea quod qui animi. Voluptatem animi facere possimus neque inventore eius temporibus. Maxime soluta eaque vero. Omnis sed voluptatum esse corrupti harum voluptas ea.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("d29cb33b-857d-454d-88c3-6d1cbbe1245f")
                        },
                        new
                        {
                            Id = new Guid("f8ee178b-0636-4147-bdb9-b8157c05f319"),
                            Content = "In optio asperiores totam sit nihil sint voluptatum optio laudantium. Voluptatem nulla officiis unde voluptas odio. Ratione laboriosam quo voluptatum qui. Earum quis cum commodi similique distinctio nemo eum atque doloribus. Omnis sed excepturi quas nulla ut et debitis sed.\n\nDucimus officia nemo quasi sint esse beatae rerum. Consequatur voluptas voluptate accusamus. Non voluptatem non qui voluptas sed qui fuga reprehenderit vitae.\n\nNeque eos reiciendis quis repellat totam recusandae sint qui. Iusto quam voluptate et eius. Quis iusto quia cum accusamus et minus quos delectus rerum. Culpa veritatis est similique accusantium ducimus officia ut. Maiores fugit deserunt nemo a aspernatur molestiae eum iusto quod.\n\nCupiditate libero placeat error. Error debitis architecto sed. Et est omnis. Sed consequatur dolorem commodi. Voluptas at quo expedita eius provident placeat et sunt.\n\nConsequatur libero dicta eligendi optio culpa. Autem at accusantium voluptas voluptatibus. Quos deserunt exercitationem quasi nam eaque dicta qui laudantium omnis. Provident non perspiciatis officia omnis aut velit id voluptatum. Qui nam culpa officia possimus.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("d29cb33b-857d-454d-88c3-6d1cbbe1245f")
                        },
                        new
                        {
                            Id = new Guid("523a9f2b-3b4d-4a1f-9f50-b7abcda4d6cd"),
                            Content = "Recusandae beatae vel sapiente molestiae vero. Rem a qui aut eveniet consequatur. Autem consequatur esse consequatur.\n\nAut magni expedita rerum voluptatem commodi qui adipisci deserunt. Sit iure dolores est asperiores omnis ducimus tempore dolor voluptatem. Omnis maxime cupiditate exercitationem rem nam incidunt. Adipisci necessitatibus velit ut quae sed cumque consequatur rerum id. Aut incidunt est delectus rerum numquam sequi reprehenderit.\n\nQuis aspernatur officia id harum laborum autem atque vel. Voluptatibus vitae dolores vero eveniet numquam qui dicta necessitatibus. Omnis et dolorem. Laudantium cumque aut necessitatibus quo velit. Nobis excepturi est.\n\nNam error qui excepturi quo totam consequatur minima. Placeat qui officia quidem expedita laborum odit. Iure tempora quia ratione distinctio. Voluptates cum ullam est expedita sequi in.\n\nQuia nostrum tempore velit nobis voluptas vero ut quia quaerat. Qui dignissimos laudantium dolore. Unde enim fugiat ipsum asperiores totam aperiam in quo veritatis. Id nostrum accusantium mollitia. Optio maiores repudiandae eos quae minus. Odio tempora quis quis commodi fugiat aut consectetur.\n\nAccusantium qui qui enim vel eos debitis. Eligendi beatae nesciunt accusantium voluptatum voluptas est necessitatibus consequuntur voluptatem. Error beatae praesentium debitis minima quod.\n\nQuas autem quas atque non sed reiciendis sed ipsa architecto. Sunt inventore dolores. Veritatis praesentium reprehenderit minima praesentium ipsam sit. Sit temporibus nesciunt enim et totam dicta dolor minima. Sunt culpa ipsum ducimus id.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("3e46d808-4abd-495a-ae7f-554bc82cb3da")
                        },
                        new
                        {
                            Id = new Guid("58d281a1-8517-4c2d-ba96-57b0afa9fb2f"),
                            Content = "Labore soluta doloribus rerum numquam inventore est et natus voluptas. Et harum porro eos a saepe aspernatur laborum explicabo. Sunt ipsa non minima illo dolor. Doloribus est eligendi provident excepturi et. Amet et deserunt et dolor corrupti et vero. Eligendi voluptates vero repellendus laborum repellat rerum perspiciatis voluptate ut.\n\nAutem quo cum expedita eveniet dicta qui. Enim consequatur suscipit alias ullam velit et nostrum dolorem. Eos ratione enim natus.\n\nDistinctio excepturi quas eum est maiores eligendi qui reprehenderit. Sint ex accusamus dolores ut tenetur. Magnam laboriosam dicta rerum. Atque quae debitis laboriosam ut est molestias id. Molestias minima ipsum laborum similique voluptatem deserunt ipsa et. Dolore modi nihil reprehenderit officia nesciunt in repudiandae.\n\nIste est laboriosam dolorem aut sunt et. Et accusantium tenetur iusto qui provident culpa harum ab. Nesciunt eius qui sequi quia et voluptatum laboriosam vel repellendus. Voluptatum quis rem. Voluptates eius culpa est dolorem assumenda in.\n\nEt aperiam vel blanditiis nihil est. Corporis iure autem. In vel aspernatur recusandae. Magnam quis fuga. Iste sed quos pariatur recusandae placeat quia dolores voluptatem. At molestiae voluptatibus.\n\nSaepe perferendis animi cum nemo ratione laborum maiores sint. Autem sint nisi illo pariatur et nobis. Facere ea quasi. Qui neque consectetur qui totam dolorum a deserunt numquam. Nihil aut commodi omnis. Aut laboriosam ad quaerat placeat.\n\nCommodi facilis officia. Reprehenderit eaque voluptatum dolores. Quia ab harum iusto dolor nemo. Deserunt voluptatem voluptatem eos. Minus soluta doloremque aut doloribus quos.\n\nAperiam eveniet sapiente non. Dolorem hic id voluptatem libero rerum cumque qui. Eius quibusdam similique delectus in ea eos quis. Sint incidunt et at id.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("3e46d808-4abd-495a-ae7f-554bc82cb3da")
                        },
                        new
                        {
                            Id = new Guid("0b8b81de-b30c-4a8d-8807-e0e73c349b06"),
                            Content = "Quia nulla beatae tempora molestiae voluptatem laudantium. Sint vel amet delectus esse quia quae culpa. Quod aut vero quos laboriosam dignissimos.\n\nId iste fugiat numquam illo est aliquid et voluptatibus atque. Hic doloremque esse qui eos placeat quia id sit. Maiores necessitatibus minus suscipit maiores et. Et quod velit. Distinctio adipisci labore vel consectetur ipsa illum saepe.\n\nRerum inventore ducimus ab voluptatem consequatur qui. Qui possimus iste voluptatem fuga at eos nulla. Veniam consectetur fuga fugit. Nisi unde libero non. Incidunt rerum id in qui tenetur consequatur tempore. Et illum totam et quidem molestiae officiis fuga dolorem.\n\nEt autem voluptatem. Atque similique provident. Velit consequatur nemo non voluptas natus enim praesentium exercitationem rem. Blanditiis sequi dolorem sint cum esse ipsum. Architecto voluptas laudantium laborum explicabo consequatur ipsum ipsam rerum.\n\nAsperiores sit recusandae sint illum. Voluptas dicta omnis totam esse sequi quam deleniti. Ut culpa et et dicta dolore eveniet atque suscipit et. Necessitatibus odio accusantium doloremque libero quos facilis ea. Possimus minus natus blanditiis perferendis rerum.\n\nEt aut voluptatem reprehenderit vitae sapiente sequi numquam. Velit occaecati nobis esse est. Fugiat est est corrupti. Eum expedita rem fugit sed aspernatur.\n\nOdit occaecati soluta tempora assumenda vero sapiente dolorem. Nihil eaque maxime et qui odit. Omnis libero blanditiis vitae ut nulla vero. Aut harum exercitationem quis ut voluptate repellendus laboriosam ullam. Numquam soluta nostrum et nihil. Perferendis ullam rem reprehenderit.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("3e46d808-4abd-495a-ae7f-554bc82cb3da")
                        },
                        new
                        {
                            Id = new Guid("e18e536e-d1aa-4c28-a8c2-6b9344286be0"),
                            Content = "Sit optio architecto ducimus ut beatae a. Nam non iusto quo qui illo magnam qui error. Vel sit facere quis maiores quis labore non tempore in. Assumenda consequuntur voluptatem sunt autem et fuga sit. Qui consectetur hic ex id tenetur vitae et.\n\nDebitis quisquam officia sint amet. Quo voluptatibus ea ut minus occaecati est. Aperiam qui repudiandae cum porro. Dolor magnam nisi similique laboriosam. Et in iste aliquid aspernatur.\n\nQuas voluptas odit minus eaque a illo numquam occaecati delectus. Ut enim cumque ex consequatur sunt autem voluptatem. Velit sunt omnis sed inventore. Sint nostrum reprehenderit. Est deleniti incidunt facilis dicta.\n\nMolestiae tenetur error. Doloremque sed quisquam assumenda delectus perferendis voluptatem ratione qui architecto. Dolor in quam quis doloribus non laudantium in porro. Autem qui molestiae. Ab minima laborum ut ut aliquid et explicabo et. Expedita porro corrupti quaerat doloremque adipisci animi.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("3e46d808-4abd-495a-ae7f-554bc82cb3da")
                        },
                        new
                        {
                            Id = new Guid("20fc12b6-1673-4547-a7a9-328795c01ff4"),
                            Content = "Nihil praesentium dolor. Illum tempora sit atque. Ipsa voluptatem ut eligendi velit incidunt quia ut est dolorem.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("3e46d808-4abd-495a-ae7f-554bc82cb3da")
                        },
                        new
                        {
                            Id = new Guid("68bcb6b4-e3b6-4199-af2f-f3a4ec04613c"),
                            Content = "Error velit quis. Exercitationem eveniet blanditiis ducimus est et. Tempore perspiciatis voluptas. Ex vero provident nulla sapiente. Sit cupiditate voluptates adipisci aut explicabo magnam.\n\nDolor illum vitae quam. Eum nisi enim minus. Dolorem eaque possimus.\n\nIllum reiciendis laboriosam id illum repellat id et reiciendis quod. Aliquid dolorem et esse explicabo et qui minima. Voluptatem maiores ipsam ut aut voluptatem. Magnam numquam suscipit laudantium magnam iusto voluptate. Mollitia natus aspernatur. Est est voluptatem rerum dignissimos unde ut aut.\n\nDolorem enim natus debitis. Officia facilis possimus nobis odit nostrum. Minima suscipit nam quo et reprehenderit iusto autem sed vel.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("3e46d808-4abd-495a-ae7f-554bc82cb3da")
                        },
                        new
                        {
                            Id = new Guid("23aa4115-53dd-422f-84c4-c2114be51fea"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("6d286c60-8d03-4ef7-8b1a-47aa9f73772c")
                        },
                        new
                        {
                            Id = new Guid("74d781aa-e4a5-4900-984e-36de00afd696"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("6d286c60-8d03-4ef7-8b1a-47aa9f73772c")
                        },
                        new
                        {
                            Id = new Guid("6379b70d-ce6d-4fe3-a19c-4a5c0d5edfb9"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("0f366336-96a8-4f47-aa1e-63eec29e78e5")
                        },
                        new
                        {
                            Id = new Guid("b3c50bfb-4481-4976-bbc7-9387c6c038d7"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("0f366336-96a8-4f47-aa1e-63eec29e78e5")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("d29cb33b-857d-454d-88c3-6d1cbbe1245f"),
                            CategoryId = new Guid("432d1f6b-c4ea-41d3-818b-ac1c8b778279"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 13, 52, 53, 562, DateTimeKind.Local).AddTicks(213),
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("3e46d808-4abd-495a-ae7f-554bc82cb3da"),
                            CategoryId = new Guid("b219656b-46d4-4c4b-a151-4f4e2cea2947"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 13, 52, 53, 562, DateTimeKind.Local).AddTicks(251),
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d286c60-8d03-4ef7-8b1a-47aa9f73772c"),
                            CategoryId = new Guid("4f47ed28-8451-43ff-aa15-a029b11d0046"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 13, 52, 53, 562, DateTimeKind.Local).AddTicks(383),
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("0f366336-96a8-4f47-aa1e-63eec29e78e5"),
                            CategoryId = new Guid("75b44cd4-1af2-46c8-a6ab-9eb5cb11b430"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 14, 13, 52, 53, 562, DateTimeKind.Local).AddTicks(387),
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("d29cb33b-857d-454d-88c3-6d1cbbe1245f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumComment", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumPost", "ForumPost")
                        .WithMany("Comments")
                        .HasForeignKey("ForumPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ForumModels.ForumComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplyToCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumPost");

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumTopic", "ForumTopic")
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ForumTopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.Category", "Category")
                        .WithMany("WikiPages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Navigation("WikiPages");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Navigation("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
