// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240508163908_UpdateForumTopicForumPostRelation1")]
    partial class UpdateForumTopicForumPostRelation1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43329eee-5de2-4496-a5bf-fe1526ba3123"),
                            CategoryName = "Characters"
                        },
                        new
                        {
                            Id = new Guid("b07e2a52-343e-456b-9725-be5ccf03455b"),
                            CategoryName = "Stories"
                        },
                        new
                        {
                            Id = new Guid("b0ccbf57-ba42-4b41-9793-05735bd43443"),
                            CategoryName = "Locations"
                        },
                        new
                        {
                            Id = new Guid("7f378b51-0ae5-4a96-9a46-13bc361b5e5f"),
                            CategoryName = "Events"
                        },
                        new
                        {
                            Id = new Guid("e14b77d1-0b48-447a-b097-775f0a7be345"),
                            CategoryName = "Organizations"
                        },
                        new
                        {
                            Id = new Guid("2bde6020-3574-42d4-924e-8865d8410466"),
                            CategoryName = "Concepts"
                        },
                        new
                        {
                            Id = new Guid("22806e2b-8b0e-4174-8cd8-150c629f712e"),
                            CategoryName = "Technologies"
                        },
                        new
                        {
                            Id = new Guid("520d0d08-864a-4d0c-83b8-744e3ce41917"),
                            CategoryName = "Arts and Entertainment"
                        },
                        new
                        {
                            Id = new Guid("08580574-1ccc-4d93-b8b1-e99841ee1222"),
                            CategoryName = "Sports and Recreation"
                        },
                        new
                        {
                            Id = new Guid("1800909e-b5ce-4a77-8c7a-24afe7c966a5"),
                            CategoryName = "Science and Technology"
                        },
                        new
                        {
                            Id = new Guid("51b8cbd6-53fa-407b-8f11-b2fa48348735"),
                            CategoryName = "History and Culture"
                        },
                        new
                        {
                            Id = new Guid("d91e8ef3-2e1d-4989-9c01-b7f1f29730f3"),
                            CategoryName = "Food and Drink"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForumTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ForumTopicId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("ForumTopicId1");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForumTopics");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ae42a7c-ec6d-4adb-a7dd-78c784abf689"),
                            Content = "Ut consequuntur suscipit architecto. Est occaecati dolor eos veniam vero non. Sed id autem. Quidem voluptate et in ut modi fuga natus. Excepturi corporis dolorem sit sit officiis laudantium rerum laborum.\n\nFuga aut placeat velit totam amet. Tenetur quo omnis vel aspernatur doloribus ab harum. Eligendi amet et. Nemo quaerat et sed nisi enim enim.\n\nNihil maiores distinctio numquam quas. Ut quisquam consequatur nesciunt qui dicta veniam maxime. Qui voluptates voluptas est aut sed dolores praesentium.\n\nUt aperiam eveniet est necessitatibus eum. Quia hic itaque vero odit asperiores atque fugit commodi. Molestiae sed et repellendus voluptatum molestiae. Ut error cum et accusamus magnam labore voluptatibus cum. At dolorem necessitatibus eos ipsam velit dolore culpa. Quibusdam eos minus assumenda.\n\nEos reprehenderit enim ea rem repellendus aut voluptas beatae. Saepe harum provident voluptate. Aut qui quo quia omnis. Et saepe et nulla et culpa et modi optio rem. Voluptatem blanditiis qui similique rerum.\n\nQui distinctio porro fuga vitae omnis ut et eius alias. Omnis ut suscipit sit suscipit doloremque asperiores necessitatibus odit. Tempora at molestias quo vero officia voluptates quam commodi.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("e4842b42-7458-4a16-acb6-5ca062e4ed7b")
                        },
                        new
                        {
                            Id = new Guid("8165c1d0-8928-46c5-8c9a-505a50e7d851"),
                            Content = "Et aut officiis accusamus architecto. Impedit id dolorem. Nihil ut vero voluptate. Enim recusandae in ipsum et molestiae magnam.\n\nEaque dolorum aliquam occaecati alias qui et. Ut fugit omnis. Aut sunt amet omnis et debitis facere velit ut. Est non velit quibusdam est sequi doloribus quae accusamus. Enim hic laboriosam reprehenderit nostrum et et.\n\nAut officia dicta rem quos saepe iste omnis aspernatur eaque. Id at totam qui libero facere temporibus est molestiae amet. Delectus consequuntur ipsa. Non aut possimus. Vero aliquid non excepturi nam est rerum et consequatur. Est voluptatum dolorem non illum consequatur similique quo voluptatem.\n\nSapiente delectus dignissimos earum est occaecati consequatur enim cum qui. Minus voluptatem harum dolore nam. Nulla in omnis non autem fugiat et optio.\n\nOptio eum sint dolorem. Sed sequi ratione aut sunt quas quia quas. Quibusdam est laudantium alias ad harum laborum nesciunt ullam maiores. Aut exercitationem delectus autem voluptatem nihil error cum. Culpa et iusto dolores commodi quasi eos ea eos. Dignissimos reprehenderit voluptates reprehenderit.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("e4842b42-7458-4a16-acb6-5ca062e4ed7b")
                        },
                        new
                        {
                            Id = new Guid("42239ab1-8da4-45ea-9716-849b6bd59836"),
                            Content = "Unde deserunt aut fuga facere esse sed ipsa itaque omnis. Et blanditiis repellat. Quae numquam hic quae rem qui voluptas animi dolorem. Est aut facere.\n\nCommodi consectetur totam distinctio autem repellat error porro. Voluptatem nihil quia. Earum voluptate quos eos vitae ut qui. Dignissimos neque necessitatibus. Et distinctio corporis fugiat voluptatem.\n\nVoluptatem vel quo error. Ut sint delectus debitis expedita cum vel perspiciatis libero repudiandae. Accusantium delectus totam recusandae quo distinctio velit. Rerum doloremque voluptatem qui nam quas excepturi quam. Quos esse autem mollitia doloribus. Quidem totam tempore.\n\nHic minima assumenda dolorum sint eos qui autem laudantium. Enim et veniam nobis quo sunt. Consequatur qui molestiae. Nobis ullam omnis quia officiis sed. Minima harum sequi rerum nostrum maxime repellendus modi amet.\n\nPraesentium iste possimus autem dolore soluta ut. Temporibus corporis saepe autem amet et harum. Accusantium vero nihil. Fugiat qui similique tempora voluptates non. Quaerat officia quia ducimus aspernatur nostrum aut sed.\n\nCulpa nihil consequatur. Dolore aut itaque quas eos voluptate quia. Sit facere fuga et porro aut eius esse quis. Nihil id dolores facilis voluptatem nihil. Voluptas id velit explicabo pariatur cum ex sit. Sit quisquam doloribus minima voluptatem.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("e4842b42-7458-4a16-acb6-5ca062e4ed7b")
                        },
                        new
                        {
                            Id = new Guid("afc06326-50cd-4bce-933e-c5b74c3a6d1f"),
                            Content = "Et voluptatum voluptatum. Aut odit ipsa doloribus consequatur odit nobis fugit debitis et. Dolores architecto rerum. Modi quia labore. Quasi ipsam quo sequi.\n\nRecusandae iste aspernatur qui. Excepturi et odit et reprehenderit harum ducimus natus ex. At nobis asperiores vel. Ex quaerat ea veniam esse.\n\nUt assumenda vitae illum est est et est error. Ut enim quia earum molestiae quia sed modi vitae excepturi. Dolores minima possimus eum. Qui autem optio exercitationem reprehenderit culpa quod.\n\nDolorem omnis sunt dolore itaque qui voluptate quo quaerat. Sed nesciunt ipsam quia voluptatibus dolores ut. Quod dignissimos perferendis quaerat autem. Delectus sit modi dolor explicabo consequuntur et. Voluptas suscipit dolor inventore mollitia non molestiae qui.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("e4842b42-7458-4a16-acb6-5ca062e4ed7b")
                        },
                        new
                        {
                            Id = new Guid("7c95579f-987c-4eb6-9901-8e96bc36245e"),
                            Content = "Voluptatem blanditiis et laudantium voluptas et vitae nesciunt quasi. Omnis sed error reprehenderit velit dicta accusantium commodi earum. Dicta quam accusantium repudiandae non voluptas dolorem. Debitis est veniam quos odio maiores error ipsa. Velit omnis magni labore illo ut ut in.\n\nTotam repellat eum qui molestiae beatae non. Voluptates blanditiis voluptas ipsum voluptas facere architecto. Modi quo non quia ut consequatur ab aut. A dignissimos maiores et.\n\nQuibusdam fuga iure consequatur voluptas cumque vel. Quo assumenda inventore. Esse blanditiis voluptate nihil repellendus. Rerum debitis delectus et ea fuga ullam eligendi sunt tempore. Iste numquam sint repellat voluptate qui perferendis accusantium doloribus. Aliquid enim consequuntur.\n\nDistinctio quia alias labore. Quae dolores aperiam alias rem eos vel molestiae dolor. Dolores odit quia expedita corrupti suscipit aperiam labore at et. Provident voluptatem ea accusamus doloribus adipisci mollitia est. Architecto consequatur occaecati consequatur. Voluptatem eum sed amet.\n\nEa ipsa illum rerum ad architecto voluptas accusamus autem qui. Qui non cumque ut dolore omnis dolore reprehenderit a non. Culpa eveniet nostrum magnam amet ut corporis voluptatum qui.\n\nEum ut eum sint ea nisi vel. Deserunt rerum quisquam qui suscipit quibusdam recusandae. Inventore vero soluta eius.\n\nIpsum architecto dolorem ratione. Ex occaecati recusandae atque. Est sit est reiciendis perspiciatis consequatur saepe animi odio nam. Laboriosam eveniet beatae praesentium quas. Facilis facilis ducimus ut.\n\nArchitecto beatae consequatur aut necessitatibus rerum. Voluptatem dolores repellat corrupti ut totam commodi fuga omnis nostrum. Sit ut ipsum cumque sint dolorem.\n\nEt dolores et eos et unde culpa ut. Autem sint et blanditiis repellendus recusandae fuga. Qui ut nisi repudiandae. Nostrum labore et enim voluptatibus blanditiis provident ex. Quisquam veniam ducimus voluptate omnis ipsam autem odio.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("e4842b42-7458-4a16-acb6-5ca062e4ed7b")
                        },
                        new
                        {
                            Id = new Guid("ffa000db-19d3-42e4-9129-30b6db8cafc0"),
                            Content = "Placeat modi et. Distinctio vel fuga. Quam fugit eos. Aliquam voluptatem sunt.\n\nRepellat maiores nemo ut neque quae eos recusandae. Qui quia labore vel. Rerum aliquid deserunt rem et qui aut.\n\nAutem vel odit rerum. Aut et est beatae architecto dolor cumque. Cumque deserunt dolorem voluptatem non minus minus iusto aperiam odio.\n\nOfficiis dolor aut. Rerum magni qui adipisci fugiat ex consectetur sed sed eaque. Ut suscipit omnis repellendus enim corrupti magni ut. Eaque similique quae dolor.\n\nAccusantium doloremque exercitationem omnis asperiores voluptate est deleniti est. Labore blanditiis praesentium enim esse est rerum. Rerum est et est rerum. Sint pariatur dolorem facere et nihil molestiae error. Facere est nemo aliquid voluptatem ipsa molestias ullam. Eum quia sit eaque odio saepe expedita ratione totam debitis.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("e4842b42-7458-4a16-acb6-5ca062e4ed7b")
                        },
                        new
                        {
                            Id = new Guid("fa16a3a5-c9e6-47ce-84d6-9239a14df690"),
                            Content = "Aut non iusto adipisci animi ex architecto eum. Qui ullam accusantium sint adipisci in ducimus dicta. Voluptate iste accusamus labore doloremque.\n\nQuas ut earum qui odit. Veniam aperiam optio quaerat laudantium harum rerum soluta qui voluptatem. Eaque qui vel iusto omnis porro non ipsum. Id ut sed est omnis aperiam.\n\nRepudiandae quis quia doloremque expedita. Non quibusdam qui rem autem ipsam minus eveniet sunt ipsum. Dolorem voluptatum sapiente. Id vitae nulla. Animi ad aspernatur debitis est consequatur.\n\nMinima quis molestias porro. Cupiditate cupiditate voluptate quis est error. Est consequatur velit. Delectus qui explicabo laboriosam. Ut omnis ullam.\n\nMollitia qui tenetur deleniti ut. Iusto voluptas sit error neque et cupiditate. Facere quos sapiente eos mollitia est. Quam itaque tempora. Dolores eveniet provident ab ullam. Nulla et aut eum.\n\nEarum voluptate architecto voluptatibus dolorem eum consequatur ut rem. Dolorem omnis iste sint voluptate sequi harum alias deleniti. Ipsam magnam eum ducimus amet quas. Natus maiores aut natus odit. Id ducimus enim aliquam voluptatum. Ut sunt est illum nesciunt neque.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("aa149b37-54bc-4660-b3e6-15225f838045")
                        },
                        new
                        {
                            Id = new Guid("890669b8-6bed-4e76-9fb5-d5f54046a291"),
                            Content = "Beatae cum laboriosam ea exercitationem quas iure nihil non. Tempora consequatur delectus ullam accusamus. Reiciendis culpa et et magni nisi quos voluptates. Sit sunt voluptates dolores dolorem iure architecto dolore id.\n\nEx id quaerat quisquam et sit provident. Minima dolor voluptatum vitae ea adipisci labore. Voluptatibus recusandae ducimus unde. Eos delectus atque veniam adipisci a sequi sed.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("aa149b37-54bc-4660-b3e6-15225f838045")
                        },
                        new
                        {
                            Id = new Guid("5a33443a-2aeb-4cf5-9c56-b643260d59aa"),
                            Content = "Sapiente dolorum numquam provident molestiae incidunt sunt eum. Numquam quis odio. Repudiandae vero dicta ducimus repudiandae ut. Molestiae consequuntur qui ducimus dicta ex.\n\nEt dolores est numquam laborum aliquam nihil neque. Fugiat consequatur quam quia. Aut et ad aut. Unde rerum qui temporibus ea quos tempora aut consequatur.\n\nIste autem corporis esse exercitationem cumque. Rerum quisquam consectetur. Numquam accusamus excepturi.\n\nConsequuntur in et libero quod. Qui tenetur sit beatae voluptas ut possimus quis ea laudantium. Cumque in est officia. Ut sequi quia enim sequi.\n\nSit ex nostrum voluptate. Aut optio eum quo accusamus ipsa est nihil. Perspiciatis molestiae qui. Minima necessitatibus consectetur sed.\n\nQui quia nulla architecto. Quisquam laborum eos nisi fugit nihil quia. Culpa et error ad et non.\n\nIusto aut reiciendis magnam. Placeat numquam repudiandae et qui modi consectetur. Quibusdam est repellendus quidem iure labore. Rerum assumenda est. Rem pariatur voluptate omnis et consequatur. Molestias commodi consequatur.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("aa149b37-54bc-4660-b3e6-15225f838045")
                        },
                        new
                        {
                            Id = new Guid("9df870ee-73cb-4eed-9d59-ec8b687dc094"),
                            Content = "Illum eveniet ut incidunt eum est est nam. Est dolorem rerum est ea debitis dolor eos odit. Dolor ipsum iste soluta odit perferendis ea doloremque.\n\nVoluptas vel eius qui neque occaecati ut architecto et. Pariatur quae perspiciatis sapiente quo animi ratione. Reprehenderit rem culpa et et vel maxime asperiores animi possimus. Sed rerum ullam reprehenderit odio modi quibusdam. Impedit distinctio sunt qui deserunt ea deleniti.\n\nNesciunt eum nostrum consequatur culpa distinctio corrupti eligendi illo. Et velit officia dolorem in sed sed dolore debitis minus. Dolores est provident quo reiciendis laborum. Expedita vel possimus quis quia sit rem ut.\n\nNulla error ipsum animi ut tenetur quis debitis vel maiores. Aliquid aut magnam blanditiis numquam mollitia in ex. Laboriosam aut velit non cum recusandae vero voluptatem distinctio. Repellat assumenda et magnam ut et sed provident. Dignissimos sed sed asperiores molestiae.\n\nA amet nostrum non. Possimus quis exercitationem nihil odio. Et expedita ut quidem sequi iure.\n\nSit facilis iure quod quisquam nihil qui quos libero ut. Itaque est corporis id. Reiciendis est dolor ducimus autem magni.\n\nMinus a sint consequatur. Et odit perspiciatis occaecati tempore molestiae eos sed quos sit. Aliquam suscipit dolorum rerum omnis amet debitis ut cum. Nam sit voluptatum ad et consequuntur nisi sed eos. Qui rerum et nesciunt est et commodi et.\n\nDolorum quo enim dolores ut. Ipsam nostrum reiciendis reprehenderit porro maiores laboriosam. Voluptate reprehenderit repellat ipsam ratione doloremque et sit.\n\nQuidem voluptatum aut praesentium. Porro cumque quaerat numquam. Quia qui animi nostrum odio quidem mollitia culpa quis fuga.\n\nDucimus quia ipsum aut voluptate quisquam. Omnis animi natus sunt. Cupiditate deleniti soluta vitae recusandae non inventore enim quia laboriosam.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("aa149b37-54bc-4660-b3e6-15225f838045")
                        },
                        new
                        {
                            Id = new Guid("c301050d-2a1e-424b-b323-6d60d995769b"),
                            Content = "Necessitatibus ratione distinctio voluptatibus sit tempora dolor et nostrum. Ipsam dolorem iste at qui et perferendis recusandae. Sit magnam vel. Consequuntur placeat quod.\n\nEt esse dolorem sit voluptates. Tempora aliquid ut ut libero molestiae iure enim est possimus. In reprehenderit cupiditate ex molestias voluptas reiciendis. Tempore exercitationem error itaque quia eligendi consequatur velit. Et ratione illo corrupti et. Molestiae expedita et molestias hic consequatur necessitatibus et labore.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("aa149b37-54bc-4660-b3e6-15225f838045")
                        },
                        new
                        {
                            Id = new Guid("7554d1ed-e7f9-429f-8245-ef860825ad33"),
                            Content = "Ipsam fugiat quisquam. Ratione fugit tempore dolor veritatis et itaque qui est. Incidunt eius occaecati eius error soluta architecto. Sed quia voluptas rerum. Ut voluptatem voluptatem.\n\nVoluptatum autem sunt magnam non incidunt repellat. Eum ullam eum quidem dignissimos. Non ut quia optio aut cumque. Voluptatem animi voluptates culpa et excepturi. Qui ipsa quam dolorem nihil repudiandae et autem at dolore.\n\nMolestiae enim eos et laboriosam iste. Voluptatem et id quis libero. Maxime dignissimos voluptates eaque similique ipsa ut. Natus accusantium consequatur mollitia aut quasi deserunt nam ut fugiat. Qui iure qui eum officia est sunt ipsam iusto consectetur.\n\nVoluptatem et aliquam delectus similique molestiae fugit. Illum quis quia omnis voluptatem. Ex qui et sint nobis rem tempore quod. Deleniti deserunt sunt. Voluptatem a et a sequi at temporibus voluptatibus quia sequi.\n\nPerferendis ratione est et ad a id praesentium sint. Quis fugit velit. Veritatis neque facere ad eos dolore laborum occaecati. Eos et occaecati aut sed sequi in pariatur deleniti est. Ut modi praesentium vel expedita. Autem architecto numquam omnis.\n\nAccusantium odio et vel omnis adipisci optio cum illum enim. Aut alias eos debitis voluptatem iusto facilis perferendis. Molestias commodi porro quasi mollitia provident et adipisci totam.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("aa149b37-54bc-4660-b3e6-15225f838045")
                        },
                        new
                        {
                            Id = new Guid("24ba0646-ecec-417f-803b-971e263cdda2"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("41d61ac8-f9c0-4369-8f58-00bdf6a2f373")
                        },
                        new
                        {
                            Id = new Guid("29aae45c-995e-4df6-85ee-da4cddb289c0"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("41d61ac8-f9c0-4369-8f58-00bdf6a2f373")
                        },
                        new
                        {
                            Id = new Guid("a4807e66-b9a9-4254-b583-f992aa07cb28"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("237b187b-5964-4898-83f4-fecb399affb9")
                        },
                        new
                        {
                            Id = new Guid("3c5c7f49-7eb0-4f8b-b8c1-32061fe83f7d"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("237b187b-5964-4898-83f4-fecb399affb9")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ForumPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4842b42-7458-4a16-acb6-5ca062e4ed7b"),
                            CategoryId = new Guid("43329eee-5de2-4496-a5bf-fe1526ba3123"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 8, 18, 39, 8, 224, DateTimeKind.Local).AddTicks(5556),
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("aa149b37-54bc-4660-b3e6-15225f838045"),
                            CategoryId = new Guid("b07e2a52-343e-456b-9725-be5ccf03455b"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 8, 18, 39, 8, 224, DateTimeKind.Local).AddTicks(5595),
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41d61ac8-f9c0-4369-8f58-00bdf6a2f373"),
                            CategoryId = new Guid("b0ccbf57-ba42-4b41-9793-05735bd43443"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 8, 18, 39, 8, 224, DateTimeKind.Local).AddTicks(5740),
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("237b187b-5964-4898-83f4-fecb399affb9"),
                            CategoryId = new Guid("7f378b51-0ae5-4a96-9a46-13bc361b5e5f"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 8, 18, 39, 8, 224, DateTimeKind.Local).AddTicks(5745),
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("e4842b42-7458-4a16-acb6-5ca062e4ed7b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumTopic", "ForumTopic")
                        .WithMany()
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ForumModels.ForumTopic", null)
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumTopicId1");

                    b.HasOne("wiki_backend.Models.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumTopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("ForumPostId");

                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.Category", "Category")
                        .WithMany("WikiPages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Navigation("WikiPages");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Navigation("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
