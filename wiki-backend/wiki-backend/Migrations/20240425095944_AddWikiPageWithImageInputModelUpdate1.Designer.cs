// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240425095944_AddWikiPageWithImageInputModelUpdate1")]
    partial class AddWikiPageWithImageInputModelUpdate1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1424003-bc4f-48d2-bf30-ebc8c5c5212a"),
                            Content = "Rerum veritatis maxime. Soluta labore dolores est possimus rerum non. Rerum beatae vitae qui suscipit aperiam est repudiandae omnis.\n\nOmnis praesentium nesciunt ex aut reprehenderit et qui. Ut ut non quos facere aut totam natus ut fugit. Quo impedit ipsa consectetur recusandae magni suscipit quis. Repellendus veniam vel veritatis reprehenderit est.\n\nVoluptas quo accusantium quisquam soluta eum id tempore. Voluptatem aliquam quaerat ab id sed. Facere esse totam aspernatur explicabo aut enim dolore eveniet.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("3488cef7-6cd1-4f6c-aed0-f1515cd3a9e2")
                        },
                        new
                        {
                            Id = new Guid("80d03e63-080c-4a4e-a071-c399721e4b57"),
                            Content = "Consequuntur tempora laudantium ratione laborum. Id et sunt eius temporibus nihil consequatur omnis. Voluptas minima quas sint omnis.\n\nQuo modi voluptas. Corrupti minus earum architecto distinctio rerum accusamus consectetur et. Est rerum omnis velit omnis voluptatem.\n\nDistinctio distinctio atque non voluptatem. Quam eos dolorem corporis deleniti quia. Illum quia sit quibusdam asperiores id consequatur. Consequatur quae voluptatibus. Omnis ratione doloremque eveniet sapiente facilis.\n\nQuia dolores necessitatibus voluptatem pariatur illo dolore eos. Est amet aperiam quasi necessitatibus voluptatibus id provident labore. Qui sed cupiditate earum sit. Quia accusamus optio saepe est cum. Officiis nostrum labore nisi reprehenderit inventore.\n\nEst et quae maiores sed similique cupiditate accusantium cupiditate esse. Natus commodi rerum debitis quia odit perferendis. Aut consequuntur est soluta itaque autem enim rem placeat sed. Voluptas autem at facilis sint sit. Repellendus sit exercitationem deserunt adipisci.\n\nVoluptatem nulla minima. Quo reiciendis et necessitatibus aut cum expedita excepturi. Quia laboriosam officia quia perferendis. Commodi dolorem commodi.\n\nAdipisci ratione quam aut est natus omnis. Animi qui quia sunt quia similique occaecati expedita. Ut quae sit distinctio error et officiis voluptatem.\n\nDolorem facere est omnis nemo cumque. Blanditiis doloribus nisi quos velit. Dolorem qui cumque. Corrupti non eius sed ut eum illum culpa. Voluptas nam soluta et eius quae vitae maxime vero amet. Vel sit quo possimus sequi cum minus velit et.\n\nNon ut deserunt sunt fuga nihil molestiae dicta molestiae. Sit dolores repellat dolorem. Voluptate amet tenetur architecto excepturi quas asperiores veritatis hic tempore. Officia eum nisi. Eius ut maxime et eveniet optio.\n\nPerferendis quis est corrupti odio voluptates et dolor rerum. Dolores deleniti porro dolore velit quia adipisci vero et. Rerum earum illo et. Est quaerat consectetur saepe sed expedita placeat ipsa rerum perferendis. Qui ex eum rerum enim incidunt distinctio expedita laborum. Nulla possimus sit molestias fuga vero omnis repellendus quia.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("3488cef7-6cd1-4f6c-aed0-f1515cd3a9e2")
                        },
                        new
                        {
                            Id = new Guid("c1b30a46-5505-4da1-9d08-6a5cd8e3ef44"),
                            Content = "Soluta non vitae ipsam asperiores at ut. Magnam ratione iste. Reprehenderit voluptatibus rerum sint repudiandae eius veritatis nobis. Blanditiis numquam molestiae aut quia. Natus aut ea qui inventore esse error quis. Sed cumque veritatis asperiores nesciunt dolor quia eum ab debitis.\n\nQuia non quod reiciendis veritatis. Temporibus ratione nemo qui delectus quos dolor dolor perferendis provident. Eveniet sint ut ratione non. Recusandae quia cumque fuga corrupti itaque ex dolores est. Ducimus nulla quia sit sit et distinctio natus ab eum.\n\nAut sapiente ducimus quis molestiae. Qui laudantium autem qui minus est et voluptatem sit. Eos voluptatem non aperiam dolores. Ipsa laborum tenetur dolores sint et et.\n\nExcepturi mollitia a omnis. Laudantium nisi consectetur maxime recusandae sunt ut laboriosam eos nihil. Quos est maiores. Soluta ab et molestias facilis ducimus fugit. Corrupti illum dicta repudiandae magnam voluptatum quaerat. Laudantium provident laudantium facilis ut aut consequuntur amet quasi.\n\nModi illum dolorem voluptatem ipsam et quo. Ea in dolor error eum earum. Dolorum reprehenderit aliquid aperiam iste. Autem aliquid fugit possimus fugiat accusamus itaque.\n\nUt iste minus delectus aut incidunt et animi. Nulla sapiente voluptatem. Ut est perferendis tenetur repellat quidem quidem cumque ex. A totam vel.\n\nIllo quis possimus. Pariatur ut voluptates omnis optio voluptates quisquam rerum voluptatem. Quia a ut culpa nobis libero iure dolores.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("3488cef7-6cd1-4f6c-aed0-f1515cd3a9e2")
                        },
                        new
                        {
                            Id = new Guid("713291b6-b791-4aee-93d0-f7afcd409936"),
                            Content = "Voluptas aut non quae expedita sed nobis dolorem. Quos aut saepe unde veniam sit et voluptatem. Possimus minima voluptatem vel aut sapiente hic. Consequatur distinctio repudiandae a sunt magnam. Ipsum qui qui ipsa.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("3488cef7-6cd1-4f6c-aed0-f1515cd3a9e2")
                        },
                        new
                        {
                            Id = new Guid("284c171d-cab6-49f2-908c-0f80c216c6c2"),
                            Content = "Dolores id aut consequatur molestias enim. Ipsum tempora impedit est perferendis temporibus non. Perferendis voluptas eligendi tempora. Accusamus voluptatem asperiores necessitatibus molestiae numquam. Provident ut quam quam eum doloremque. Vero eius est dolore magnam voluptatum.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("3488cef7-6cd1-4f6c-aed0-f1515cd3a9e2")
                        },
                        new
                        {
                            Id = new Guid("5d8df614-760a-42bc-a62b-d95ca16f6359"),
                            Content = "In eos reiciendis illum ut. Porro error alias laboriosam maxime illum quis quos neque. Sed assumenda ipsa reiciendis ex non beatae eos voluptatum. Dolorem iusto et.\n\nAut labore aut exercitationem et nisi magni voluptas. Et ex amet. Sunt nostrum repudiandae.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("3488cef7-6cd1-4f6c-aed0-f1515cd3a9e2")
                        },
                        new
                        {
                            Id = new Guid("ac361ee0-8712-464b-82f3-cfbb01b5e827"),
                            Content = "Culpa laboriosam pariatur ducimus. Sit hic ut eos cum nostrum ut natus commodi. Omnis quo eum ut aliquid delectus quia molestiae cupiditate maxime. Atque illum nesciunt dolore aut. Deserunt animi veniam nam id.\n\nSed ea tempore deserunt rem incidunt officia. Voluptatem qui excepturi non est repudiandae incidunt quis accusamus minus. Sed sapiente nemo et velit minima cum. Rerum magnam enim omnis aut quidem quam cupiditate iure. Aut voluptatum id tenetur enim. Fuga architecto modi iusto omnis.\n\nOccaecati aliquid voluptatibus ut est saepe necessitatibus temporibus aut nihil. Vitae unde incidunt mollitia officia. Et quis at velit corrupti. Rerum voluptas ut vel in illo sunt quam.\n\nQuibusdam perspiciatis numquam aliquam est ducimus quisquam quibusdam. Dolorum ad labore vero quis ea. Excepturi non optio et laboriosam sit.\n\nEt iste soluta. Dolores ex cumque enim sunt id maxime sapiente quo quis. Non enim optio soluta consequatur quia iusto labore qui. Distinctio fugit ad beatae tenetur qui deleniti sed qui provident.\n\nCorrupti est quod laudantium vero eos similique quia. Qui omnis ea earum ex. In nostrum commodi et sint laborum. Molestias ut rerum consectetur totam sint consequatur vitae nulla quos. Harum modi incidunt.\n\nSed voluptate in at quia voluptatem reiciendis. Quasi quo minus. Mollitia voluptatem aut impedit est illo. Doloribus occaecati quidem consequuntur iusto nesciunt quae ipsam velit. Quasi ipsam totam temporibus corporis sapiente perferendis. Ipsam commodi et sequi sed aut et non.\n\nEt quaerat aut enim qui autem. Laborum rerum dolorem omnis qui sequi excepturi. Et consequatur magni tempora odit alias eveniet enim exercitationem. Neque quidem dicta et. Nulla ipsum saepe.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("7ce43b65-d073-4f9a-aaa0-15978b1a2465")
                        },
                        new
                        {
                            Id = new Guid("f90751f3-81e9-4677-b156-8c19d1a7a964"),
                            Content = "Magni ut quia. Maxime corrupti laborum ad sint non quasi dicta. Unde repellendus aliquam aut ad voluptatem.\n\nLabore veritatis aut at ea deserunt quis vel. Sit pariatur alias. Natus quia corrupti natus ipsam itaque recusandae. Nulla beatae at.\n\nReiciendis aperiam et eius assumenda occaecati qui vitae. Neque incidunt aut molestiae facilis consectetur quae accusantium. Atque deleniti ipsum laboriosam accusantium accusamus magnam. Deleniti porro tempore qui sed quos. Enim mollitia corporis illum voluptate corrupti quo.\n\nQuidem est voluptatibus quam. Dolor aut sequi eaque sit. Porro laboriosam quia ratione adipisci facere. Deleniti ullam est nihil aut eligendi. Optio nihil nostrum asperiores vel aut quia quasi officia. Aut eos amet eveniet consequuntur suscipit nulla.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("7ce43b65-d073-4f9a-aaa0-15978b1a2465")
                        },
                        new
                        {
                            Id = new Guid("af66dea5-c5e9-421b-a668-2b0282d4f655"),
                            Content = "Voluptates ipsum officia sint quisquam nesciunt. Vel placeat eveniet quidem sit tempora. Inventore facilis non cupiditate tempore repellat alias a ipsa. Enim culpa eius asperiores. Sit dolor possimus est.\n\nSit repellat quam qui eos. Alias autem aut dolores sed error qui maxime sed. Quidem qui animi assumenda omnis nihil ullam quisquam molestiae sequi. Maxime occaecati provident nulla aut sunt sit consequuntur et minus. Deserunt sed quia saepe. Numquam itaque quidem esse consectetur.\n\nNobis enim molestiae amet placeat repellat rerum. Fugiat totam quas nobis fugit corporis maxime eos tempora eveniet. Omnis cumque cumque cumque cum vero ut illum.\n\nAdipisci voluptas mollitia. Ut qui architecto inventore aut sapiente ea ex. Quia veritatis quo laborum est molestiae voluptas vel eaque. Provident sit similique tempore dolor non tenetur praesentium et. Est voluptatem natus non rerum aut voluptatibus. Modi voluptatum dicta ipsa quia labore nihil voluptatibus commodi.\n\nQuia et voluptates illo doloribus neque fugiat et et id. Recusandae porro expedita id odit explicabo quis. Facilis dicta quasi expedita deleniti consequatur nulla et nobis. Eos et corrupti omnis accusantium id illo.\n\nDeserunt quis quasi dicta. Tempore magni ipsa et velit consequatur cum. Aut iusto dolorem qui possimus facilis. Harum voluptate aliquid laudantium.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("7ce43b65-d073-4f9a-aaa0-15978b1a2465")
                        },
                        new
                        {
                            Id = new Guid("5e7cbdcb-57b1-4e74-8339-39f0b580b5f3"),
                            Content = "Ullam reprehenderit consequatur accusamus eligendi odio sunt. Id cum doloribus est porro ex ea dolore eveniet. Officiis culpa rerum. Doloribus temporibus qui. Natus debitis sit possimus aliquid illum illo ducimus. Harum dignissimos illo veritatis reprehenderit qui sequi eius eaque.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("7ce43b65-d073-4f9a-aaa0-15978b1a2465")
                        },
                        new
                        {
                            Id = new Guid("6ef68cca-f0c1-4571-a87f-e968d5e38539"),
                            Content = "Velit est quibusdam quo a fuga numquam ut quasi. Atque voluptas provident sint. Non assumenda sit magnam. Impedit nemo vitae. Corporis magni pariatur voluptas in autem.\n\nSint laborum autem qui et. Quo rerum omnis praesentium incidunt quas nihil quos voluptatem. Nihil qui omnis.\n\nQuasi aperiam eveniet. Maxime inventore iste qui iusto fuga facere vel recusandae. Quos molestiae sit eligendi quas. Officia eum iste et iusto omnis est earum eveniet.\n\nUt accusamus consequatur sapiente molestiae hic. Laborum exercitationem consequatur ut earum nam dignissimos in. Qui nesciunt consequatur exercitationem aut consequatur dolore. Sit laboriosam dolor velit dolores omnis in animi perspiciatis.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("7ce43b65-d073-4f9a-aaa0-15978b1a2465")
                        },
                        new
                        {
                            Id = new Guid("acb65d33-502f-43b9-b01c-b97220f00546"),
                            Content = "Doloribus est magnam iste nam veritatis velit alias ut omnis. Consequatur in sint voluptatem nobis occaecati consequuntur alias corrupti. Commodi quam necessitatibus quisquam eaque dolores. Deserunt dolores dolorem magnam.\n\nSimilique velit doloremque alias et nihil provident sit. Quod consequatur et cupiditate omnis. Quis quos vel aut aut. Dolorum placeat inventore animi ipsam nisi.\n\nTempora illum vel. Nisi deserunt optio molestiae tempore aut accusamus. Minus voluptatem neque inventore sed quae est.\n\nNon sed expedita sed. Molestias eaque reprehenderit quis cum neque. Incidunt non magnam. Sed possimus qui laboriosam. Quibusdam ipsam ducimus beatae nulla. Recusandae et sed vitae nihil odio.\n\nAutem expedita voluptatem expedita minus odio omnis fuga ut. Unde atque sed corrupti itaque consectetur. Perspiciatis iusto est consequatur iure sapiente esse qui voluptas. Delectus neque quibusdam rerum voluptatem quaerat. Et id vel illo omnis. Blanditiis facilis velit deserunt eius sint aut mollitia vel.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("7ce43b65-d073-4f9a-aaa0-15978b1a2465")
                        },
                        new
                        {
                            Id = new Guid("0a07bb14-14c9-4540-adfc-6accd093fbff"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("8e988ccd-fe30-4bb1-ab76-4436cda23467")
                        },
                        new
                        {
                            Id = new Guid("a5b4f37a-a22b-496c-be7b-f62664ca51aa"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("8e988ccd-fe30-4bb1-ab76-4436cda23467")
                        },
                        new
                        {
                            Id = new Guid("dc5dccc1-b2cb-4af7-be62-ca2d4b876c40"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("f306c3f1-8910-4929-ae4d-cde0e87e6451")
                        },
                        new
                        {
                            Id = new Guid("2d8d7ff6-e97d-438d-a379-1c192351ea9e"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("f306c3f1-8910-4929-ae4d-cde0e87e6451")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("3488cef7-6cd1-4f6c-aed0-f1515cd3a9e2"),
                            LegacyWikiPage = true,
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("7ce43b65-d073-4f9a-aaa0-15978b1a2465"),
                            LegacyWikiPage = true,
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e988ccd-fe30-4bb1-ab76-4436cda23467"),
                            LegacyWikiPage = true,
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("f306c3f1-8910-4929-ae4d-cde0e87e6451"),
                            LegacyWikiPage = true,
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("3488cef7-6cd1-4f6c-aed0-f1515cd3a9e2")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
