// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240425113412_AddWikiPageWithImageInputModelUpdate3")]
    partial class AddWikiPageWithImageInputModelUpdate3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ee30f450-db2b-4b06-abf0-768daeb937df"),
                            Content = "Odit commodi nulla unde laudantium dolore aut non sed. Ut animi qui soluta et consequuntur dignissimos ut animi. Labore fugiat quo qui voluptas voluptates rerum. Quibusdam rem veniam. Ipsam dolore sunt fugiat rerum provident harum autem. Recusandae eum dolor ut cupiditate amet inventore dolores sit rerum.\n\nNumquam qui consectetur ut deleniti eos asperiores numquam qui. Labore est sunt illo et. Dicta nobis suscipit in. Deserunt sequi aut ut.\n\nCommodi similique tempore non ut ut dolorem expedita et. Consequatur voluptate dolorem necessitatibus fuga veniam vel. Veniam soluta laboriosam natus sed et exercitationem veritatis. Voluptatem ullam quia id eos quia. Ut autem ut et ex recusandae ex dolorem eos odit.\n\nEarum blanditiis nisi sequi voluptatum id deserunt. Quas ut ad vel enim sunt accusantium. Et aspernatur possimus et aut molestiae quia voluptas sunt sunt. Rerum consequatur sit quibusdam tempora ea.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("c906c954-d883-45f7-9275-d286f74c68f0")
                        },
                        new
                        {
                            Id = new Guid("8b442b9a-157c-4f71-9e48-02774f1a5517"),
                            Content = "Est corporis tenetur aliquam quasi eum ratione quasi beatae ratione. Natus est in natus rerum praesentium non. Et nemo sint enim et. Voluptatibus vel mollitia cum itaque asperiores recusandae voluptas doloremque. Ut dolor quam aliquid autem est non omnis. In fugit qui voluptatem quidem.\n\nEst perferendis tenetur sequi est accusamus vel voluptate. Autem provident enim dolorem fugiat sit ipsa. Adipisci quo totam occaecati aut praesentium assumenda nam placeat architecto. Vero sint est velit soluta exercitationem. Minima magni odit illo perspiciatis.\n\nIste aut natus est. Suscipit dolorum animi explicabo. Adipisci quam recusandae odit aut ut occaecati. Tenetur architecto et quia quod. Similique ea eaque nam at sunt.\n\nDolorem dolorem mollitia voluptatem dolorem occaecati laudantium rerum. Cupiditate aut voluptatem officia reiciendis veniam nemo vel in ut. Magnam blanditiis excepturi quis et velit. Aut molestiae ipsum. Quia suscipit dolores eos qui.\n\nPlaceat autem ex numquam suscipit. Adipisci culpa ullam ut corporis sed. Possimus optio voluptas et laudantium maiores quod placeat voluptate voluptas.\n\nQui dicta alias est deserunt laudantium voluptatibus non. Eos sunt quis asperiores est enim consequatur. Sint amet quod tempore quae et eos consectetur necessitatibus minus. Et et dolorem expedita.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("c906c954-d883-45f7-9275-d286f74c68f0")
                        },
                        new
                        {
                            Id = new Guid("bac9b0f9-7927-4cc5-8e50-e4e4f71ee38f"),
                            Content = "Consequatur modi et saepe aut veritatis fugit consequuntur dolor. Vel aut eos vitae. Iste sed quaerat illum porro iure qui ad.\n\nOmnis velit corporis voluptatem ad nisi. Praesentium voluptatem aliquid. Alias consequatur exercitationem tempora qui beatae ut rerum consectetur iste. Consequatur et officiis aspernatur voluptas.\n\nIure repudiandae laudantium tempore alias dolores pariatur accusamus. Accusamus ab vero molestiae voluptates excepturi. Non velit est et sit aut laboriosam reprehenderit veritatis. Ut minima tempore earum. Assumenda quia omnis ut alias non nihil quos repudiandae voluptas. Et numquam qui tempore molestiae accusantium nemo repudiandae.\n\nVoluptas vel sed nihil ab rerum. Velit sed recusandae ratione aut autem voluptas qui cumque quas. Nihil sunt voluptatem impedit est. Totam ut eveniet quia rerum optio neque. Nihil rem consequatur ut facere.\n\nEnim itaque ut delectus quidem est et. Non odit voluptatum porro quo totam repellat est. Doloremque expedita ut. Id assumenda optio tempore atque. Non fugiat nesciunt assumenda nam voluptas qui ipsam distinctio expedita. Natus doloremque et quaerat.\n\nConsequuntur doloremque laborum est voluptates mollitia adipisci. Dolores necessitatibus magnam tenetur eveniet fuga occaecati molestias. Quam molestiae quod maiores ut aut pariatur at.\n\nMolestias suscipit veritatis delectus ad architecto sed fugiat consequuntur. A consequatur eos non numquam ea voluptatibus tempore distinctio. Eligendi ullam neque debitis qui magnam voluptatem illo id et. Aut quia est dolores odio enim atque nobis. Debitis dicta sunt fugit commodi cum deleniti reiciendis ipsa.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("c906c954-d883-45f7-9275-d286f74c68f0")
                        },
                        new
                        {
                            Id = new Guid("d6cfa2e7-6e19-42bc-ba44-38ffb707ed6b"),
                            Content = "Aliquid nisi error explicabo dicta. Dignissimos in odio voluptatem. Quos porro sit autem. Distinctio enim aliquid veritatis maiores ut blanditiis deserunt.\n\nSint impedit provident sed veritatis dolor quo molestiae unde deleniti. Porro rerum enim dolore. Sit asperiores velit molestiae nihil quae assumenda distinctio. Aut sint reiciendis nisi nostrum reiciendis repudiandae numquam dolorem.\n\nSint perferendis ut omnis. Excepturi quia provident nihil rerum. Ut voluptatem sed et est illo.\n\nVoluptates fugiat molestiae repellendus omnis earum. Voluptas et et error facilis. Natus dolores id et reprehenderit possimus numquam sunt nesciunt. Aut et dicta cupiditate modi optio. Est architecto dolores dolores nulla velit eveniet rerum reiciendis.\n\nTotam temporibus temporibus qui doloribus aliquid atque voluptas et. Ex perspiciatis culpa temporibus veniam nulla. Similique et laudantium consequatur et praesentium.\n\nRem eos vero voluptatem excepturi voluptates molestiae nobis. Dicta sit asperiores molestiae rerum magnam sunt laudantium sit. Soluta provident atque et. Vitae modi nulla nihil quos possimus explicabo.\n\nAlias mollitia placeat non eveniet ipsa molestiae nostrum. Veniam est vel ex veniam mollitia commodi. Maxime sint non fugiat corrupti quam et inventore. Est sunt et quia aut et necessitatibus neque. Numquam necessitatibus amet earum aut cumque. Vitae sunt et minus est molestiae.\n\nOptio voluptatem sint nulla eligendi aliquam. Harum voluptatem deleniti dolor sit dolores dicta nulla aperiam. Quas omnis voluptatem in. Harum tempore quam enim quas odio tenetur et nisi minima. Tempore eum est officiis reprehenderit.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("c906c954-d883-45f7-9275-d286f74c68f0")
                        },
                        new
                        {
                            Id = new Guid("6fd16a01-9b1f-4764-8bf0-08e1e6ee338c"),
                            Content = "Consequuntur possimus eaque voluptatem. Excepturi a perferendis cum. Adipisci voluptas quos ullam vero et quos.\n\nNihil adipisci hic pariatur officia ut aut et. Dolor qui omnis laborum perspiciatis eum. Voluptas sequi sint asperiores. Ipsam natus maxime voluptatem. Omnis consequuntur vel aut voluptates delectus aspernatur omnis iure.\n\nSunt soluta mollitia dolores cum. Doloremque voluptatum qui. Et reiciendis nobis et tempore laboriosam officiis adipisci quasi.\n\nAsperiores omnis delectus ut qui dolorem quia animi. Ut consequatur excepturi iure. Commodi illo cum eveniet ipsam error asperiores. At neque magnam libero. Atque vitae quisquam facilis ex eos. Ut saepe voluptatum inventore consequatur voluptatibus asperiores quam.\n\nAnimi et nostrum soluta aliquid. Fugit dolores quia omnis est placeat. Aut voluptatem veritatis odit dolor deleniti molestias rerum voluptas. Ad consequuntur eum sed quam quia. Rerum aut sunt minus veritatis assumenda dolores dolorem est inventore.\n\nNostrum possimus et. Labore sapiente a aut. Rerum et et reiciendis nulla sunt ullam quae. Autem pariatur quo iure delectus quaerat. Ea voluptates ipsam fuga. Esse nobis sed reiciendis optio nihil reprehenderit vitae mollitia.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("c906c954-d883-45f7-9275-d286f74c68f0")
                        },
                        new
                        {
                            Id = new Guid("c997f107-a4d6-4eff-8775-4662007af7c8"),
                            Content = "Aut expedita molestiae quibusdam culpa. Possimus saepe voluptate dolores vero est similique aspernatur ipsam et. Suscipit repellendus impedit itaque vel hic.\n\nAssumenda neque non ut similique voluptatibus quam aut facilis. Non quis quod incidunt quaerat quis nesciunt. Ut nihil quibusdam omnis pariatur.\n\nAlias quasi ratione velit cupiditate porro culpa nam possimus. Et quidem quia sint quia in placeat. Nemo ipsa ullam itaque et.\n\nPerferendis distinctio facilis reprehenderit voluptas. Et dolore odio sit consectetur commodi quam porro. Omnis ipsum eveniet vero est totam est. Explicabo sit voluptatem accusamus voluptatibus delectus aliquid dolor eveniet minus. Possimus alias voluptates temporibus qui ut incidunt eos.\n\nIpsam magnam odit officia odit recusandae. Sit sit aperiam adipisci voluptatem nisi expedita. Est cum consectetur distinctio. Voluptatem cumque sunt harum error modi quod quisquam eius. Vitae labore voluptas est enim nam in. Et explicabo omnis tenetur.\n\nQuo numquam dolor sint enim. Vitae error eum vel aliquam velit eligendi aliquid quos molestiae. Minus sequi commodi. Reprehenderit fugiat ab et non sint qui corrupti. Sed enim reiciendis rerum enim reiciendis quae explicabo quia.\n\nAmet molestiae nihil nam eos debitis nobis eum. Minima ea quia aut praesentium inventore. Repellat debitis suscipit nihil facilis. Maiores aut vitae culpa dolores eum.\n\nFacilis molestiae omnis non laborum nobis aut voluptate debitis. Harum ut et perferendis. Qui reiciendis in. Eligendi ipsa et dicta.\n\nMaiores deserunt est nam in vel ab vero et. Quaerat nemo sit modi alias est aut fuga. Ea omnis corrupti et et sit sit nihil explicabo.\n\nSit quas eveniet ipsum iste dignissimos quibusdam et dolor. Et rerum qui quisquam. Ut maxime in vel necessitatibus error consequuntur et autem laboriosam. Quasi sunt similique. Mollitia libero iusto.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("c906c954-d883-45f7-9275-d286f74c68f0")
                        },
                        new
                        {
                            Id = new Guid("8b38c034-da68-4af0-bdcd-a3465b9919a7"),
                            Content = "Eum laudantium ab quisquam. Quia ea maiores molestiae qui sit rem aut eligendi. Quis aut error magni neque occaecati consequatur. Vel placeat voluptas sint aut molestias et ut commodi architecto. Accusantium animi ipsa debitis.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("5acd2af4-22e5-43f7-9e8d-a249e68d6a56")
                        },
                        new
                        {
                            Id = new Guid("77f4e68e-c0b9-44e4-8fcc-42a7e3b5a930"),
                            Content = "Distinctio et id hic quibusdam dolor hic. Nisi recusandae quos soluta. In sunt voluptatem vel ab quibusdam autem quia voluptas. Repellendus sed veniam unde dolores non esse velit earum.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("5acd2af4-22e5-43f7-9e8d-a249e68d6a56")
                        },
                        new
                        {
                            Id = new Guid("7c121d70-e14d-4966-b56f-5d3195eb6a00"),
                            Content = "Quo porro culpa et sit totam maiores repellendus aut voluptates. Non et assumenda illum. Amet omnis nostrum dolore qui et eos corrupti.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("5acd2af4-22e5-43f7-9e8d-a249e68d6a56")
                        },
                        new
                        {
                            Id = new Guid("35f144a9-100e-4775-8e50-2e560263fada"),
                            Content = "Quia omnis quis. Nam numquam corrupti pariatur. Praesentium harum sit magnam porro voluptas voluptate. Aut officia minus deleniti qui repudiandae eaque maxime eum. Magni possimus rerum inventore suscipit cupiditate distinctio quas. Id et et veniam.\n\nPerspiciatis voluptas natus vitae id quo dolorum ut nihil. Molestiae exercitationem quis deleniti fugiat. Magni commodi possimus vero voluptatibus. Saepe magni reiciendis laborum sint corporis.\n\nAut nulla libero ex nihil iusto consequatur vitae eaque nisi. Qui fugit facere vitae laudantium. Et eveniet reiciendis a quo ut ut ea hic voluptate.\n\nAliquam voluptatem assumenda quibusdam iste aut. Excepturi assumenda pariatur ut quos est eius. Placeat repellat voluptate eum et quo incidunt animi quod rerum. Expedita hic perferendis dolor. Totam veritatis laborum est unde iusto et error numquam. Eaque suscipit est modi.\n\nEt vitae hic aut nisi autem voluptas alias. Id nisi hic. Adipisci consectetur harum natus aut iusto quaerat ex natus. Enim aspernatur voluptates.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("5acd2af4-22e5-43f7-9e8d-a249e68d6a56")
                        },
                        new
                        {
                            Id = new Guid("4a972c48-8545-4328-bbd8-94fc6815f802"),
                            Content = "Tempora ut rerum maxime veritatis praesentium neque incidunt suscipit. Rerum repellat consequuntur cumque. Consectetur praesentium nesciunt quis vel.\n\nRerum vero est laudantium reprehenderit. Possimus veritatis accusamus at et eos ea. Adipisci quidem molestiae. Saepe repellat sint fugit fugiat doloremque.\n\nIste provident enim est incidunt fugit molestiae culpa. Sunt architecto praesentium est. Voluptatem rem et velit aut omnis eos tempore. At molestias illum quidem et ut magni. Fuga cumque facere voluptatem.\n\nEius nesciunt molestiae repellat nisi qui accusamus occaecati omnis ratione. Eligendi velit consectetur sed neque blanditiis nesciunt maxime. Et eos soluta enim aut debitis neque explicabo at. Quo earum iure consequatur facere reiciendis odio aspernatur. Maxime corrupti excepturi dignissimos.\n\nNon sunt odio dolor dolore repellat et adipisci quas aut. Nihil dolor consequatur voluptatum sint tempore deleniti. Voluptas possimus itaque debitis sunt perferendis impedit cupiditate rerum.\n\nQuia quos velit recusandae similique. Occaecati quasi tenetur saepe earum sit. Facere voluptas blanditiis omnis ea et qui. Et excepturi est qui. Vero amet et earum perferendis adipisci similique omnis ea saepe.\n\nPraesentium ut corrupti laudantium voluptatem qui qui et iusto voluptatum. Animi quia quam et. Qui earum illum omnis laudantium. Delectus qui quo amet alias culpa molestiae.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("5acd2af4-22e5-43f7-9e8d-a249e68d6a56")
                        },
                        new
                        {
                            Id = new Guid("03356fd5-8697-40e0-8533-5f3843fe7cc6"),
                            Content = "Dicta ducimus id temporibus explicabo laboriosam quidem et culpa eius. Perspiciatis ut saepe omnis et sed quo provident minus aliquid. Velit perferendis voluptatibus aperiam qui debitis. Qui eos deserunt.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("5acd2af4-22e5-43f7-9e8d-a249e68d6a56")
                        },
                        new
                        {
                            Id = new Guid("2578ad59-23cb-48ac-8758-3cc2f8a3f148"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("643fe2e1-2bc2-478c-8ebd-623648ae1284")
                        },
                        new
                        {
                            Id = new Guid("17010ede-3705-4f3e-89b2-a26383252cfc"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("643fe2e1-2bc2-478c-8ebd-623648ae1284")
                        },
                        new
                        {
                            Id = new Guid("17f034f2-ff44-4c85-8f64-85ae56e9f209"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("0d64abfc-745a-420b-9fd2-6296bbdd3e47")
                        },
                        new
                        {
                            Id = new Guid("7ba9a3e8-e6d4-45b7-9ccd-ce50651bd9a2"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("0d64abfc-745a-420b-9fd2-6296bbdd3e47")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("c906c954-d883-45f7-9275-d286f74c68f0"),
                            LegacyWikiPage = true,
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("5acd2af4-22e5-43f7-9e8d-a249e68d6a56"),
                            LegacyWikiPage = true,
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("643fe2e1-2bc2-478c-8ebd-623648ae1284"),
                            LegacyWikiPage = true,
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("0d64abfc-745a-420b-9fd2-6296bbdd3e47"),
                            LegacyWikiPage = true,
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("c906c954-d883-45f7-9275-d286f74c68f0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
