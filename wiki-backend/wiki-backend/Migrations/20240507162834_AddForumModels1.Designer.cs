// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240507162834_AddForumModels1")]
    partial class AddForumModels1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a692973-188a-464b-a5cf-428abcde9487"),
                            CategoryName = "Characters"
                        },
                        new
                        {
                            Id = new Guid("c6ce9e2e-7ec9-4488-877e-b618a5be7adb"),
                            CategoryName = "Stories"
                        },
                        new
                        {
                            Id = new Guid("a89fa6a3-6700-49dc-9858-4f5ee357d1db"),
                            CategoryName = "Locations"
                        },
                        new
                        {
                            Id = new Guid("be050c02-db2c-470c-951a-cacf32ca40d0"),
                            CategoryName = "Events"
                        },
                        new
                        {
                            Id = new Guid("35f160bd-9c2f-4924-995c-d3ef73593f62"),
                            CategoryName = "Organizations"
                        },
                        new
                        {
                            Id = new Guid("81bba3ec-aacf-4c17-9006-eff82c663d9f"),
                            CategoryName = "Concepts"
                        },
                        new
                        {
                            Id = new Guid("ec04b8c3-e40a-4528-8b0a-028f18c21b92"),
                            CategoryName = "Technologies"
                        },
                        new
                        {
                            Id = new Guid("8ce57152-a445-447b-96c7-a3e7f6c8aedc"),
                            CategoryName = "Arts and Entertainment"
                        },
                        new
                        {
                            Id = new Guid("9da17538-58e6-4bb6-9af0-9e0315baea9a"),
                            CategoryName = "Sports and Recreation"
                        },
                        new
                        {
                            Id = new Guid("564f4c8f-c23c-4a4c-ba08-d0166a699e4e"),
                            CategoryName = "Science and Technology"
                        },
                        new
                        {
                            Id = new Guid("7827f272-b8f2-44af-a150-f3611e7cf814"),
                            CategoryName = "History and Culture"
                        },
                        new
                        {
                            Id = new Guid("51313f89-58a9-4c9d-a3d7-5f1ee3e7a99c"),
                            CategoryName = "Food and Drink"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForumTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForumTopics");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c93abef-8eaa-4b12-b4c3-fb260899704e"),
                            Content = "Ut ipsam mollitia eos ratione. Iusto et quidem accusamus autem. Officia veniam molestiae placeat blanditiis qui eos eius est nostrum.\n\nUt non nemo. Beatae facere natus qui qui qui quisquam ut corrupti. Eos impedit velit non quos ut saepe ut eum. Repudiandae quod aut harum tempore dolorem soluta beatae deleniti accusantium. Et minus aliquam a molestias. Odit harum quae alias quae ipsam quia nesciunt.\n\nEt deserunt quae. Itaque ex et ut vitae distinctio sed alias autem. Delectus sapiente qui quam vero. Ut placeat occaecati possimus numquam et qui libero blanditiis accusamus.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("651283f9-fdd0-4355-9f22-b952459f53db")
                        },
                        new
                        {
                            Id = new Guid("91b325ab-49c8-453d-be8d-7252b52c4eb1"),
                            Content = "Doloremque aut perspiciatis vel et ut qui. Et recusandae qui labore facere quo voluptatem delectus ab minus. Et sed sed hic voluptates accusantium qui soluta. Sit numquam est. Amet consequatur nihil sunt magni sapiente tempore vitae voluptatibus. Labore quas ab.\n\nProvident non doloribus soluta praesentium ea ex et praesentium in. Impedit officiis qui debitis neque fugiat earum eligendi nisi omnis. Ut quam quaerat maiores fugiat corporis commodi at et. Et voluptate deserunt ut. Voluptas qui debitis vitae sint rerum. Molestias blanditiis in corporis provident ducimus consectetur et perferendis molestiae.\n\nArchitecto dolores maxime voluptates et. Non similique sunt. Rerum et officia deserunt porro illo.\n\nSuscipit commodi dignissimos fugit a corrupti quo asperiores. Qui magnam rerum. Exercitationem ab iure qui sunt.\n\nOdio adipisci deleniti est consequuntur dolores eius quibusdam. Temporibus velit ipsa placeat nesciunt saepe quam aspernatur ut. Ut excepturi ut. Qui dolor nam quidem magni corrupti aliquid ut quia. Sed nulla ut laudantium quod facilis nulla voluptatem ipsam aliquam.\n\nOmnis perferendis aliquam blanditiis dolor repudiandae nihil consequatur iure a. Aperiam et vel ut nostrum eveniet nam ea est. Autem sunt praesentium. Porro sunt commodi eveniet itaque minus aliquam.\n\nConsequatur architecto repellendus autem mollitia est nobis sint facere. Amet aut et. Temporibus iusto nobis. Quasi ut sunt.\n\nConsequuntur expedita nihil consequatur. Rerum aut ut est aperiam provident aliquam tenetur. Iusto quos voluptatem error consectetur dolor omnis.\n\nRepellendus vitae saepe esse omnis. Neque tenetur vel molestiae nobis magnam totam. Sunt occaecati nihil eius. Pariatur nemo tempore recusandae maiores odit quo non veritatis. Nam illum consectetur.\n\nQuod porro non. Qui vel voluptatibus expedita qui et. Provident quae quaerat aut aut excepturi. Et veritatis reprehenderit blanditiis. Quisquam impedit quidem doloremque ea eius. Cupiditate eum voluptatum ea quis illo vero nemo doloribus iste.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("651283f9-fdd0-4355-9f22-b952459f53db")
                        },
                        new
                        {
                            Id = new Guid("66f93a86-8636-4091-8d7f-93a98d106f14"),
                            Content = "Consequatur dolores voluptas perspiciatis ducimus incidunt explicabo doloribus neque rerum. Animi iste consequatur fugit magnam esse eius blanditiis eveniet. Est error natus ipsam eius qui mollitia.\n\nExercitationem autem nostrum. Qui adipisci labore deserunt assumenda et laudantium non quisquam quisquam. Tempora et assumenda ea velit minima aperiam error earum. Corrupti qui quam explicabo ullam quas debitis quae fugiat.\n\nCupiditate vel temporibus vel delectus praesentium sed fugit. Delectus quod qui distinctio architecto similique quod quidem labore ut. Veniam aperiam recusandae et corporis. Et eius ut nobis quia accusantium dolorem suscipit distinctio eum. Praesentium voluptas qui ut.\n\nLaboriosam ut et ullam accusantium nemo deserunt. Tenetur nesciunt maiores voluptatem autem neque natus et nisi dolore. Aut autem rerum dolor qui provident et. Cumque hic quas eveniet molestiae corporis explicabo quae dolor dolor.\n\nAd ullam cumque sed et rem ut quasi enim. Ipsa quae quia ea officia. Suscipit vero quia. Aut beatae qui saepe ea ut ut eveniet. Omnis dicta explicabo quia voluptate ipsa iure dolor quasi earum. Officiis voluptas eum fugiat ratione.\n\nSapiente ut qui voluptatibus quae magnam molestias omnis. Non corrupti possimus aspernatur esse officia aut. Consequatur magni voluptatem consequuntur.\n\nPraesentium qui velit labore voluptas qui. Vero unde molestiae dolor non sed pariatur est. Numquam consequatur hic tempora eaque voluptatum quo.\n\nNesciunt eos reiciendis fugiat neque omnis sint quibusdam officia similique. Et velit vitae soluta voluptas nihil earum et dolorem voluptatem. Fugiat odio vero. Nesciunt dignissimos non vel officiis. Dolores sequi et excepturi non commodi. Magnam est vel aspernatur.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("651283f9-fdd0-4355-9f22-b952459f53db")
                        },
                        new
                        {
                            Id = new Guid("6bee70e7-cf6b-454c-b2b7-20511239bc21"),
                            Content = "Accusamus similique esse dignissimos dolorem consectetur quasi magni ut. Eum ex voluptates molestiae dolore. Maxime vitae adipisci. Vitae numquam minus est exercitationem fuga alias nihil debitis. Ut hic quia tempore et molestias. Est accusamus voluptatum.\n\nAspernatur libero iusto libero distinctio rem. Debitis labore fugiat laboriosam non cupiditate sit ratione eos rerum. Omnis et sed quo quo sed voluptate nam esse architecto. Dolorem recusandae qui error ullam aut sed. Ratione placeat ratione ut enim minus ad officiis ut in. Quaerat inventore aut molestiae in voluptates.\n\nNulla suscipit blanditiis voluptas repellat consectetur. Voluptatem distinctio dolore amet excepturi mollitia nobis commodi. Et vel facilis et aut sit perspiciatis eligendi itaque consequatur. Ea fugit impedit culpa et.\n\nRepellat soluta molestias et ab. Odio non est illum eveniet ullam molestias nihil cum. Veniam quia voluptatibus exercitationem eum autem ut. Consequatur consectetur nostrum modi est necessitatibus laboriosam quisquam.\n\nQuibusdam non fugit aliquid rerum est voluptate. Adipisci laboriosam delectus ratione enim sed veritatis esse. Deserunt corporis odio et molestiae et. Cumque voluptatem rerum laudantium et vero deleniti adipisci consectetur.\n\nRatione consequatur autem vero magnam necessitatibus consequatur saepe explicabo. Dolor ut exercitationem ipsa eaque et qui facilis. Numquam eos odio. Dicta provident non explicabo cumque quo quam nesciunt. Quas et quam.\n\nReprehenderit a ea perspiciatis explicabo. Quis dolorum minima. Quam veniam expedita quia et. Quidem earum itaque aliquam.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("651283f9-fdd0-4355-9f22-b952459f53db")
                        },
                        new
                        {
                            Id = new Guid("0f4db41f-764b-49c2-ad9a-2054b96f7c60"),
                            Content = "Quis reiciendis rem sint et cupiditate voluptatem nobis et qui. Accusamus exercitationem totam aut nihil error numquam. Fuga omnis aut officia ut. Voluptates sit non architecto nesciunt. Voluptatum vel qui ducimus in.\n\nEos debitis ad quos nam blanditiis voluptatem velit non reiciendis. Et facilis ut perferendis corrupti. Et quod ut. Earum minus suscipit distinctio qui accusantium. Possimus eum cumque eaque.\n\nEum sunt exercitationem ea. Est aut culpa mollitia vel velit asperiores vel eaque. Rerum nulla ipsam amet molestiae aut culpa dolor ut voluptatum. In atque qui nostrum eveniet occaecati.\n\nBeatae ipsum et repellendus veniam eligendi. Iste alias corrupti cum voluptatem consequuntur nihil. Expedita nam sunt ut non officia aperiam. Sit culpa velit maxime velit animi repudiandae aut explicabo et.\n\nAut porro officiis quaerat et commodi. Ipsam rerum ipsum. Error dolores occaecati corporis est perferendis aut magnam in optio. Id autem sint. Qui dolores ut non et.\n\nReprehenderit earum dolorem vel exercitationem aut culpa corrupti expedita. Laudantium iste totam odit corporis assumenda cum et. Quo ut praesentium omnis et autem veritatis dolorem velit est. Quisquam sit possimus quam dolor.\n\nQuis officiis fugiat culpa eveniet ratione dolores. Eum qui est autem. Amet et minus voluptatem sed facilis illum necessitatibus. Eum esse quod qui.\n\nA velit facere. Repellat atque repellendus nihil consequatur sed amet. Dolores ullam tempore possimus est et. Tempora vel consequuntur suscipit eius omnis suscipit. Necessitatibus ut nihil nam suscipit pariatur consequatur et qui.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("651283f9-fdd0-4355-9f22-b952459f53db")
                        },
                        new
                        {
                            Id = new Guid("02962fda-1d83-41bf-aba5-febb5e28f8a7"),
                            Content = "Nostrum et consequatur facilis facilis quae quis. Deleniti et vitae inventore iure magni ea eius id. Eum ipsum et veniam eius nihil ut adipisci. Quia ipsam ut optio eaque deserunt.\n\nReprehenderit magni repellendus. Aliquid est dolore vitae rerum. Est ut et error qui quibusdam ut quia. Eveniet a sunt et ex officia in. Sequi consequatur harum ratione earum est ab dolor nihil eaque.\n\nEt adipisci quos. Dolorem quod consectetur voluptas placeat dolorum delectus culpa. Incidunt dolores autem. Nulla dicta velit repellendus possimus soluta atque labore.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("651283f9-fdd0-4355-9f22-b952459f53db")
                        },
                        new
                        {
                            Id = new Guid("df2839d7-c3ea-44d2-b5c7-03a0efd3f467"),
                            Content = "Aliquam reprehenderit earum deserunt exercitationem possimus recusandae. Dolore culpa nesciunt temporibus officiis. Tempora ut aliquam deserunt magnam et et aperiam reiciendis. Esse non veniam iusto eos nobis autem. Mollitia officia laboriosam ipsa expedita animi.\n\nNatus excepturi soluta. Sequi sapiente numquam non dolores. Sapiente quisquam est voluptas rerum fugit quidem. Porro ut voluptatem eaque. Iste laudantium eum ut doloribus blanditiis deleniti maiores voluptas adipisci. Ut amet amet et cumque.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("3e609f1f-2b3d-44e6-b9c2-b204718c5c8a")
                        },
                        new
                        {
                            Id = new Guid("6f227c3b-b54d-4308-b22d-de77159288cd"),
                            Content = "Qui consequatur et voluptatum. Eum sint maiores qui ad ratione. Nobis dolorem veniam dolores praesentium. Accusantium dolorem eum.\n\nDolor ut natus fugiat vero. Blanditiis numquam et atque libero reprehenderit libero accusamus. Expedita quis iusto molestias. Veniam consequatur id velit hic atque. Minus alias optio atque autem itaque cumque sequi officiis quis. Quia eligendi rem.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("3e609f1f-2b3d-44e6-b9c2-b204718c5c8a")
                        },
                        new
                        {
                            Id = new Guid("a9498e1e-ec16-4568-877f-7229fb3ac421"),
                            Content = "Necessitatibus fuga ipsa sint esse. Sit ut odio est. Unde fugit enim et qui dolor officia sapiente fuga illum. Perspiciatis vel voluptas doloremque accusantium quam. Qui est consequatur hic. Enim quod consequatur illum cum sed nobis possimus architecto.\n\nDeserunt aut id est totam quam qui est. Quidem porro animi. Id ut sequi aut amet eos voluptas eos. Quo veritatis temporibus nobis. Ipsa consequatur aliquid alias.\n\nQui voluptatem corrupti sed ipsa vel repellat laborum corporis. Itaque commodi et consequatur. Commodi repudiandae minima ut voluptatem dolorem eaque vitae quo.\n\nSint sed molestiae quo similique odit praesentium quia est. Est sit adipisci debitis placeat veniam. Esse qui molestias ea hic et et. Ipsa ducimus atque quidem.\n\nTemporibus sint aut commodi quo sit occaecati. Autem exercitationem voluptas aliquam dolorem. Eum dolores itaque doloremque sit. Mollitia itaque sunt voluptas. Nihil voluptas ratione unde aperiam commodi sint. Atque aut quia maiores.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("3e609f1f-2b3d-44e6-b9c2-b204718c5c8a")
                        },
                        new
                        {
                            Id = new Guid("af2757d4-8651-47c0-bde3-7fef72108121"),
                            Content = "Sed nam quia molestiae dolor et quibusdam odit qui praesentium. Molestiae sit doloremque non consectetur nihil exercitationem. Earum distinctio in et. Similique fugit quidem reprehenderit consectetur ad ut dolorem placeat et.\n\nEius veniam sequi omnis quis accusamus tenetur incidunt est est. Assumenda perferendis quibusdam voluptatem. Aspernatur aut sunt et labore hic vel saepe.\n\nIn et in nihil provident expedita ipsam. Similique consequatur delectus explicabo nostrum inventore ut et in. Laudantium suscipit distinctio nesciunt soluta. Ea tenetur quam similique nulla est.\n\nVoluptas quisquam ut veniam error nam ut alias totam qui. Asperiores enim quia quia provident aut voluptatem asperiores. Eius soluta sit omnis libero. Cum consequatur laborum voluptas cumque libero et. Fuga vel sed.\n\nOmnis quod odio adipisci. Et culpa sit accusamus vero corrupti voluptates. Velit consequatur enim perspiciatis reiciendis sed dicta esse minus sed. Laudantium et doloribus exercitationem dolorem unde ex animi. Ducimus est incidunt voluptatem reprehenderit aliquam quia impedit minima laudantium.\n\nNihil at ut voluptas deleniti. Quos vitae repellat vel. In blanditiis qui voluptas. Qui non qui. Amet delectus eos fugit odio qui qui fugit et.\n\nIpsum nihil dolor quisquam maxime et suscipit harum et est. Quam expedita eligendi quisquam tenetur aut officiis unde eum. Amet dolorem quidem.\n\nNihil velit deleniti nisi et culpa tempora. Dignissimos rerum est velit cupiditate voluptate. Officia sit perspiciatis at.\n\nMagnam corrupti aut quam omnis sed corporis. Ab deserunt rerum voluptas ut tenetur. Ipsam et veniam tempora maiores sunt sed vitae quam aperiam. Tempore quod et.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("3e609f1f-2b3d-44e6-b9c2-b204718c5c8a")
                        },
                        new
                        {
                            Id = new Guid("0fcd87c6-b326-43ba-96c7-01a1d3d0e15a"),
                            Content = "Et facere id sunt modi dolorem fugiat eos quia. Deserunt harum quibusdam inventore accusantium molestias. Aperiam laboriosam eveniet et consequatur perferendis adipisci. Architecto natus animi et rem sed. Est sapiente eveniet consequatur sit dolor officiis. Modi repudiandae id ut soluta velit animi.\n\nRatione molestiae numquam consequatur officia explicabo. Commodi dolores ut voluptas est non illum. Maxime suscipit quo.\n\nLaborum distinctio qui est. Odio aut itaque. Ratione delectus cumque ea asperiores qui rerum reprehenderit. Aut ullam ut. Et ad aspernatur doloremque omnis sed repellat voluptatum ipsa eum.\n\nMagni amet atque ullam ut. Pariatur illum amet reiciendis cumque sapiente. Similique aliquam saepe labore nobis.\n\nIusto odit aperiam rerum voluptate. Ea atque non. Rerum sequi consectetur possimus deleniti.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("3e609f1f-2b3d-44e6-b9c2-b204718c5c8a")
                        },
                        new
                        {
                            Id = new Guid("9faacf2b-985c-4cbd-a74b-04e5b82f5ccf"),
                            Content = "Id aperiam sed eum. Sequi doloremque enim quia unde nihil amet ut. Minus accusamus et dolorem dicta suscipit a. Iste consequuntur ducimus aperiam aut quidem nostrum.\n\nQuia tempore ad. Quo sed aspernatur debitis corrupti. Eligendi itaque ut quas. Vitae cum et est provident neque sunt officia quis iusto. Vel dolores facilis quis consequuntur.\n\nMolestias atque omnis repellendus quas. Quae dolorum aut ducimus reiciendis ab sapiente adipisci nesciunt. Incidunt vero vel nesciunt eligendi voluptas ullam.\n\nVero eveniet inventore et voluptatum. Ipsa dolorem qui ea qui fugit corporis repellat tempora beatae. Saepe tempore ea iusto quibusdam minus. Iste quis autem. Ratione quia repudiandae molestiae quia repudiandae nam quas aut dolor. Possimus repudiandae nisi debitis rerum quidem nobis.\n\nUt et et nemo similique. Aspernatur soluta numquam ipsam tenetur aliquam ea autem. Earum animi aliquid mollitia nam. Facere expedita nesciunt eligendi mollitia voluptatem deserunt aliquam repellat est.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("3e609f1f-2b3d-44e6-b9c2-b204718c5c8a")
                        },
                        new
                        {
                            Id = new Guid("3b8a8a5e-f53d-4c6c-99b3-f06689a15fdc"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("f07526b1-6e3d-42cc-b593-03f3ad6ad274")
                        },
                        new
                        {
                            Id = new Guid("896e76c3-3964-4cb2-b015-e78582ba59e5"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("f07526b1-6e3d-42cc-b593-03f3ad6ad274")
                        },
                        new
                        {
                            Id = new Guid("8d5a027a-8818-4f9e-9c74-e00165b90d9b"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("a5cde3cf-0331-4ed1-acad-3f8e2f140293")
                        },
                        new
                        {
                            Id = new Guid("51e9494c-e7b9-4c86-881c-db77621d50df"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("a5cde3cf-0331-4ed1-acad-3f8e2f140293")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ForumPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("651283f9-fdd0-4355-9f22-b952459f53db"),
                            CategoryId = new Guid("7a692973-188a-464b-a5cf-428abcde9487"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 7, 18, 28, 34, 76, DateTimeKind.Local).AddTicks(1519),
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("3e609f1f-2b3d-44e6-b9c2-b204718c5c8a"),
                            CategoryId = new Guid("c6ce9e2e-7ec9-4488-877e-b618a5be7adb"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 7, 18, 28, 34, 76, DateTimeKind.Local).AddTicks(1563),
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f07526b1-6e3d-42cc-b593-03f3ad6ad274"),
                            CategoryId = new Guid("a89fa6a3-6700-49dc-9858-4f5ee357d1db"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 7, 18, 28, 34, 76, DateTimeKind.Local).AddTicks(1758),
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("a5cde3cf-0331-4ed1-acad-3f8e2f140293"),
                            CategoryId = new Guid("be050c02-db2c-470c-951a-cacf32ca40d0"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 7, 18, 28, 34, 76, DateTimeKind.Local).AddTicks(1763),
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("651283f9-fdd0-4355-9f22-b952459f53db")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumTopic", "ForumTopic")
                        .WithMany()
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumTopic");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("ForumPostId");

                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.Category", "Category")
                        .WithMany("WikiPages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Navigation("WikiPages");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
