// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240430181726_AddCategoryModel")]
    partial class AddCategoryModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6bfae2d-3c20-4e74-bd00-0f4c619dd775"),
                            Content = "Nihil temporibus est omnis quod quia quis animi consequuntur. In et culpa quia aliquid totam qui expedita dolorum. Dolor tempore eveniet tempore eum reprehenderit.\n\nDolorem qui vel et repellendus. Fugiat eveniet eaque veritatis aut doloremque harum magnam nam. Nam illo aliquid.\n\nAnimi itaque nisi quis eveniet reprehenderit nobis. Et asperiores ut eligendi aut architecto. Dolore ut et non qui et quia amet. Excepturi odio eaque natus rerum rerum. Suscipit modi nesciunt quis ut.\n\nExplicabo sequi eum quas. Repellat consequatur molestiae. Consequatur magnam exercitationem ab earum omnis vitae reiciendis et beatae. Ut ut consequatur pariatur reprehenderit sit sit architecto. Ut autem natus minus quam et aliquam. Aperiam accusantium dolorum natus repellat itaque.\n\nEt nihil sit aut sequi eius voluptatem. Quo rerum molestiae maxime expedita nostrum vitae voluptatem libero quis. Earum asperiores rerum consequatur ullam nam. Voluptatibus corrupti molestiae. Facilis in sed esse modi aut voluptatem. Ea modi culpa doloremque aut quam voluptatem eos fuga quibusdam.\n\nHarum officia ea adipisci assumenda ullam distinctio provident corporis. Voluptatem dicta dolore sunt accusamus deleniti temporibus amet. Nisi tempora voluptatibus iste minus deserunt quo.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("a6157532-1afc-42bf-bf84-640d61eeaacb")
                        },
                        new
                        {
                            Id = new Guid("29fd6741-2526-47f4-b1f9-5f967afa79c9"),
                            Content = "Voluptatem aut cumque nihil. Libero maxime error unde ipsam. Incidunt aut omnis harum sed et repellat. Nisi ut ut iusto facilis nesciunt eius aut velit. Qui dolor quasi eos.\n\nExpedita distinctio molestiae totam laboriosam quia quam natus nisi rerum. Eum sit optio. Est neque perspiciatis quasi non.\n\nVeritatis nobis rerum cupiditate enim asperiores aut illo. Excepturi hic delectus omnis illum est illum minus. Error et eos placeat mollitia. Totam aut nam quas. Aliquid voluptate commodi quo itaque iste quo.\n\nRepellat voluptatem qui est nisi quae consequatur. Sunt a molestiae quod. Et necessitatibus sed minus amet beatae beatae ullam.\n\nUllam neque est odit dignissimos est. Occaecati omnis ducimus perspiciatis harum ea quam impedit et quis. Tenetur minus culpa exercitationem vero non exercitationem. Id autem et sed qui nihil porro veniam asperiores voluptatem. Et voluptatem ut voluptatem. A reprehenderit ut molestiae.\n\nItaque aut nisi voluptates quae pariatur possimus. Culpa repudiandae quia dolores debitis doloremque possimus rerum est qui. Blanditiis voluptates asperiores ut minima voluptas esse iusto.\n\nBeatae tenetur dolorem laborum dolorum nobis voluptas est quidem quia. Optio dolorem qui. Earum sequi et sed at qui ipsum. Laborum assumenda et. Sed nemo consequuntur hic non.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("a6157532-1afc-42bf-bf84-640d61eeaacb")
                        },
                        new
                        {
                            Id = new Guid("a9a771a2-7ea9-4f05-b24a-be28f0d1fe25"),
                            Content = "Ullam iste eveniet veritatis eaque molestias eligendi ducimus. Voluptas vel corrupti iusto voluptatibus est facere voluptatem eligendi. Optio aut rem non suscipit voluptatem sint. Et soluta eveniet ipsam ducimus ut pariatur et neque. Itaque eum blanditiis adipisci et laudantium.\n\nEx id ullam veniam ea iste est vel. Minus nemo consequatur. Voluptate sit nisi non rerum molestiae. Asperiores excepturi numquam sit porro non est.\n\nCum aliquam iste eligendi eaque consequuntur atque deleniti quas. Voluptatem blanditiis dolorem nesciunt sed autem architecto. Et error consequatur. Ut quasi et veritatis ea neque in blanditiis. Quod asperiores voluptatem suscipit necessitatibus. Sit delectus modi eum impedit ut provident.\n\nAutem esse sunt ut. Reiciendis id ut ad modi non voluptatibus veritatis fuga tenetur. Eos nemo provident aut.\n\nCorporis autem veniam ut mollitia id. Ipsam est eius ut at asperiores. Nihil quo non rerum optio alias cum.\n\nDolorem a est numquam magni quia mollitia consequatur ut eius. Nam id possimus possimus molestias provident suscipit. Repudiandae animi consequuntur tenetur qui dolorum quisquam. Veniam aut iure dolorem ea aperiam.\n\nConsequatur a necessitatibus nesciunt eum officia maiores natus eos. Impedit nostrum veritatis enim dolorem qui et. Qui delectus aperiam consectetur sunt. Nam necessitatibus suscipit odit vel. Dignissimos dolor aspernatur.\n\nRerum ducimus quod. Enim blanditiis in. Autem voluptas quis est non hic numquam ea in odit.\n\nAutem voluptatem rerum sed reprehenderit consequuntur. Cum perferendis perferendis sunt. Soluta suscipit iusto id temporibus facere amet mollitia quos ducimus. Quisquam ullam quaerat nihil optio. Omnis quas harum ducimus minima mollitia fugit accusamus porro ut.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("a6157532-1afc-42bf-bf84-640d61eeaacb")
                        },
                        new
                        {
                            Id = new Guid("30c33dd6-8f44-4d24-9cc9-ba30aed5a3d2"),
                            Content = "Est voluptas sit dolor incidunt officiis officia. Praesentium quas maxime non facilis voluptatibus odio. Delectus repellendus exercitationem saepe et velit qui libero est. Sit omnis sunt cupiditate voluptate. Tempore maxime nesciunt dolor reiciendis ut quae error non.\n\nQuas sequi iste soluta voluptatum dolorem. Praesentium commodi veniam error earum. Fuga ut consequatur repellendus autem.\n\nSapiente rerum iure consectetur atque. Inventore quasi illo voluptas aliquid quis cum ut quos ut. Nesciunt et fugit quae magni molestiae praesentium dignissimos tempora maxime. Quasi explicabo quia laboriosam placeat.\n\nMagnam modi quis et quos. Temporibus facilis ut sed porro deleniti eum rerum corporis. Iusto et dolor. Accusantium omnis fugit est qui et dolorem ad.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("a6157532-1afc-42bf-bf84-640d61eeaacb")
                        },
                        new
                        {
                            Id = new Guid("1cdea84a-38ab-43bb-9514-18711088a971"),
                            Content = "Eum quasi sed inventore et expedita quas omnis sit. Ut suscipit molestiae sit repellendus. Suscipit earum hic. Facilis dolorem dolores.\n\nQuisquam veniam quisquam nihil quod sunt laboriosam. Ipsum est unde non assumenda deleniti. Cumque sed assumenda commodi est. Molestias possimus dolores voluptatibus voluptates laborum ipsam.\n\nLaudantium reiciendis inventore debitis enim cum officiis consequatur nisi. Nam molestiae dolorum voluptas autem consectetur adipisci itaque vel. Assumenda est quam doloribus. Sed enim deserunt vel rerum et. Omnis eligendi facilis nostrum sed qui nisi.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("a6157532-1afc-42bf-bf84-640d61eeaacb")
                        },
                        new
                        {
                            Id = new Guid("e642e099-1850-4376-81e3-ded2ff34a637"),
                            Content = "Laudantium aspernatur sint porro reprehenderit iste illo. Ut odio explicabo similique earum rerum odio. Ea nihil ut sequi voluptatem nesciunt. In id iure qui eos est ea doloribus minima omnis. Consequatur ea aut id.\n\nLaudantium laborum repellendus consequatur. Praesentium harum ad suscipit consequatur et nulla repudiandae cumque. Omnis odit ipsum. Sed et corporis mollitia vel enim eos voluptatum rerum. At expedita cumque consequatur et non quo est. Deserunt et veritatis itaque vel nulla et nam et officia.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("a6157532-1afc-42bf-bf84-640d61eeaacb")
                        },
                        new
                        {
                            Id = new Guid("795d7fd5-2018-4054-863b-b6a51cb6db24"),
                            Content = "Porro facere ullam. Eveniet eaque sint sint sit non enim eum. Hic dolorum et. Velit sint et cum reprehenderit in est non. Aliquam rerum et est odio.\n\nEt sapiente accusamus aut explicabo quia. Impedit placeat vel aperiam quis consequatur enim velit iusto voluptatem. Earum id rerum ipsa dolorum dolores.\n\nQuia quo eaque consequatur rem. Aperiam nihil quo sint qui. Accusantium voluptatem et facilis sed. Ratione quis facere officiis ea occaecati. Sunt dolorem consectetur. Fugiat adipisci voluptas vel dolorum repudiandae sed porro et qui.\n\nQui facilis consequatur voluptas veniam sapiente. Quia error eaque. Consequatur laudantium ad officiis facilis eius consequatur nihil illum. Sunt asperiores eum dolores occaecati placeat neque est et vero.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("a826742d-78d1-4797-a4a1-ad752eedede2")
                        },
                        new
                        {
                            Id = new Guid("2721329d-1ccf-4cb9-b7b6-6e5091f6f523"),
                            Content = "In laudantium quibusdam architecto repudiandae pariatur temporibus eos nostrum. Aut perferendis quae. Quod doloribus sequi.\n\nQui id vel totam alias reprehenderit. Et debitis sed quia ut recusandae accusamus. Laboriosam rerum officiis quis ut error consequatur dolor qui. Ipsam autem quis facilis labore ex et eos quis.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("a826742d-78d1-4797-a4a1-ad752eedede2")
                        },
                        new
                        {
                            Id = new Guid("3352bbbc-f4b7-4b5a-9c5f-1fd88464fe1e"),
                            Content = "Vitae omnis pariatur rerum maxime provident. Id nihil pariatur consequatur soluta suscipit. Optio eum aperiam adipisci repellendus assumenda molestias. Iste vel aut reprehenderit et nihil qui animi rem placeat. Officiis qui impedit aut minima dolor sunt iure ducimus repudiandae.\n\nAt maxime corporis ea unde alias quas rerum ipsa vero. Nulla vel facilis. In cumque impedit.\n\nId alias fuga omnis. Et vel similique. Repellendus est veritatis enim velit explicabo ut itaque. Laudantium eos ex perspiciatis blanditiis est.\n\nUt itaque in facilis. Error omnis non amet natus consequuntur unde. Similique sunt culpa quis architecto nulla.\n\nAnimi minus ab et maiores officiis quis impedit est sapiente. Quam ullam facilis voluptas autem nobis labore. Suscipit aliquam unde eius recusandae fuga. Dignissimos dolorem aut sequi sapiente et a recusandae officiis explicabo. Ea exercitationem quos provident ipsam adipisci molestias.\n\nVoluptatum doloribus aspernatur illo in pariatur eos voluptatum id. Necessitatibus nihil aliquam. Neque quas eius veritatis dolorem. Consequatur fugiat quod sint totam sed architecto assumenda porro et. Perspiciatis vero molestias perspiciatis.\n\nInventore ipsum impedit dolore perferendis officiis illo cum ut sunt. Eius error ea id ut. Quidem quaerat molestiae rerum fugiat saepe saepe nisi. Repudiandae dolor neque sed corporis ipsum.\n\nMaiores et adipisci laborum at provident. Perspiciatis vero quia. Et ad totam pariatur voluptas illo inventore vel blanditiis.\n\nLaudantium rerum dolores. Omnis nemo fugiat. Aut omnis commodi ut cupiditate iste dolore. Unde laudantium ex aut nisi animi. Consectetur non debitis. Inventore omnis ullam vel eos et.\n\nIste id necessitatibus rerum neque non. Nam similique voluptatem nemo. Unde sunt in. Nulla nemo qui. Dolorem ipsam repellendus exercitationem possimus aut. Dolorum dolores aut et sapiente illum commodi vero.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("a826742d-78d1-4797-a4a1-ad752eedede2")
                        },
                        new
                        {
                            Id = new Guid("0a31d620-848d-4adc-a862-65cdd828c2f3"),
                            Content = "Accusamus quia repellendus dolor ipsa minima quae. Ex quidem possimus. Ullam eos ad molestias voluptatem ea dolorem id corrupti provident. Sequi autem quae unde. Magni nesciunt omnis.\n\nUnde consequatur nostrum deleniti quibusdam illum autem incidunt sit. Eius voluptates vitae id. Quo tempore possimus omnis dolor voluptates id reiciendis sed.\n\nQui at dolor repudiandae vero expedita. Eum aut qui aspernatur repellendus ut eos. Consectetur doloremque placeat quibusdam nulla amet est. Aut provident dolorum voluptatem minus.\n\nHic quia aut in soluta praesentium hic voluptatum consequatur. Sit voluptatum est quaerat. Nihil repellendus tenetur ex. Voluptatem adipisci earum. Ex quos autem consequuntur ex non similique repudiandae eos. Voluptas omnis temporibus et sed perferendis voluptatem.\n\nMinima illo magni aut commodi molestiae neque. Dolorem eveniet quisquam repudiandae occaecati. Exercitationem necessitatibus est fugiat saepe omnis dolorem.\n\nFugiat suscipit sit eos odit aut et qui. Ipsum magni eveniet ut laudantium aliquam voluptas laboriosam quam aut. Labore sunt praesentium non labore quaerat consequuntur. Vel dolorum reiciendis.\n\nAut sunt ipsa facere amet. Ut neque autem ipsam quisquam. Ut earum qui iure dolores quae.\n\nQuia in iste. Velit atque id aut laborum rerum voluptatum. Autem magnam sequi qui qui amet. Ex et iure doloremque neque ut sunt repellat quisquam. Quidem enim voluptatibus nesciunt aut iure ab voluptatem non libero. Rerum culpa nulla enim veritatis est exercitationem.\n\nEt omnis porro facilis minus. Dolore nesciunt quam soluta possimus voluptate rem impedit nisi. Nostrum eligendi ducimus reprehenderit. Labore mollitia est eveniet vitae dolor modi. Non similique aliquid iste.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("a826742d-78d1-4797-a4a1-ad752eedede2")
                        },
                        new
                        {
                            Id = new Guid("d3d710be-e110-48a5-a5bb-9fd5668cd4f0"),
                            Content = "Voluptatem voluptatem beatae omnis totam. Harum voluptate earum est neque nihil praesentium ut voluptatum quia. Odit est sint accusamus rem velit id aliquid praesentium. Temporibus earum magni doloremque iusto. Dolore quis incidunt distinctio. Labore nobis quae sed rerum.\n\nDolor sed quia eius tempore delectus accusamus. Iusto saepe deserunt nesciunt laudantium omnis. Voluptatem distinctio et assumenda impedit quis repellendus non et. Voluptatum aut quia sapiente.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("a826742d-78d1-4797-a4a1-ad752eedede2")
                        },
                        new
                        {
                            Id = new Guid("36cc5272-501e-4811-afef-912420949eac"),
                            Content = "Enim laborum necessitatibus corporis in. Nesciunt est ratione. Velit labore reprehenderit blanditiis et rerum totam. Sed aspernatur dolores dolorum unde sed tenetur fugiat omnis quis. Nostrum earum dolorum quia neque nulla mollitia sint aliquam natus.\n\nRerum repudiandae ut et eum. Eos consequuntur ut. Eligendi perferendis eligendi ut. Ea ea doloremque rerum distinctio perspiciatis. Voluptatem molestiae est neque quia pariatur id. Omnis dignissimos amet quia eligendi est molestiae ducimus deserunt quisquam.\n\nFugit rem delectus deleniti reprehenderit unde et vel dolorem provident. Explicabo mollitia eum. Magnam qui vel et non.\n\nVoluptatibus et ratione alias exercitationem rerum porro tempore. Quia nihil nam fugit voluptas rerum aspernatur rerum doloribus. Reprehenderit enim temporibus id qui quo et maiores quia cum.\n\nDucimus dolores quidem temporibus laborum repellendus. Quis doloribus iusto. Repellendus ut autem distinctio nulla animi omnis harum. Vitae repellendus quo porro nostrum dolores.\n\nId similique pariatur enim. Ad consectetur et ut repellat fugiat ut. Iste temporibus voluptatum. Modi in dolores voluptas. Dignissimos cumque distinctio.\n\nQuaerat ad a. Voluptatem in perferendis reiciendis distinctio necessitatibus. Et consequatur libero porro.\n\nDolorem voluptatem qui officia. Voluptatum doloremque porro beatae voluptatum. Neque minus placeat deserunt quasi quo odit. Nulla cupiditate illum dolorem. Eius quae ratione rerum doloremque.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("a826742d-78d1-4797-a4a1-ad752eedede2")
                        },
                        new
                        {
                            Id = new Guid("3808e043-9757-439d-86ac-da99ebcc20b5"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("af347d49-a13b-4bd7-ab02-b041c7cb2b56")
                        },
                        new
                        {
                            Id = new Guid("0654dbbf-b144-48ae-b92c-49e23ee3075c"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("af347d49-a13b-4bd7-ab02-b041c7cb2b56")
                        },
                        new
                        {
                            Id = new Guid("662a35d1-0938-4e2b-a081-6cdab0e62431"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("61ac58bf-5009-4f1a-a9a2-7892b1bc470e")
                        },
                        new
                        {
                            Id = new Guid("7b087457-2cc8-4d08-bbec-68b0ea60ca2f"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("61ac58bf-5009-4f1a-a9a2-7892b1bc470e")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6157532-1afc-42bf-bf84-640d61eeaacb"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 4, 30, 20, 17, 26, 429, DateTimeKind.Local).AddTicks(6332),
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("a826742d-78d1-4797-a4a1-ad752eedede2"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 4, 30, 20, 17, 26, 429, DateTimeKind.Local).AddTicks(6376),
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af347d49-a13b-4bd7-ab02-b041c7cb2b56"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 4, 30, 20, 17, 26, 429, DateTimeKind.Local).AddTicks(6491),
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("61ac58bf-5009-4f1a-a9a2-7892b1bc470e"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 4, 30, 20, 17, 26, 429, DateTimeKind.Local).AddTicks(6495),
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("a6157532-1afc-42bf-bf84-640d61eeaacb")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
