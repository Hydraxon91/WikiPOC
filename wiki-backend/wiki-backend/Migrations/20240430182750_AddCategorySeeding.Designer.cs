// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240430182750_AddCategorySeeding")]
    partial class AddCategorySeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ddbad4c2-10ae-4ec3-bdee-dc4d584c5cba"),
                            CategoryName = "Characters"
                        },
                        new
                        {
                            Id = new Guid("1c98ac51-192c-413d-9f0a-c2898599b151"),
                            CategoryName = "Stories"
                        },
                        new
                        {
                            Id = new Guid("83624968-0f97-4954-a952-a4dc92731c3c"),
                            CategoryName = "Locations"
                        },
                        new
                        {
                            Id = new Guid("9eb498f8-cd4d-48e1-946a-121907da30b8"),
                            CategoryName = "Events"
                        },
                        new
                        {
                            Id = new Guid("ec849a0b-3580-47a4-98ce-25a485f4e6bd"),
                            CategoryName = "Organizations"
                        },
                        new
                        {
                            Id = new Guid("523d7db5-d6a3-4677-9a64-f8e189651f6c"),
                            CategoryName = "Concepts"
                        },
                        new
                        {
                            Id = new Guid("8cf75655-bf3a-4082-b8c9-18b7353191db"),
                            CategoryName = "Technologies"
                        },
                        new
                        {
                            Id = new Guid("4bf92abf-bcc6-486e-8188-73be45522602"),
                            CategoryName = "Arts and Entertainment"
                        },
                        new
                        {
                            Id = new Guid("82244d21-a880-43c2-affd-ad1d5f0f5009"),
                            CategoryName = "Sports and Recreation"
                        },
                        new
                        {
                            Id = new Guid("c6912188-e198-40a9-b448-da052a5a02ea"),
                            CategoryName = "Science and Technology"
                        },
                        new
                        {
                            Id = new Guid("9a1e3257-f680-45ce-ac90-e30ea73d88df"),
                            CategoryName = "History and Culture"
                        },
                        new
                        {
                            Id = new Guid("87a69cd8-9689-4ec1-b9bb-00e84eee06d2"),
                            CategoryName = "Food and Drink"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f88395b5-4490-43e7-8419-97c8afc380cb"),
                            Content = "Ea voluptate quasi voluptas eveniet. Laboriosam in nisi officia aut. Voluptatum adipisci laudantium occaecati omnis incidunt hic fugiat est. Vel cupiditate numquam nulla dolorem perferendis aut voluptatem est. In excepturi qui iste.\n\nDeleniti pariatur id ex ut vel velit. Aut qui quaerat eius blanditiis numquam error deleniti fugit. Quia odio tempora cupiditate repudiandae aut tempore autem cumque. Fuga illo sapiente vitae eius et.\n\nCorporis ratione officiis ducimus eveniet molestiae tempore. Sequi incidunt error ea molestiae ratione a. Et ex eum.\n\nQui ut fugiat odio quis recusandae dolor velit qui. Eum placeat dolorum illo eligendi repellendus nulla. Culpa enim ab assumenda. Unde ullam omnis perferendis non.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("d36fc95c-1d8c-457d-894f-31b54ca9f1f5")
                        },
                        new
                        {
                            Id = new Guid("82c2d12d-ee60-4fa8-b456-ae09de6bd032"),
                            Content = "Provident rerum quae cumque sint. Deleniti eaque sit accusamus laboriosam corrupti explicabo eos et cupiditate. Ut qui nisi. Voluptas id nemo ea aut nisi.\n\nCommodi quo voluptatibus nostrum at error voluptas esse sit. Ullam excepturi quia. Enim non assumenda expedita.\n\nEt molestiae rerum unde neque delectus quia impedit fugit architecto. Incidunt aut architecto nemo nihil deserunt asperiores facilis accusantium. Qui tempora id accusantium id est. Quia quibusdam iste. Laboriosam laboriosam dolor rerum quae perspiciatis sit quae ipsum. Ipsa ducimus ut repellendus magnam quos vel temporibus quasi.\n\nRem et praesentium unde rerum rerum placeat. Esse similique nihil neque nulla. Nemo consequuntur dolorem. Magni aliquid delectus molestiae dignissimos ea ex optio assumenda ea.\n\nOmnis magnam dolores odio nemo quia libero dolor totam quia. Consectetur unde occaecati qui et. Consequatur quo voluptas libero vel quasi.\n\nOmnis voluptatem voluptatem. Omnis magni id labore hic. Quibusdam ut ab qui minus aut quis vel nihil et. Nam incidunt tempora placeat voluptatibus vitae aut. Cum impedit architecto quia neque.\n\nFuga qui sint explicabo eligendi enim architecto cumque harum. Aut ut quisquam corrupti qui tempore nostrum. Nesciunt quibusdam recusandae impedit reiciendis. Voluptas esse facere qui magnam est et non corporis. Laborum et eaque laudantium molestiae ut facere. Ut voluptatem aut laboriosam aspernatur explicabo eum aut.\n\nVitae amet voluptatum nostrum. Quia natus aspernatur maiores. Dolorem et consequatur molestiae. Eos possimus molestiae.\n\nDoloribus fugiat facilis a et. Quia ipsam quod et ipsum voluptatem. Dolores ut consequatur assumenda quo expedita voluptates voluptas velit. Reprehenderit corrupti vitae dolorem. Voluptate voluptatem molestias commodi. Qui tempore a sint accusamus.\n\nVoluptates magni eum sunt earum illo est fugit fuga. Consequatur a dolorem qui itaque commodi itaque. Saepe culpa laborum.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("d36fc95c-1d8c-457d-894f-31b54ca9f1f5")
                        },
                        new
                        {
                            Id = new Guid("d4fc4989-b4b4-4cee-a846-92327577afcb"),
                            Content = "Optio provident voluptas eveniet autem. Sit maxime reprehenderit assumenda in qui modi labore. Doloremque sit nam dicta pariatur. Iusto reiciendis omnis magnam. Provident voluptatem maxime numquam. Id delectus nulla omnis unde.\n\nTempore ut nihil facilis eius rerum fugiat magnam possimus. Ullam earum deleniti natus beatae saepe et. Velit et nam non.\n\nQui et quia porro fugiat aut eligendi quo. In aut et eaque nihil neque iure ex. Vel officia reprehenderit qui consequatur eaque aliquid aut deleniti. Occaecati eveniet quibusdam recusandae. Aliquam veritatis laudantium qui ipsum ut soluta. Quis vel vel totam perferendis veniam dolore soluta blanditiis.\n\nEst sed ut est. Vero rerum soluta culpa quo. Dignissimos animi nesciunt. Dignissimos eveniet harum voluptate quod sit laborum.\n\nEaque aliquid odio nam suscipit cum. Optio nihil voluptates sit enim dolores qui et rerum. Doloremque omnis culpa tempora consequuntur enim a ea sint minima. Nesciunt vel id nihil deserunt quis et adipisci dolores praesentium. Repellat voluptas deleniti a qui. Quae aut praesentium hic voluptas reiciendis iste quibusdam molestias.\n\nEx et soluta ab dolores quia enim qui consequatur. Aut sapiente et molestiae cum dolore modi quaerat illo hic. Accusantium voluptas vero voluptatum et enim corporis est amet autem.\n\nQui rerum vel culpa quo qui enim accusantium. Et magnam voluptatem tempore. Saepe iure repellendus non velit molestiae nesciunt sunt. Et omnis tempora officia quas eligendi quos rerum reprehenderit autem.\n\nDolorem quia recusandae ut eius et voluptatem eaque dolores ducimus. Quisquam dicta minus aliquid est. Minus earum deserunt voluptatem qui minima qui animi quo ipsam. Rem quibusdam adipisci similique. Necessitatibus amet aut distinctio sunt ipsam tempora sed cupiditate consequuntur. Fuga voluptate dicta.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("d36fc95c-1d8c-457d-894f-31b54ca9f1f5")
                        },
                        new
                        {
                            Id = new Guid("8fcb009a-e309-499e-9649-642528b404ed"),
                            Content = "Et ullam est dolorum repudiandae ipsa. Ut vitae in. Sint eveniet et aut quia laudantium quo quia. Quis et molestias officiis aliquid ea ratione et unde. Nisi voluptatibus occaecati voluptatem ut delectus dolores ullam.\n\nQuaerat ut eveniet. Deleniti explicabo laboriosam in labore illum recusandae eius. Delectus dolor voluptatibus voluptatibus est.\n\nVoluptas qui facilis occaecati harum consequuntur voluptatum quis qui. Expedita saepe quia consequatur. Eum quia at aut quisquam. Inventore saepe enim velit deserunt. In velit similique. Tempora dolores labore mollitia esse nesciunt quia.\n\nOfficiis sint sit enim voluptas nulla quo ducimus et esse. Nobis doloribus nihil. Consequatur accusamus perferendis maiores quibusdam enim sed id. Quisquam rerum et qui. Et qui nesciunt eos eos necessitatibus. Enim est tempora facilis exercitationem corrupti occaecati earum enim.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("d36fc95c-1d8c-457d-894f-31b54ca9f1f5")
                        },
                        new
                        {
                            Id = new Guid("8eb0c849-4b46-4064-9609-eade689467f5"),
                            Content = "Consequatur libero rem qui qui sunt provident error consequuntur. Neque laborum modi mollitia. Pariatur cumque sequi.\n\nAt velit ex velit facilis aperiam recusandae dignissimos. Tempore ut iusto praesentium. Aut voluptatem impedit animi. Harum qui quis veritatis.\n\nBeatae et illum voluptates non tempore quis consequatur cumque ab. Recusandae dicta non facilis quas sit laborum vitae consectetur itaque. Sunt ea qui non nobis voluptate aut quia.\n\nMaiores ratione iure dicta corrupti sapiente aut asperiores est eos. Ut qui aut est est exercitationem non porro sit illum. Nisi provident et. Repellat omnis voluptatem est minima quod quidem veniam.\n\nRerum modi assumenda iste consectetur beatae et. Ab facilis reprehenderit quisquam officiis delectus. Est provident qui eveniet blanditiis explicabo qui. Animi occaecati omnis et blanditiis aperiam. Voluptatum excepturi iusto qui. Voluptatem nisi sunt ratione dolorem maiores enim consequatur.\n\nConsequatur repudiandae necessitatibus expedita voluptas ut id dolore aliquid. Tempora ut voluptatem odio nisi sapiente pariatur. Aut voluptatem similique aut rem ut et harum blanditiis dicta.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("d36fc95c-1d8c-457d-894f-31b54ca9f1f5")
                        },
                        new
                        {
                            Id = new Guid("9d1a985f-73d1-4d4c-9087-624106526577"),
                            Content = "Et sit quae unde est quae autem fuga. Numquam accusamus quia modi rem magnam eligendi eos libero. Rerum velit deleniti. Beatae iure facilis at iste tenetur vitae omnis sunt laudantium. Et voluptatem et accusantium porro.\n\nDolor vero non ab qui nobis est quod iste eos. Aut vel quas tempore odit ut minima velit qui. Nam et tempora adipisci distinctio quam ipsum eius. Corrupti aliquid velit nesciunt.\n\nSed expedita vel. Aut fuga qui provident corporis aliquam totam perferendis in est. Repellat dolor rerum sunt dolores maiores vero ducimus deserunt placeat. Non quas suscipit voluptate incidunt quo. Quia beatae tempora sapiente quibusdam.\n\nOccaecati consequatur et ipsam qui et illo reiciendis necessitatibus. Aut qui voluptatem minus voluptatem. Sunt amet eligendi modi quis ad dolore natus odio. Libero nemo itaque inventore.\n\nAsperiores et omnis sed quis et est minima eaque. Velit qui architecto ducimus ea repellat dolorem officiis. Voluptate inventore dignissimos ad non nihil est. Et asperiores delectus commodi minima velit omnis perferendis. Necessitatibus natus in nulla veniam.\n\nMolestias expedita cumque recusandae nihil deserunt praesentium. Quas laudantium ad. Et tempora consequatur qui voluptatem.\n\nPariatur nihil laudantium sint sit cumque voluptatem. Perferendis voluptas consectetur provident nihil consequatur. Quisquam velit harum quaerat autem. Qui non est. Perspiciatis quam ipsam esse amet quos enim sunt. Ducimus sapiente ipsum.\n\nQuod tempore doloremque nostrum tempora veniam eaque. Omnis harum temporibus beatae possimus. Veritatis ex consectetur. Rerum expedita error earum cupiditate laudantium.\n\nAut veritatis sunt tempora ratione deserunt et. Aut commodi sed molestiae accusamus sed qui ut aliquid. Ratione corrupti at voluptate qui nesciunt.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("d36fc95c-1d8c-457d-894f-31b54ca9f1f5")
                        },
                        new
                        {
                            Id = new Guid("7d527010-9b5e-416a-808c-74f80767a2f1"),
                            Content = "Quas veniam ducimus consequatur molestiae corporis adipisci odit. Eaque quam fugiat qui. Excepturi ad nulla. Deleniti quaerat earum labore praesentium tempore doloribus.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("b6225881-7982-403b-9876-a4fbbd221acd")
                        },
                        new
                        {
                            Id = new Guid("050301e6-2360-480c-b0ed-a108f8cd82bb"),
                            Content = "Pariatur qui repellat dolorem repellat omnis illum. Voluptas impedit illum ducimus magnam architecto nam qui dolore sunt. Est eius voluptates.\n\nDolor omnis voluptate nisi quo eos in dolor molestiae aperiam. Harum velit perferendis debitis iusto mollitia. Harum culpa voluptatem est nulla consequuntur blanditiis recusandae explicabo incidunt.\n\nIn autem totam ipsa consequatur recusandae et enim soluta dolore. Doloribus dignissimos quaerat occaecati ut sint. Eum et nihil ut eius iusto quisquam. Dolorem optio iste. Nemo nam mollitia et voluptatibus inventore nobis doloribus modi alias.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("b6225881-7982-403b-9876-a4fbbd221acd")
                        },
                        new
                        {
                            Id = new Guid("d0573a31-9a57-4698-9841-28b0c23e5c3f"),
                            Content = "Tempora quidem animi aliquam expedita et. Totam possimus et. Id nisi iste odio. Commodi perferendis laboriosam blanditiis qui corrupti exercitationem. Voluptates ipsa iste. Temporibus dolorem iste aut tempore nulla eos aperiam quia tenetur.\n\nNon placeat pariatur. Ut hic rem nihil maiores laudantium sit distinctio. Libero distinctio nihil officia porro suscipit quas est placeat enim. Ut veritatis beatae voluptatem voluptatem et voluptatem aspernatur et molestiae.\n\nEt in est et est temporibus et quis. Nihil autem temporibus mollitia animi cumque. Nulla qui aut accusamus et unde.\n\nDeserunt et dolorum assumenda sed magnam. Fugiat dolor odio odio reiciendis fugit nemo quis deserunt. Quis voluptas voluptatem ipsam assumenda. Veniam occaecati vero reprehenderit explicabo minima. Unde omnis recusandae est quis aut culpa.\n\nEa delectus fugit est reiciendis praesentium incidunt odio quibusdam eveniet. Vel reiciendis est. Vitae dicta officiis inventore expedita mollitia adipisci.\n\nSint sit et iste pariatur totam autem. Aut facilis et aut. Architecto praesentium consequatur laboriosam corrupti ea. Corrupti quia velit ab dignissimos repellat.\n\nVelit magni tempore quas atque esse. Eaque et molestias vero reprehenderit. Velit quo est ut et atque similique aperiam temporibus. Dolor voluptas cum et assumenda fugit iste expedita fugiat. Quam aut voluptates recusandae vel reiciendis et illum. Facere quia libero laboriosam optio.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("b6225881-7982-403b-9876-a4fbbd221acd")
                        },
                        new
                        {
                            Id = new Guid("72f573da-b322-4a60-8152-064e6de4cd23"),
                            Content = "Incidunt soluta labore. Rerum expedita amet delectus sed asperiores dolorem adipisci est quasi. Aut quas vel consectetur. Et est vitae. Qui architecto repellendus consequuntur. Incidunt rerum aut illum totam accusamus sit mollitia natus.\n\nQuia ad architecto magnam est veniam optio fugiat. Eos non fugiat doloremque eius voluptates voluptas voluptas ad. Illo dolores consectetur et labore animi consectetur. Architecto eveniet consequuntur debitis.\n\nUllam delectus quia veniam nemo. Voluptas temporibus quae voluptates qui minima dignissimos. Quasi et in quia. Quia aut ut sit nesciunt et explicabo aut. A occaecati nemo quos aliquam laboriosam harum nemo suscipit ea.\n\nId illo iusto quam consequuntur et. Doloribus quia iure natus recusandae sint assumenda fuga. Accusantium est saepe voluptates consequuntur ratione doloremque. Autem praesentium ut minima dolorum atque. Consequuntur culpa nemo totam et expedita.\n\nConsectetur enim officia adipisci et qui nostrum vero. Reprehenderit reprehenderit vel sint fugiat praesentium alias. Occaecati dignissimos occaecati ipsum. Sunt corrupti quas qui nihil et. Debitis vitae soluta voluptatem ut et nam est voluptas et.\n\nLibero quasi molestiae odio assumenda suscipit animi et doloribus facilis. Itaque sed fugit rerum voluptatum sunt. Voluptates reiciendis tempore corporis ratione. Mollitia voluptatem ducimus at voluptatum et. Molestias quibusdam aspernatur consequatur rerum molestiae praesentium et sequi et. Dolores numquam voluptates.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("b6225881-7982-403b-9876-a4fbbd221acd")
                        },
                        new
                        {
                            Id = new Guid("453e2ede-957c-49bc-b518-749efa2d6a6a"),
                            Content = "Dolores voluptatem harum enim et consectetur corporis quasi est temporibus. In voluptatibus expedita quis quia eum ut. Natus vitae id ut quae suscipit. Sit sunt maiores aliquid.\n\nPlaceat libero repellendus ab adipisci repudiandae possimus tempore voluptates nemo. Rerum ipsa autem esse explicabo. Doloribus nesciunt aliquid illo dolorem at explicabo. Odio mollitia magnam est dolor dolores sequi ut ex expedita. Ut et ducimus cupiditate nesciunt consequatur nesciunt iure omnis.\n\nDignissimos dolor reprehenderit nisi iusto. Reiciendis itaque quam quasi ad. Quo dolor voluptatum laboriosam est necessitatibus voluptatum dignissimos aliquid. Omnis sunt est et nobis explicabo exercitationem accusamus. Et tempore suscipit aut.\n\nAssumenda optio est ut. Nisi aliquid eligendi. Velit reiciendis dolorem eligendi voluptatem tempore minus quasi. Dicta aut explicabo repudiandae unde nesciunt fuga sunt. Omnis exercitationem ad ut.\n\nCum ex facere earum. Eveniet doloribus consequuntur sed ipsam doloremque et. Natus iste qui consequuntur nihil qui. Dolor sed et eaque nobis voluptatem fuga vel perspiciatis ea.\n\nAut dolores dicta minima et doloremque. Commodi voluptatem animi architecto. Ut quisquam harum. Sunt quia reprehenderit ipsam cum qui. Totam eum rerum molestiae aut ullam.\n\nIn sint quia qui aut. Aut quos quia nemo. Cumque quae voluptatem animi perspiciatis sunt error sunt provident incidunt. Asperiores ut magnam ullam libero laudantium.\n\nTenetur harum maiores ratione fugit deserunt. Quas ut enim tenetur sed ut impedit voluptates rerum ipsa. Est perspiciatis voluptatibus alias occaecati voluptates maxime sequi molestiae. Expedita adipisci tempora. Sit deserunt enim est eum.\n\nTempora facere dolor natus. Ratione dolor consectetur. Ducimus cumque debitis cumque rerum. Non atque et quisquam tempore recusandae quisquam maxime dicta et.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("b6225881-7982-403b-9876-a4fbbd221acd")
                        },
                        new
                        {
                            Id = new Guid("82ac5776-0447-408c-a9df-97d426a6d0ff"),
                            Content = "Maxime aperiam quam maiores odio aut vitae. Tempore et velit iure incidunt. Itaque assumenda aut et mollitia sequi et exercitationem dolores. Quos odio eaque. Accusantium et voluptatem.\n\nIpsa hic assumenda magnam suscipit consequuntur temporibus. Repellat et mollitia sed est et natus saepe nisi. Sit dolorem earum tempora. Quia ad magnam reprehenderit omnis ex culpa. Illum nobis velit quo.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("b6225881-7982-403b-9876-a4fbbd221acd")
                        },
                        new
                        {
                            Id = new Guid("b4926123-a196-42bd-9485-7b6ecfbb536e"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("cc222847-863e-4712-9b08-02835a0c43f4")
                        },
                        new
                        {
                            Id = new Guid("190fc036-e11e-4ec3-aa98-9e8d4b44afea"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("cc222847-863e-4712-9b08-02835a0c43f4")
                        },
                        new
                        {
                            Id = new Guid("4cacc6a7-001d-4404-960e-dd2b1183537f"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("8b76f0b0-01ba-4fe5-b8f1-48718c2be071")
                        },
                        new
                        {
                            Id = new Guid("3aaa614a-8a51-4c5f-9f67-e1a7ae2d243e"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("8b76f0b0-01ba-4fe5-b8f1-48718c2be071")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("d36fc95c-1d8c-457d-894f-31b54ca9f1f5"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 4, 30, 20, 27, 50, 435, DateTimeKind.Local).AddTicks(6464),
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("b6225881-7982-403b-9876-a4fbbd221acd"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 4, 30, 20, 27, 50, 435, DateTimeKind.Local).AddTicks(6501),
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc222847-863e-4712-9b08-02835a0c43f4"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 4, 30, 20, 27, 50, 435, DateTimeKind.Local).AddTicks(6607),
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("8b76f0b0-01ba-4fe5-b8f1-48718c2be071"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 4, 30, 20, 27, 50, 435, DateTimeKind.Local).AddTicks(6636),
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("d36fc95c-1d8c-457d-894f-31b54ca9f1f5")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
