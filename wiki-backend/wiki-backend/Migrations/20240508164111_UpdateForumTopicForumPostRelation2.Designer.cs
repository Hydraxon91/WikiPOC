// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wiki_backend.DatabaseServices;

#nullable disable

namespace wiki_backend.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20240508164111_UpdateForumTopicForumPostRelation2")]
    partial class UpdateForumTopicForumPostRelation2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22be1c9b-a3e9-4dbf-a95c-0381188b4d8f"),
                            CategoryName = "Characters"
                        },
                        new
                        {
                            Id = new Guid("0a8e5d4b-a99e-4ef5-b84c-ad152ccc74ad"),
                            CategoryName = "Stories"
                        },
                        new
                        {
                            Id = new Guid("5ae63cb9-43ba-4993-b30a-43af10046f16"),
                            CategoryName = "Locations"
                        },
                        new
                        {
                            Id = new Guid("cadc3bc7-58db-4b9a-b6a2-5ec79c9ddad8"),
                            CategoryName = "Events"
                        },
                        new
                        {
                            Id = new Guid("e035155b-6da3-4c04-83ec-20224a8af4d9"),
                            CategoryName = "Organizations"
                        },
                        new
                        {
                            Id = new Guid("064a69c6-c22d-4cc0-987a-2215b912e1b8"),
                            CategoryName = "Concepts"
                        },
                        new
                        {
                            Id = new Guid("3c4a99a7-6b84-4938-90dd-eecbceb03688"),
                            CategoryName = "Technologies"
                        },
                        new
                        {
                            Id = new Guid("43f84537-1ce0-4894-859f-16aaca3c5d8d"),
                            CategoryName = "Arts and Entertainment"
                        },
                        new
                        {
                            Id = new Guid("6c066abc-a1d5-4072-9dbd-41277e60cbbe"),
                            CategoryName = "Sports and Recreation"
                        },
                        new
                        {
                            Id = new Guid("dbee973e-34f6-47f3-ac07-c1921fe157a3"),
                            CategoryName = "Science and Technology"
                        },
                        new
                        {
                            Id = new Guid("1a3763ef-66f7-4044-a632-169d762e6956"),
                            CategoryName = "History and Culture"
                        },
                        new
                        {
                            Id = new Guid("d12c441b-81ab-4e79-a218-987284307616"),
                            CategoryName = "Food and Drink"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForumTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForumTopics");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParagraphImageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WikiPageId");

                    b.ToTable("Paragraphs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("faecb3d9-254d-4b50-912a-83120af7b634"),
                            Content = "Quis voluptas modi eos sed fugiat. Saepe minima minus est enim non cum id odio quia. Culpa assumenda dignissimos qui enim et. Rerum repudiandae tempore neque tempore suscipit atque id dolorum. Debitis ab cumque nostrum. Est earum ea.\n\nEsse magnam reiciendis iure officia. Et error in hic consequuntur similique aut aut autem. Facere non explicabo sit omnis ducimus ut. Sed dolores blanditiis omnis sit culpa libero. Voluptas nobis consequatur eligendi et et accusantium harum rerum velit. Numquam tenetur officia quia.\n\nSoluta autem necessitatibus placeat a. Et officiis sed soluta itaque occaecati. Ab quae non rerum.\n\nQuas iusto cum nisi eos. Laudantium ipsam minus sunt qui libero consequatur. Placeat odit sed explicabo eveniet id provident. Laborum praesentium totam aut ut.\n\nQuasi hic velit soluta et quae est. Quisquam iusto nulla reiciendis saepe distinctio iste suscipit. Et eveniet ad sint nam accusantium. Rem nihil illum sed illo non porro sint. Ut nesciunt ullam natus delectus aspernatur. Corporis illo iusto voluptatum numquam.\n\nDistinctio et fuga quod voluptatibus placeat repudiandae. In id harum eum molestias molestias deleniti. Nostrum ratione rerum laborum delectus quod vel deserunt rerum molestias. Commodi qui quae saepe quia reprehenderit atque et provident cum. Velit neque eveniet error dignissimos. Laudantium nobis quod maiores qui saepe qui doloremque odit.\n\nPerspiciatis repudiandae eligendi vel itaque placeat esse alias voluptatem et. Laborum fuga eum consequatur tempore et laborum impedit. Ratione laudantium nisi est sequi inventore magnam necessitatibus qui. Nam et ea fugit sit impedit.\n\nQuo sapiente aspernatur beatae. Culpa occaecati at nihil quo. Eveniet esse doloremque id id quia. Ratione asperiores quibusdam alias quis dolores rerum similique culpa dolores.\n\nQui magni fugit dolore officiis. Qui fugit sit ipsam rerum enim. Id distinctio facere molestiae sint error minus. Optio placeat unde est commodi similique numquam fugiat voluptatem dolores. Aliquam aliquid nobis dolorem ipsa harum odit illo fugit. Incidunt quia ullam omnis harum doloremque corporis repellat unde ex.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 1",
                            Title = "Example Page 1 - Paragraph 1",
                            WikiPageId = new Guid("9e39a89d-c92e-4ad3-8865-846c91078738")
                        },
                        new
                        {
                            Id = new Guid("ed004a11-61c8-4971-a113-4397b04303df"),
                            Content = "Quod et vel vel quia porro. Vel non alias cumque est dolorem a. Ut labore itaque enim beatae. Provident quam quia voluptatum aut alias velit.\n\nUt ut ratione. Dolores mollitia dolores sed doloremque. Tempore quam accusamus et dolores.\n\nVoluptatem provident omnis recusandae. Dolorem voluptas voluptates quo. Autem minima aut quaerat mollitia repellendus tempora expedita. Ut rerum rerum voluptatibus eos magnam assumenda eum repudiandae. Suscipit quidem doloremque velit ex.\n\nEt optio nihil et natus aut tempore. Reprehenderit ex provident. Quis ratione perspiciatis natus accusantium quaerat.\n\nQui ut est neque id iure deserunt. Recusandae eum enim beatae nemo cupiditate consequatur unde. Aspernatur explicabo est consequuntur facilis quas molestiae debitis. Sunt harum molestias reprehenderit. Mollitia molestiae numquam qui sunt.\n\nVelit rem ipsum veritatis nihil voluptas tempora rem placeat. Repellat quia earum incidunt eveniet sit. Sed molestiae ea et. Corporis ducimus dolores voluptas quas amet. Eum asperiores enim culpa. Corporis quaerat ut.",
                            Title = "Example Page 1 - Paragraph 2",
                            WikiPageId = new Guid("9e39a89d-c92e-4ad3-8865-846c91078738")
                        },
                        new
                        {
                            Id = new Guid("1350da13-da00-49a9-a96f-9f6376a1ca79"),
                            Content = "Sit eum corporis. Quis vel quae sit laudantium incidunt recusandae et voluptate illo. Et unde veritatis quidem. Consequuntur placeat enim ab dolorem.\n\nIllo eos ab nobis pariatur. Error corporis itaque odio sed quia voluptas asperiores perferendis. Quia quis maxime cum non sint dicta. Consequuntur sed ad et facere non vero. Quasi tempora voluptatem autem vel recusandae dicta.\n\nNam recusandae sequi consequatur doloremque amet consequatur voluptate. Autem eveniet quas labore exercitationem quo blanditiis et illo. Vel praesentium deserunt minus eligendi. Optio praesentium nesciunt est officiis. Fuga similique soluta maiores ad exercitationem.\n\nEos voluptas quis voluptatem voluptatem. Eveniet porro aut rerum. Amet esse et commodi numquam aut nihil id.\n\nMaxime nulla aut repellendus. Illum autem impedit ea quidem laboriosam animi. Quasi facere corporis pariatur aut voluptatem.\n\nRatione accusantium exercitationem dolorem. Nam rerum quisquam amet id. Tenetur sint dolore vel voluptatum maxime repellat.\n\nDoloribus tempore quas voluptates consequatur enim voluptas perspiciatis dignissimos commodi. Corporis amet aut. Qui perspiciatis cupiditate voluptatem veniam aut est sequi ut. Et libero eos. Ipsam maiores fuga cumque deserunt.\n\nReiciendis error ab id ad sed vitae officia consequatur nihil. Ut laborum veritatis quos nobis animi. Dolores nostrum veniam vel. Illum quasi dicta dolores ad. Recusandae nihil sit accusamus veritatis. Voluptate ratione ut repudiandae quod voluptatibus voluptatum quia sint saepe.\n\nSed repellendus placeat perspiciatis temporibus. Dicta vero nostrum voluptatem culpa tempora est a neque. Sapiente cum exercitationem qui. Dolores eum qui dolor. Qui repellat et autem.",
                            Title = "Example Page 1 - Paragraph 3",
                            WikiPageId = new Guid("9e39a89d-c92e-4ad3-8865-846c91078738")
                        },
                        new
                        {
                            Id = new Guid("99ad0bde-c8dc-4181-9946-095c504488b7"),
                            Content = "Mollitia cumque aut et. Fugiat quia sunt et ut recusandae alias et esse minus. Enim suscipit perspiciatis error eaque. Consequatur voluptatum praesentium cupiditate doloremque fuga quia. Amet incidunt veniam totam recusandae laboriosam amet eligendi. Quisquam a culpa alias provident quasi debitis tempore quisquam.\n\nSunt eos vitae maiores sapiente rem nulla. Veniam magnam aut laboriosam labore rerum quisquam. Qui est eum eligendi eum tempore. Doloribus eum vel porro fugit.\n\nOdit repudiandae magnam eveniet magni adipisci explicabo ea officia eum. Voluptas illo eum enim aut quae optio et. Aliquid modi assumenda et quia culpa. At architecto nemo in distinctio sunt laudantium soluta excepturi aut.",
                            Title = "Example Page 1 - Paragraph 4",
                            WikiPageId = new Guid("9e39a89d-c92e-4ad3-8865-846c91078738")
                        },
                        new
                        {
                            Id = new Guid("20186a32-3bd6-4b45-ae78-fef552569cf3"),
                            Content = "Accusantium ex accusamus ab ex corrupti dolorum qui. Consequuntur incidunt ut veniam fuga non voluptates eum eum. Exercitationem officia harum eius laboriosam modi sit. Sint fuga temporibus in corrupti nam sunt saepe occaecati. Et non maxime omnis at.\n\nDelectus sequi sint. Dicta enim et et enim ea qui dolores ad consequatur. Dolores asperiores possimus. Molestiae praesentium non vitae sit amet voluptas.\n\nUt voluptatem corporis maiores. Repudiandae nihil at ut esse officiis. Et nulla sunt praesentium est quia deserunt.\n\nEx iste odit ullam qui nobis neque. Tempore voluptas non ea qui nobis. Ad mollitia dignissimos animi voluptas corrupti voluptates quod molestiae sed. Occaecati est pariatur earum esse. Quam facilis ut optio deleniti inventore iusto earum iste delectus.\n\nDignissimos et laborum laudantium omnis qui. Molestiae perferendis voluptas et hic. Inventore et reiciendis soluta perspiciatis.",
                            Title = "Example Page 1 - Paragraph 5",
                            WikiPageId = new Guid("9e39a89d-c92e-4ad3-8865-846c91078738")
                        },
                        new
                        {
                            Id = new Guid("f1ccdf42-89bd-4714-b8d7-ef4e1913653c"),
                            Content = "Recusandae ut esse rerum voluptas et et ipsam voluptate qui. At sit exercitationem. Quia qui ut incidunt velit qui. Consequatur ipsum hic sapiente. Sed placeat id odio vitae nesciunt.\n\nVoluptatem provident earum et amet fugiat. Eum laborum dolores aut et dignissimos animi illo. Nisi illum voluptatem voluptas aut ullam. Similique maiores adipisci soluta quas esse numquam qui qui.\n\nItaque voluptatum dolorem qui neque molestiae. Laborum recusandae qui omnis et necessitatibus similique est. Sapiente amet ut dolores repellat.\n\nRepellendus neque consequuntur aspernatur excepturi sed eos similique cum. Ut voluptas eveniet ipsam. Dolor molestiae corporis molestiae. Voluptas fugiat nam delectus debitis. Est eum hic. Autem aut autem et.\n\nAut cum aliquid incidunt et ea. Veniam dolorem reiciendis. Architecto est quidem culpa voluptas soluta odio quas dolor vel. Magnam facilis nisi neque similique cumque iusto. Qui et hic autem aut.\n\nEsse quia voluptatem. Accusantium iste blanditiis enim consequatur tenetur. Quasi quis perspiciatis modi. Soluta non voluptatem consequatur veniam ex est non.\n\nMolestiae ipsum cum optio. Voluptates et corrupti excepturi ab omnis molestiae. Nemo optio aut nemo consequatur. Et qui beatae impedit sint voluptatem quis dignissimos. Voluptas sit distinctio labore sed qui rerum.\n\nEt mollitia nisi aut exercitationem. Natus et consequatur ab consectetur aut. Aut minus corrupti culpa aliquam vel a aut repudiandae.\n\nExplicabo voluptas corrupti reprehenderit incidunt. Blanditiis provident sed aut alias id illo voluptas. Maxime laboriosam voluptatem libero. Voluptate in assumenda nam sit expedita est.\n\nSed excepturi laudantium odit quia cumque necessitatibus ipsam quaerat. Nulla dicta qui enim doloribus aut ab et. Omnis impedit blanditiis alias atque sint velit harum minima.",
                            Title = "Example Page 1 - Paragraph 6",
                            WikiPageId = new Guid("9e39a89d-c92e-4ad3-8865-846c91078738")
                        },
                        new
                        {
                            Id = new Guid("0b6bb608-83d5-4da8-8802-6804e5324b20"),
                            Content = "Porro quis odio modi laboriosam et rem quia et. Cum vero eum est est quibusdam quia neque. Ut iure voluptatem ducimus doloremque sint. Odit officia quia rerum fugit omnis tempore repudiandae.\n\nDolor ipsum rerum blanditiis voluptas modi. Qui ipsam tempore voluptatibus maiores qui. Harum itaque sit praesentium veniam est. Blanditiis animi accusamus nobis aut.\n\nMagni eaque et sunt voluptatibus reprehenderit maiores amet ut. Et consequatur laudantium. Est minima corrupti cupiditate. Amet quas enim et eos voluptatem. Ipsum ad blanditiis sunt fugiat sint.\n\nRepudiandae assumenda et qui non error occaecati. Doloribus quia aperiam dicta doloribus ut facilis sunt cum sit. Corrupti voluptatem fuga neque quia soluta quod delectus. Similique esse ab ea maiores ut repellat.\n\nConsequatur doloribus consequatur autem itaque sunt. A voluptatem quis quidem optio et id possimus nemo esse. Tempora ipsam delectus perspiciatis qui id amet eaque. Animi necessitatibus et omnis quam quod temporibus quam blanditiis. Quia dicta alias amet sit delectus excepturi deserunt.\n\nUt quas et ullam in. Aliquam dolorum sapiente molestias. Esse velit dolorem sequi dolore.",
                            ParagraphImage = "https://html5-templates.com/demo/wikipedia-template/img/pencil.jpg",
                            ParagraphImageText = "Example ParagraphImageText 2",
                            Title = "Example Page 2 - Paragraph 1",
                            WikiPageId = new Guid("2b4d5ab5-1777-4e81-8d0e-99ba726cd9b7")
                        },
                        new
                        {
                            Id = new Guid("ec6c11f3-81e4-4f04-a596-2332c5fa71e0"),
                            Content = "Voluptatum consequatur quo corrupti expedita officia. Quidem in rerum eveniet totam. Maiores nisi dolor enim mollitia consequatur ipsa ratione ut.\n\nDolor voluptates harum. Rerum deleniti assumenda. Qui debitis voluptas quas sed nihil dicta et voluptatibus. Ullam dolore et molestiae illum optio. Sapiente aspernatur qui id dolorum ut. Velit distinctio impedit possimus eius.\n\nEt eum et praesentium. Cupiditate quidem sit qui. Occaecati et et doloribus sunt dolor voluptas. Repellendus dolorem accusamus perferendis. Sint mollitia odit occaecati. Amet est officia et dicta consequatur aut non eligendi odio.\n\nAperiam ut sint maxime dolores. Est rerum qui necessitatibus in. Exercitationem libero deleniti qui veniam cupiditate aliquid quod ipsam molestiae. Velit incidunt nisi distinctio quaerat ad voluptate. Aut qui qui non voluptatem nobis quasi mollitia quia. Facilis ut et in et consequatur aut facilis.",
                            Title = "Example Page 2 - Paragraph 2",
                            WikiPageId = new Guid("2b4d5ab5-1777-4e81-8d0e-99ba726cd9b7")
                        },
                        new
                        {
                            Id = new Guid("59012168-a717-427b-aa4c-1ad876e6cc2f"),
                            Content = "Praesentium eos eius et ut. Nihil ut autem voluptatem et aut deleniti est. Sed sit ut est laboriosam ut. Vero culpa veritatis perspiciatis doloremque totam. Cupiditate accusamus rerum architecto voluptas esse. Aut aut sunt laudantium voluptatem.\n\nExplicabo omnis esse sunt et illo vero consequatur. Autem et et ut iste itaque nemo. Veniam eius quo vero corporis quidem voluptas. Maiores autem rerum laborum ducimus nihil esse recusandae assumenda. Voluptates officiis illo.\n\nPossimus id iste pariatur ipsum sint vero. Et eum et repudiandae provident tempore explicabo inventore quia. Distinctio id facere ut. Ut alias excepturi magni.\n\nVoluptatem qui est dolores omnis voluptas voluptates voluptas consequuntur quasi. Cupiditate laboriosam nesciunt laudantium delectus. Iusto ut optio a ea itaque delectus ut et. Consequatur voluptatem ea tempora. Asperiores nemo voluptatem qui enim.\n\nMagnam similique rem aperiam perferendis eum blanditiis est. Laboriosam quisquam et ad excepturi sed reiciendis. Praesentium quasi et et. Possimus ipsam similique eaque. Enim ut totam sit amet.\n\nNulla repellat voluptas et. Sed fugiat eos voluptate. Numquam provident et mollitia. Aut blanditiis veniam accusantium ipsam asperiores.",
                            Title = "Example Page 2 - Paragraph 3",
                            WikiPageId = new Guid("2b4d5ab5-1777-4e81-8d0e-99ba726cd9b7")
                        },
                        new
                        {
                            Id = new Guid("5910cdef-a239-4533-88d0-59658ea3e0e0"),
                            Content = "Distinctio dolor non perspiciatis quaerat eligendi. Ab commodi quia suscipit. Illum alias aut ullam officia sed et libero quidem quia. Numquam ipsum non vel sapiente animi ullam voluptate sint.",
                            Title = "Example Page 2 - Paragraph 4",
                            WikiPageId = new Guid("2b4d5ab5-1777-4e81-8d0e-99ba726cd9b7")
                        },
                        new
                        {
                            Id = new Guid("2bfddf9f-36fb-4e85-b29c-098f63b7559d"),
                            Content = "Rerum ut dolor dolore excepturi et quia quisquam in. Voluptatibus id qui alias aut ut et sunt. Nemo et perferendis omnis sequi.\n\nVoluptate voluptas asperiores est praesentium. Cum pariatur accusamus. Quidem impedit voluptas similique ut nam eum quis cupiditate consequatur.",
                            Title = "Example Page 2 - Paragraph 5",
                            WikiPageId = new Guid("2b4d5ab5-1777-4e81-8d0e-99ba726cd9b7")
                        },
                        new
                        {
                            Id = new Guid("711cd56d-0117-4686-88f6-927708e32797"),
                            Content = "Maiores quaerat reiciendis error error. Illo qui autem. Delectus in illo. Voluptatem ipsum quidem itaque qui eum. Earum ut sint soluta delectus eum aut occaecati dolorem ut.\n\nAtque eum non quos et dolore velit aut. Quos eum ullam. Tempore in praesentium fugiat nostrum. Assumenda autem qui. Consequatur et eos occaecati numquam est dolores dolore excepturi.\n\nAut quo qui ut veniam labore. Nam laudantium quia magnam. Eligendi recusandae quia.\n\nIn libero pariatur repellendus ut ut et. Ullam dolor voluptas illo sint et. Ea id quae. Omnis saepe repellat dolores ut consequatur.\n\nQuia culpa dolorum quae omnis quos laborum quae consequatur fugiat. Earum dolor iusto atque quas ea vel distinctio. Officiis fugit expedita praesentium suscipit repellendus molestiae non odit. Labore quasi consequatur aut sed.\n\nExcepturi debitis saepe doloribus aspernatur. Ut enim voluptatem. Repellendus sunt aperiam nesciunt blanditiis vel expedita et nesciunt dolorem.\n\nEnim et vero aut aut odit illum necessitatibus. Libero placeat eos et. Consequatur neque aliquid voluptates sequi enim dolore voluptatum. Dolor qui voluptas quaerat ut velit reprehenderit. Distinctio autem nostrum accusantium voluptatem maxime.",
                            Title = "Example Page 2 - Paragraph 6",
                            WikiPageId = new Guid("2b4d5ab5-1777-4e81-8d0e-99ba726cd9b7")
                        },
                        new
                        {
                            Id = new Guid("4adcca50-7dd6-453c-967d-5053c52869e9"),
                            Content = "User Submitted Content 1",
                            ParagraphImage = "https://i.kym-cdn.com/entries/icons/original/000/029/079/hellothere.jpg",
                            ParagraphImageText = "Hello there",
                            Title = "User Submitted Paragraph 1",
                            WikiPageId = new Guid("f3464d25-401c-4276-a117-399e440f6a74")
                        },
                        new
                        {
                            Id = new Guid("0fad8d66-8e8d-4fd3-86b4-3fd70b69f195"),
                            Content = "User Submitted Content 2",
                            ParagraphImage = "https://i.ytimg.com/vi/jAB3mMdS0xE/maxresdefault.jpg",
                            ParagraphImageText = "General Kenobi",
                            Title = "User Submitted Paragraph 2",
                            WikiPageId = new Guid("f3464d25-401c-4276-a117-399e440f6a74")
                        },
                        new
                        {
                            Id = new Guid("2224f60d-554c-4ea0-98c9-168998737c3a"),
                            Content = "Helldivers never die!",
                            ParagraphImage = "https://i.ytimg.com/vi/nhhICroqfpU/hq720_live.jpg",
                            ParagraphImageText = "Helldivers never die!",
                            Title = "New Paragraph 1",
                            WikiPageId = new Guid("6429a241-f6f5-4964-b4c1-a32a7d176f6b")
                        },
                        new
                        {
                            Id = new Guid("2c768fae-72ed-42be-b063-e6f5793eece6"),
                            Content = "Liber-Tea is a funny line haha",
                            ParagraphImage = "https://i.kym-cdn.com/photos/images/original/002/760/001/66d",
                            ParagraphImageText = "Time for a nice cup of Liber-Tea",
                            Title = "Liber-Tea",
                            WikiPageId = new Guid("6429a241-f6f5-4964-b4c1-a32a7d176f6b")
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.StyleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleRightInnerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListLinkTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterListTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleColor = "#526cad",
                            ArticleRightColor = "#3c5fb8",
                            ArticleRightInnerColor = "#2b4ea6",
                            BodyColor = "#507ced",
                            FontFamily = "Arial, sans-serif",
                            FooterListLinkTextColor = "#1d305e",
                            FooterListTextColor = "#233a71",
                            Logo = "logo/logo_pfp.png",
                            WikiName = "Your Wiki"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ForumPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReplayToCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("ReplayToCommentId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WikiPageId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LegacyWikiPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("WikiPages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WikiPage");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e39a89d-c92e-4ad3-8865-846c91078738"),
                            CategoryId = new Guid("22be1c9b-a3e9-4dbf-a95c-0381188b4d8f"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 8, 18, 41, 11, 208, DateTimeKind.Local).AddTicks(6395),
                            RoleNote = "Example RoleNote 1",
                            SiteSub = "Example SiteSub 1",
                            Title = "Example Page 1"
                        },
                        new
                        {
                            Id = new Guid("2b4d5ab5-1777-4e81-8d0e-99ba726cd9b7"),
                            CategoryId = new Guid("0a8e5d4b-a99e-4ef5-b84c-ad152ccc74ad"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 8, 18, 41, 11, 208, DateTimeKind.Local).AddTicks(6433),
                            RoleNote = "Example RoleNote 2",
                            SiteSub = "Example SiteSub 2",
                            Title = "Example Page 2"
                        });
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasBaseType("wiki_backend.Models.WikiPage");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewPage")
                        .HasColumnType("bit");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WikiPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WikiPageId");

                    b.HasDiscriminator().HasValue("UserSubmittedWikiPage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3464d25-401c-4276-a117-399e440f6a74"),
                            CategoryId = new Guid("5ae63cb9-43ba-4993-b30a-43af10046f16"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 8, 18, 41, 11, 208, DateTimeKind.Local).AddTicks(6566),
                            RoleNote = "User Submitted RoleNote",
                            SiteSub = "User Submitted SiteSub",
                            Title = "User Submitted Page",
                            Approved = false,
                            IsNewPage = true,
                            SubmittedBy = "tester"
                        },
                        new
                        {
                            Id = new Guid("6429a241-f6f5-4964-b4c1-a32a7d176f6b"),
                            CategoryId = new Guid("cadc3bc7-58db-4b9a-b6a2-5ec79c9ddad8"),
                            LegacyWikiPage = true,
                            PostDate = new DateTime(2024, 5, 8, 18, 41, 11, 208, DateTimeKind.Local).AddTicks(6570),
                            RoleNote = "Example RoleNote 1 Update",
                            SiteSub = "Example SiteSub 1 Update",
                            Title = "Example Page 1",
                            Approved = false,
                            IsNewPage = false,
                            SubmittedBy = "tester",
                            WikiPageId = new Guid("9e39a89d-c92e-4ad3-8865-846c91078738")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("wiki_backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wiki_backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("wiki_backend.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("wiki_backend.Models.ApplicationUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumTopic", "ForumTopic")
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumTopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.Paragraph", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Paragraphs")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.UserComment", b =>
                {
                    b.HasOne("wiki_backend.Models.ForumModels.ForumPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("ForumPostId");

                    b.HasOne("wiki_backend.Models.UserComment", "ReplyToComment")
                        .WithMany()
                        .HasForeignKey("ReplayToCommentId");

                    b.HasOne("wiki_backend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany("Comments")
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToComment");

                    b.Navigation("UserProfile");

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.Category", "Category")
                        .WithMany("WikiPages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("wiki_backend.Models.UserSubmittedWikiPage", b =>
                {
                    b.HasOne("wiki_backend.Models.WikiPage", "WikiPage")
                        .WithMany()
                        .HasForeignKey("WikiPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("wiki_backend.Models.Category", b =>
                {
                    b.Navigation("WikiPages");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("wiki_backend.Models.ForumModels.ForumTopic", b =>
                {
                    b.Navigation("ForumPosts");
                });

            modelBuilder.Entity("wiki_backend.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("wiki_backend.Models.WikiPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
